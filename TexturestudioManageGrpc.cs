// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: texturestudio/texturestudio_manage.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace TextureStudio {
  /// <summary>
  /// Service to manage texture studio servers cluster.
  /// </summary>
  public static partial class TextureStudioManagerService
  {
    static readonly string __ServiceName = "texture_studio.TextureStudioManagerService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::TextureStudio.CreateServerRequest> __Marshaller_texture_studio_CreateServerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TextureStudio.CreateServerRequest.Parser));
    static readonly grpc::Marshaller<global::TextureStudio.CreateServerResponse> __Marshaller_texture_studio_CreateServerResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TextureStudio.CreateServerResponse.Parser));
    static readonly grpc::Marshaller<global::TextureStudio.GetServersRequest> __Marshaller_texture_studio_GetServersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TextureStudio.GetServersRequest.Parser));
    static readonly grpc::Marshaller<global::TextureStudio.GetServersResponse> __Marshaller_texture_studio_GetServersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TextureStudio.GetServersResponse.Parser));
    static readonly grpc::Marshaller<global::TextureStudio.MyServerRequest> __Marshaller_texture_studio_MyServerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TextureStudio.MyServerRequest.Parser));
    static readonly grpc::Marshaller<global::TextureStudio.MyServerResponse> __Marshaller_texture_studio_MyServerResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TextureStudio.MyServerResponse.Parser));
    static readonly grpc::Marshaller<global::TextureStudio.TransferOwnershipRequest> __Marshaller_texture_studio_TransferOwnershipRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TextureStudio.TransferOwnershipRequest.Parser));
    static readonly grpc::Marshaller<global::TextureStudio.TransferOwnershipResponse> __Marshaller_texture_studio_TransferOwnershipResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TextureStudio.TransferOwnershipResponse.Parser));
    static readonly grpc::Marshaller<global::TextureStudio.DeleteServerRequest> __Marshaller_texture_studio_DeleteServerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TextureStudio.DeleteServerRequest.Parser));
    static readonly grpc::Marshaller<global::TextureStudio.DeleteServerResponse> __Marshaller_texture_studio_DeleteServerResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TextureStudio.DeleteServerResponse.Parser));

    static readonly grpc::Method<global::TextureStudio.CreateServerRequest, global::TextureStudio.CreateServerResponse> __Method_CreateServer = new grpc::Method<global::TextureStudio.CreateServerRequest, global::TextureStudio.CreateServerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateServer",
        __Marshaller_texture_studio_CreateServerRequest,
        __Marshaller_texture_studio_CreateServerResponse);

    static readonly grpc::Method<global::TextureStudio.GetServersRequest, global::TextureStudio.GetServersResponse> __Method_GetServers = new grpc::Method<global::TextureStudio.GetServersRequest, global::TextureStudio.GetServersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServers",
        __Marshaller_texture_studio_GetServersRequest,
        __Marshaller_texture_studio_GetServersResponse);

    static readonly grpc::Method<global::TextureStudio.MyServerRequest, global::TextureStudio.MyServerResponse> __Method_MyServer = new grpc::Method<global::TextureStudio.MyServerRequest, global::TextureStudio.MyServerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MyServer",
        __Marshaller_texture_studio_MyServerRequest,
        __Marshaller_texture_studio_MyServerResponse);

    static readonly grpc::Method<global::TextureStudio.TransferOwnershipRequest, global::TextureStudio.TransferOwnershipResponse> __Method_TransferOwnership = new grpc::Method<global::TextureStudio.TransferOwnershipRequest, global::TextureStudio.TransferOwnershipResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TransferOwnership",
        __Marshaller_texture_studio_TransferOwnershipRequest,
        __Marshaller_texture_studio_TransferOwnershipResponse);

    static readonly grpc::Method<global::TextureStudio.DeleteServerRequest, global::TextureStudio.DeleteServerResponse> __Method_DeleteServer = new grpc::Method<global::TextureStudio.DeleteServerRequest, global::TextureStudio.DeleteServerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteServer",
        __Marshaller_texture_studio_DeleteServerRequest,
        __Marshaller_texture_studio_DeleteServerResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::TextureStudio.TexturestudioManageReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TextureStudioManagerService</summary>
    [grpc::BindServiceMethod(typeof(TextureStudioManagerService), "BindService")]
    public abstract partial class TextureStudioManagerServiceBase
    {
      /// <summary>
      /// Create a new texture studio server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::TextureStudio.CreateServerResponse> CreateServer(global::TextureStudio.CreateServerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get all existing servers
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::TextureStudio.GetServersResponse> GetServers(global::TextureStudio.GetServersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get texture studio server id for current user.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::TextureStudio.MyServerResponse> MyServer(global::TextureStudio.MyServerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Change owner of texture studio server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::TextureStudio.TransferOwnershipResponse> TransferOwnership(global::TextureStudio.TransferOwnershipRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a texture studio server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::TextureStudio.DeleteServerResponse> DeleteServer(global::TextureStudio.DeleteServerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TextureStudioManagerService</summary>
    public partial class TextureStudioManagerServiceClient : grpc::ClientBase<TextureStudioManagerServiceClient>
    {
      /// <summary>Creates a new client for TextureStudioManagerService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TextureStudioManagerServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TextureStudioManagerService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TextureStudioManagerServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TextureStudioManagerServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TextureStudioManagerServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a new texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.CreateServerResponse CreateServer(global::TextureStudio.CreateServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateServer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.CreateServerResponse CreateServer(global::TextureStudio.CreateServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateServer, null, options, request);
      }
      /// <summary>
      /// Create a new texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.CreateServerResponse> CreateServerAsync(global::TextureStudio.CreateServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateServerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.CreateServerResponse> CreateServerAsync(global::TextureStudio.CreateServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateServer, null, options, request);
      }
      /// <summary>
      /// Get all existing servers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.GetServersResponse GetServers(global::TextureStudio.GetServersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all existing servers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.GetServersResponse GetServers(global::TextureStudio.GetServersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServers, null, options, request);
      }
      /// <summary>
      /// Get all existing servers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.GetServersResponse> GetServersAsync(global::TextureStudio.GetServersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all existing servers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.GetServersResponse> GetServersAsync(global::TextureStudio.GetServersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServers, null, options, request);
      }
      /// <summary>
      /// Get texture studio server id for current user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.MyServerResponse MyServer(global::TextureStudio.MyServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MyServer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get texture studio server id for current user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.MyServerResponse MyServer(global::TextureStudio.MyServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MyServer, null, options, request);
      }
      /// <summary>
      /// Get texture studio server id for current user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.MyServerResponse> MyServerAsync(global::TextureStudio.MyServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MyServerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get texture studio server id for current user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.MyServerResponse> MyServerAsync(global::TextureStudio.MyServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MyServer, null, options, request);
      }
      /// <summary>
      /// Change owner of texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.TransferOwnershipResponse TransferOwnership(global::TextureStudio.TransferOwnershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferOwnership(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Change owner of texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.TransferOwnershipResponse TransferOwnership(global::TextureStudio.TransferOwnershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TransferOwnership, null, options, request);
      }
      /// <summary>
      /// Change owner of texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.TransferOwnershipResponse> TransferOwnershipAsync(global::TextureStudio.TransferOwnershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferOwnershipAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Change owner of texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.TransferOwnershipResponse> TransferOwnershipAsync(global::TextureStudio.TransferOwnershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TransferOwnership, null, options, request);
      }
      /// <summary>
      /// Delete a texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.DeleteServerResponse DeleteServer(global::TextureStudio.DeleteServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteServer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.DeleteServerResponse DeleteServer(global::TextureStudio.DeleteServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteServer, null, options, request);
      }
      /// <summary>
      /// Delete a texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.DeleteServerResponse> DeleteServerAsync(global::TextureStudio.DeleteServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteServerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.DeleteServerResponse> DeleteServerAsync(global::TextureStudio.DeleteServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteServer, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TextureStudioManagerServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TextureStudioManagerServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TextureStudioManagerServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateServer, serviceImpl.CreateServer)
          .AddMethod(__Method_GetServers, serviceImpl.GetServers)
          .AddMethod(__Method_MyServer, serviceImpl.MyServer)
          .AddMethod(__Method_TransferOwnership, serviceImpl.TransferOwnership)
          .AddMethod(__Method_DeleteServer, serviceImpl.DeleteServer).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TextureStudioManagerServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateServer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TextureStudio.CreateServerRequest, global::TextureStudio.CreateServerResponse>(serviceImpl.CreateServer));
      serviceBinder.AddMethod(__Method_GetServers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TextureStudio.GetServersRequest, global::TextureStudio.GetServersResponse>(serviceImpl.GetServers));
      serviceBinder.AddMethod(__Method_MyServer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TextureStudio.MyServerRequest, global::TextureStudio.MyServerResponse>(serviceImpl.MyServer));
      serviceBinder.AddMethod(__Method_TransferOwnership, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TextureStudio.TransferOwnershipRequest, global::TextureStudio.TransferOwnershipResponse>(serviceImpl.TransferOwnership));
      serviceBinder.AddMethod(__Method_DeleteServer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TextureStudio.DeleteServerRequest, global::TextureStudio.DeleteServerResponse>(serviceImpl.DeleteServer));
    }

  }
}
#endregion
