// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: spots/spots.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mruv.Spots {
  /// <summary>
  /// The MruV spots service provides procedures for managing spots.
  /// </summary>
  public static partial class MruVSpotsService
  {
    static readonly string __ServiceName = "mruv.spots.MruVSpotsService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Mruv.Spots.CreateSpotRequest> __Marshaller_mruv_spots_CreateSpotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Spots.CreateSpotRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Spots.CreateSpotResponse> __Marshaller_mruv_spots_CreateSpotResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Spots.CreateSpotResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Spots.GetSpotRequest> __Marshaller_mruv_spots_GetSpotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Spots.GetSpotRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Spots.GetSpotResponse> __Marshaller_mruv_spots_GetSpotResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Spots.GetSpotResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Spots.UpdateSpotRequest> __Marshaller_mruv_spots_UpdateSpotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Spots.UpdateSpotRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Spots.UpdateSpotResponse> __Marshaller_mruv_spots_UpdateSpotResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Spots.UpdateSpotResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Spots.DeleteSpotRequest> __Marshaller_mruv_spots_DeleteSpotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Spots.DeleteSpotRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Spots.DeleteSpotResponse> __Marshaller_mruv_spots_DeleteSpotResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Spots.DeleteSpotResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Spots.FetchAllSpotsRequest> __Marshaller_mruv_spots_FetchAllSpotsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Spots.FetchAllSpotsRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Spots.FetchAllSpotsResponse> __Marshaller_mruv_spots_FetchAllSpotsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Spots.FetchAllSpotsResponse.Parser));

    static readonly grpc::Method<global::Mruv.Spots.CreateSpotRequest, global::Mruv.Spots.CreateSpotResponse> __Method_CreateSpot = new grpc::Method<global::Mruv.Spots.CreateSpotRequest, global::Mruv.Spots.CreateSpotResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSpot",
        __Marshaller_mruv_spots_CreateSpotRequest,
        __Marshaller_mruv_spots_CreateSpotResponse);

    static readonly grpc::Method<global::Mruv.Spots.GetSpotRequest, global::Mruv.Spots.GetSpotResponse> __Method_GetSpot = new grpc::Method<global::Mruv.Spots.GetSpotRequest, global::Mruv.Spots.GetSpotResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSpot",
        __Marshaller_mruv_spots_GetSpotRequest,
        __Marshaller_mruv_spots_GetSpotResponse);

    static readonly grpc::Method<global::Mruv.Spots.UpdateSpotRequest, global::Mruv.Spots.UpdateSpotResponse> __Method_UpdateSpot = new grpc::Method<global::Mruv.Spots.UpdateSpotRequest, global::Mruv.Spots.UpdateSpotResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSpot",
        __Marshaller_mruv_spots_UpdateSpotRequest,
        __Marshaller_mruv_spots_UpdateSpotResponse);

    static readonly grpc::Method<global::Mruv.Spots.DeleteSpotRequest, global::Mruv.Spots.DeleteSpotResponse> __Method_DeleteSpot = new grpc::Method<global::Mruv.Spots.DeleteSpotRequest, global::Mruv.Spots.DeleteSpotResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSpot",
        __Marshaller_mruv_spots_DeleteSpotRequest,
        __Marshaller_mruv_spots_DeleteSpotResponse);

    static readonly grpc::Method<global::Mruv.Spots.FetchAllSpotsRequest, global::Mruv.Spots.FetchAllSpotsResponse> __Method_FetchAll = new grpc::Method<global::Mruv.Spots.FetchAllSpotsRequest, global::Mruv.Spots.FetchAllSpotsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "FetchAll",
        __Marshaller_mruv_spots_FetchAllSpotsRequest,
        __Marshaller_mruv_spots_FetchAllSpotsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mruv.Spots.SpotsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MruVSpotsService</summary>
    [grpc::BindServiceMethod(typeof(MruVSpotsService), "BindService")]
    public abstract partial class MruVSpotsServiceBase
    {
      /// <summary>
      /// Create a spot.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Spots.CreateSpotResponse> CreateSpot(global::Mruv.Spots.CreateSpotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a spot.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Spots.GetSpotResponse> GetSpot(global::Mruv.Spots.GetSpotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a spot.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Spots.UpdateSpotResponse> UpdateSpot(global::Mruv.Spots.UpdateSpotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a spot.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Spots.DeleteSpotResponse> DeleteSpot(global::Mruv.Spots.DeleteSpotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Fetch all spots.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task FetchAll(global::Mruv.Spots.FetchAllSpotsRequest request, grpc::IServerStreamWriter<global::Mruv.Spots.FetchAllSpotsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MruVSpotsService</summary>
    public partial class MruVSpotsServiceClient : grpc::ClientBase<MruVSpotsServiceClient>
    {
      /// <summary>Creates a new client for MruVSpotsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MruVSpotsServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MruVSpotsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MruVSpotsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MruVSpotsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MruVSpotsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a spot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Spots.CreateSpotResponse CreateSpot(global::Mruv.Spots.CreateSpotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSpot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a spot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Spots.CreateSpotResponse CreateSpot(global::Mruv.Spots.CreateSpotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSpot, null, options, request);
      }
      /// <summary>
      /// Create a spot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Spots.CreateSpotResponse> CreateSpotAsync(global::Mruv.Spots.CreateSpotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSpotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a spot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Spots.CreateSpotResponse> CreateSpotAsync(global::Mruv.Spots.CreateSpotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSpot, null, options, request);
      }
      /// <summary>
      /// Get a spot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Spots.GetSpotResponse GetSpot(global::Mruv.Spots.GetSpotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSpot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a spot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Spots.GetSpotResponse GetSpot(global::Mruv.Spots.GetSpotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSpot, null, options, request);
      }
      /// <summary>
      /// Get a spot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Spots.GetSpotResponse> GetSpotAsync(global::Mruv.Spots.GetSpotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSpotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a spot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Spots.GetSpotResponse> GetSpotAsync(global::Mruv.Spots.GetSpotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSpot, null, options, request);
      }
      /// <summary>
      /// Update a spot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Spots.UpdateSpotResponse UpdateSpot(global::Mruv.Spots.UpdateSpotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSpot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a spot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Spots.UpdateSpotResponse UpdateSpot(global::Mruv.Spots.UpdateSpotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSpot, null, options, request);
      }
      /// <summary>
      /// Update a spot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Spots.UpdateSpotResponse> UpdateSpotAsync(global::Mruv.Spots.UpdateSpotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSpotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a spot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Spots.UpdateSpotResponse> UpdateSpotAsync(global::Mruv.Spots.UpdateSpotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSpot, null, options, request);
      }
      /// <summary>
      /// Delete a spot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Spots.DeleteSpotResponse DeleteSpot(global::Mruv.Spots.DeleteSpotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSpot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a spot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Spots.DeleteSpotResponse DeleteSpot(global::Mruv.Spots.DeleteSpotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSpot, null, options, request);
      }
      /// <summary>
      /// Delete a spot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Spots.DeleteSpotResponse> DeleteSpotAsync(global::Mruv.Spots.DeleteSpotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSpotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a spot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Spots.DeleteSpotResponse> DeleteSpotAsync(global::Mruv.Spots.DeleteSpotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSpot, null, options, request);
      }
      /// <summary>
      /// Fetch all spots.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Spots.FetchAllSpotsResponse> FetchAll(global::Mruv.Spots.FetchAllSpotsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchAll(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetch all spots.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Spots.FetchAllSpotsResponse> FetchAll(global::Mruv.Spots.FetchAllSpotsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_FetchAll, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MruVSpotsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MruVSpotsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MruVSpotsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateSpot, serviceImpl.CreateSpot)
          .AddMethod(__Method_GetSpot, serviceImpl.GetSpot)
          .AddMethod(__Method_UpdateSpot, serviceImpl.UpdateSpot)
          .AddMethod(__Method_DeleteSpot, serviceImpl.DeleteSpot)
          .AddMethod(__Method_FetchAll, serviceImpl.FetchAll).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MruVSpotsServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateSpot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Spots.CreateSpotRequest, global::Mruv.Spots.CreateSpotResponse>(serviceImpl.CreateSpot));
      serviceBinder.AddMethod(__Method_GetSpot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Spots.GetSpotRequest, global::Mruv.Spots.GetSpotResponse>(serviceImpl.GetSpot));
      serviceBinder.AddMethod(__Method_UpdateSpot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Spots.UpdateSpotRequest, global::Mruv.Spots.UpdateSpotResponse>(serviceImpl.UpdateSpot));
      serviceBinder.AddMethod(__Method_DeleteSpot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Spots.DeleteSpotRequest, global::Mruv.Spots.DeleteSpotResponse>(serviceImpl.DeleteSpot));
      serviceBinder.AddMethod(__Method_FetchAll, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mruv.Spots.FetchAllSpotsRequest, global::Mruv.Spots.FetchAllSpotsResponse>(serviceImpl.FetchAll));
    }

  }
}
#endregion
