// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: estates/entrances.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mruv.Entrances {
  /// <summary>
  /// The MruV entrances service provides procedures for managing an entrances to estates and teleportation to locations.
  /// </summary>
  public static partial class MruVEntrancesService
  {
    static readonly string __ServiceName = "mruv.entrances.MruVEntrancesService";

    static readonly grpc::Marshaller<global::Mruv.Entrances.CreateEntranceRequest> __Marshaller_mruv_entrances_CreateEntranceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Entrances.CreateEntranceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Entrances.CreateEntranceResponse> __Marshaller_mruv_entrances_CreateEntranceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Entrances.CreateEntranceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Entrances.GetEntranceRequest> __Marshaller_mruv_entrances_GetEntranceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Entrances.GetEntranceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Entrances.GetEntranceResponse> __Marshaller_mruv_entrances_GetEntranceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Entrances.GetEntranceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Entrances.UpdateEntranceRequest> __Marshaller_mruv_entrances_UpdateEntranceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Entrances.UpdateEntranceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Entrances.UpdateEntranceResponse> __Marshaller_mruv_entrances_UpdateEntranceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Entrances.UpdateEntranceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Entrances.DeleteEntranceRequest> __Marshaller_mruv_entrances_DeleteEntranceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Entrances.DeleteEntranceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Entrances.DeleteEntranceResponse> __Marshaller_mruv_entrances_DeleteEntranceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Entrances.DeleteEntranceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Entrances.LockRequest> __Marshaller_mruv_entrances_LockRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Entrances.LockRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Entrances.LockResponse> __Marshaller_mruv_entrances_LockResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Entrances.LockResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Entrances.UnlockRequest> __Marshaller_mruv_entrances_UnlockRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Entrances.UnlockRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Entrances.UnlockResponse> __Marshaller_mruv_entrances_UnlockResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Entrances.UnlockResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Entrances.FindNearestEntranceRequest> __Marshaller_mruv_entrances_FindNearestEntranceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Entrances.FindNearestEntranceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Entrances.FindNearestEntranceResponse> __Marshaller_mruv_entrances_FindNearestEntranceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Entrances.FindNearestEntranceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Entrances.EnterRequest> __Marshaller_mruv_entrances_EnterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Entrances.EnterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Entrances.EnterResponse> __Marshaller_mruv_entrances_EnterResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Entrances.EnterResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Mruv.Entrances.CreateEntranceRequest, global::Mruv.Entrances.CreateEntranceResponse> __Method_CreateEntrance = new grpc::Method<global::Mruv.Entrances.CreateEntranceRequest, global::Mruv.Entrances.CreateEntranceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateEntrance",
        __Marshaller_mruv_entrances_CreateEntranceRequest,
        __Marshaller_mruv_entrances_CreateEntranceResponse);

    static readonly grpc::Method<global::Mruv.Entrances.GetEntranceRequest, global::Mruv.Entrances.GetEntranceResponse> __Method_GetEntrance = new grpc::Method<global::Mruv.Entrances.GetEntranceRequest, global::Mruv.Entrances.GetEntranceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEntrance",
        __Marshaller_mruv_entrances_GetEntranceRequest,
        __Marshaller_mruv_entrances_GetEntranceResponse);

    static readonly grpc::Method<global::Mruv.Entrances.UpdateEntranceRequest, global::Mruv.Entrances.UpdateEntranceResponse> __Method_UpdateEntrance = new grpc::Method<global::Mruv.Entrances.UpdateEntranceRequest, global::Mruv.Entrances.UpdateEntranceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateEntrance",
        __Marshaller_mruv_entrances_UpdateEntranceRequest,
        __Marshaller_mruv_entrances_UpdateEntranceResponse);

    static readonly grpc::Method<global::Mruv.Entrances.DeleteEntranceRequest, global::Mruv.Entrances.DeleteEntranceResponse> __Method_DeleteEntrance = new grpc::Method<global::Mruv.Entrances.DeleteEntranceRequest, global::Mruv.Entrances.DeleteEntranceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteEntrance",
        __Marshaller_mruv_entrances_DeleteEntranceRequest,
        __Marshaller_mruv_entrances_DeleteEntranceResponse);

    static readonly grpc::Method<global::Mruv.Entrances.LockRequest, global::Mruv.Entrances.LockResponse> __Method_Lock = new grpc::Method<global::Mruv.Entrances.LockRequest, global::Mruv.Entrances.LockResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Lock",
        __Marshaller_mruv_entrances_LockRequest,
        __Marshaller_mruv_entrances_LockResponse);

    static readonly grpc::Method<global::Mruv.Entrances.UnlockRequest, global::Mruv.Entrances.UnlockResponse> __Method_Unlock = new grpc::Method<global::Mruv.Entrances.UnlockRequest, global::Mruv.Entrances.UnlockResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Unlock",
        __Marshaller_mruv_entrances_UnlockRequest,
        __Marshaller_mruv_entrances_UnlockResponse);

    static readonly grpc::Method<global::Mruv.Entrances.FindNearestEntranceRequest, global::Mruv.Entrances.FindNearestEntranceResponse> __Method_FindNearestEntrance = new grpc::Method<global::Mruv.Entrances.FindNearestEntranceRequest, global::Mruv.Entrances.FindNearestEntranceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FindNearestEntrance",
        __Marshaller_mruv_entrances_FindNearestEntranceRequest,
        __Marshaller_mruv_entrances_FindNearestEntranceResponse);

    static readonly grpc::Method<global::Mruv.Entrances.EnterRequest, global::Mruv.Entrances.EnterResponse> __Method_Enter = new grpc::Method<global::Mruv.Entrances.EnterRequest, global::Mruv.Entrances.EnterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Enter",
        __Marshaller_mruv_entrances_EnterRequest,
        __Marshaller_mruv_entrances_EnterResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mruv.Entrances.EntrancesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MruVEntrancesService</summary>
    [grpc::BindServiceMethod(typeof(MruVEntrancesService), "BindService")]
    public abstract partial class MruVEntrancesServiceBase
    {
      /// <summary>
      /// Create an entrance to building or teleport to location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Entrances.CreateEntranceResponse> CreateEntrance(global::Mruv.Entrances.CreateEntranceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get an entrance to building or a teleport to location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Entrances.GetEntranceResponse> GetEntrance(global::Mruv.Entrances.GetEntranceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update an entrance to building or a teleport to location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Entrances.UpdateEntranceResponse> UpdateEntrance(global::Mruv.Entrances.UpdateEntranceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete an entrance to building or a teleport to location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Entrances.DeleteEntranceResponse> DeleteEntrance(global::Mruv.Entrances.DeleteEntranceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lock entrance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Entrances.LockResponse> Lock(global::Mruv.Entrances.LockRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Unload entrance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Entrances.UnlockResponse> Unlock(global::Mruv.Entrances.UnlockRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Find gate that is closest to a specific position.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Entrances.FindNearestEntranceResponse> FindNearestEntrance(global::Mruv.Entrances.FindNearestEntranceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Enter an entrance
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Entrances.EnterResponse> Enter(global::Mruv.Entrances.EnterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MruVEntrancesService</summary>
    public partial class MruVEntrancesServiceClient : grpc::ClientBase<MruVEntrancesServiceClient>
    {
      /// <summary>Creates a new client for MruVEntrancesService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MruVEntrancesServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MruVEntrancesService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MruVEntrancesServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MruVEntrancesServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MruVEntrancesServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create an entrance to building or teleport to location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Entrances.CreateEntranceResponse CreateEntrance(global::Mruv.Entrances.CreateEntranceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateEntrance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an entrance to building or teleport to location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Entrances.CreateEntranceResponse CreateEntrance(global::Mruv.Entrances.CreateEntranceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateEntrance, null, options, request);
      }
      /// <summary>
      /// Create an entrance to building or teleport to location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Entrances.CreateEntranceResponse> CreateEntranceAsync(global::Mruv.Entrances.CreateEntranceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateEntranceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an entrance to building or teleport to location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Entrances.CreateEntranceResponse> CreateEntranceAsync(global::Mruv.Entrances.CreateEntranceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateEntrance, null, options, request);
      }
      /// <summary>
      /// Get an entrance to building or a teleport to location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Entrances.GetEntranceResponse GetEntrance(global::Mruv.Entrances.GetEntranceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEntrance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an entrance to building or a teleport to location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Entrances.GetEntranceResponse GetEntrance(global::Mruv.Entrances.GetEntranceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEntrance, null, options, request);
      }
      /// <summary>
      /// Get an entrance to building or a teleport to location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Entrances.GetEntranceResponse> GetEntranceAsync(global::Mruv.Entrances.GetEntranceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEntranceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an entrance to building or a teleport to location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Entrances.GetEntranceResponse> GetEntranceAsync(global::Mruv.Entrances.GetEntranceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEntrance, null, options, request);
      }
      /// <summary>
      /// Update an entrance to building or a teleport to location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Entrances.UpdateEntranceResponse UpdateEntrance(global::Mruv.Entrances.UpdateEntranceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateEntrance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an entrance to building or a teleport to location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Entrances.UpdateEntranceResponse UpdateEntrance(global::Mruv.Entrances.UpdateEntranceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateEntrance, null, options, request);
      }
      /// <summary>
      /// Update an entrance to building or a teleport to location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Entrances.UpdateEntranceResponse> UpdateEntranceAsync(global::Mruv.Entrances.UpdateEntranceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateEntranceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an entrance to building or a teleport to location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Entrances.UpdateEntranceResponse> UpdateEntranceAsync(global::Mruv.Entrances.UpdateEntranceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateEntrance, null, options, request);
      }
      /// <summary>
      /// Delete an entrance to building or a teleport to location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Entrances.DeleteEntranceResponse DeleteEntrance(global::Mruv.Entrances.DeleteEntranceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteEntrance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an entrance to building or a teleport to location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Entrances.DeleteEntranceResponse DeleteEntrance(global::Mruv.Entrances.DeleteEntranceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteEntrance, null, options, request);
      }
      /// <summary>
      /// Delete an entrance to building or a teleport to location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Entrances.DeleteEntranceResponse> DeleteEntranceAsync(global::Mruv.Entrances.DeleteEntranceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteEntranceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an entrance to building or a teleport to location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Entrances.DeleteEntranceResponse> DeleteEntranceAsync(global::Mruv.Entrances.DeleteEntranceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteEntrance, null, options, request);
      }
      /// <summary>
      /// Lock entrance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Entrances.LockResponse Lock(global::Mruv.Entrances.LockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Lock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lock entrance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Entrances.LockResponse Lock(global::Mruv.Entrances.LockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Lock, null, options, request);
      }
      /// <summary>
      /// Lock entrance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Entrances.LockResponse> LockAsync(global::Mruv.Entrances.LockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lock entrance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Entrances.LockResponse> LockAsync(global::Mruv.Entrances.LockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Lock, null, options, request);
      }
      /// <summary>
      /// Unload entrance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Entrances.UnlockResponse Unlock(global::Mruv.Entrances.UnlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Unlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unload entrance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Entrances.UnlockResponse Unlock(global::Mruv.Entrances.UnlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Unlock, null, options, request);
      }
      /// <summary>
      /// Unload entrance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Entrances.UnlockResponse> UnlockAsync(global::Mruv.Entrances.UnlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unload entrance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Entrances.UnlockResponse> UnlockAsync(global::Mruv.Entrances.UnlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Unlock, null, options, request);
      }
      /// <summary>
      /// Find gate that is closest to a specific position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Entrances.FindNearestEntranceResponse FindNearestEntrance(global::Mruv.Entrances.FindNearestEntranceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindNearestEntrance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Find gate that is closest to a specific position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Entrances.FindNearestEntranceResponse FindNearestEntrance(global::Mruv.Entrances.FindNearestEntranceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FindNearestEntrance, null, options, request);
      }
      /// <summary>
      /// Find gate that is closest to a specific position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Entrances.FindNearestEntranceResponse> FindNearestEntranceAsync(global::Mruv.Entrances.FindNearestEntranceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindNearestEntranceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Find gate that is closest to a specific position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Entrances.FindNearestEntranceResponse> FindNearestEntranceAsync(global::Mruv.Entrances.FindNearestEntranceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FindNearestEntrance, null, options, request);
      }
      /// <summary>
      /// Enter an entrance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Entrances.EnterResponse Enter(global::Mruv.Entrances.EnterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Enter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enter an entrance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Entrances.EnterResponse Enter(global::Mruv.Entrances.EnterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Enter, null, options, request);
      }
      /// <summary>
      /// Enter an entrance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Entrances.EnterResponse> EnterAsync(global::Mruv.Entrances.EnterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enter an entrance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Entrances.EnterResponse> EnterAsync(global::Mruv.Entrances.EnterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Enter, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MruVEntrancesServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MruVEntrancesServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MruVEntrancesServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateEntrance, serviceImpl.CreateEntrance)
          .AddMethod(__Method_GetEntrance, serviceImpl.GetEntrance)
          .AddMethod(__Method_UpdateEntrance, serviceImpl.UpdateEntrance)
          .AddMethod(__Method_DeleteEntrance, serviceImpl.DeleteEntrance)
          .AddMethod(__Method_Lock, serviceImpl.Lock)
          .AddMethod(__Method_Unlock, serviceImpl.Unlock)
          .AddMethod(__Method_FindNearestEntrance, serviceImpl.FindNearestEntrance)
          .AddMethod(__Method_Enter, serviceImpl.Enter).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MruVEntrancesServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateEntrance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Entrances.CreateEntranceRequest, global::Mruv.Entrances.CreateEntranceResponse>(serviceImpl.CreateEntrance));
      serviceBinder.AddMethod(__Method_GetEntrance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Entrances.GetEntranceRequest, global::Mruv.Entrances.GetEntranceResponse>(serviceImpl.GetEntrance));
      serviceBinder.AddMethod(__Method_UpdateEntrance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Entrances.UpdateEntranceRequest, global::Mruv.Entrances.UpdateEntranceResponse>(serviceImpl.UpdateEntrance));
      serviceBinder.AddMethod(__Method_DeleteEntrance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Entrances.DeleteEntranceRequest, global::Mruv.Entrances.DeleteEntranceResponse>(serviceImpl.DeleteEntrance));
      serviceBinder.AddMethod(__Method_Lock, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Entrances.LockRequest, global::Mruv.Entrances.LockResponse>(serviceImpl.Lock));
      serviceBinder.AddMethod(__Method_Unlock, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Entrances.UnlockRequest, global::Mruv.Entrances.UnlockResponse>(serviceImpl.Unlock));
      serviceBinder.AddMethod(__Method_FindNearestEntrance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Entrances.FindNearestEntranceRequest, global::Mruv.Entrances.FindNearestEntranceResponse>(serviceImpl.FindNearestEntrance));
      serviceBinder.AddMethod(__Method_Enter, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Entrances.EnterRequest, global::Mruv.Entrances.EnterResponse>(serviceImpl.Enter));
    }

  }
}
#endregion
