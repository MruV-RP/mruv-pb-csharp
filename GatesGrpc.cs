// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gates/gates.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mruv.Gates {
  /// <summary>
  /// The MruV gates service provides procedures for managing gates and moving objects groups.
  /// </summary>
  public static partial class MruVGatesService
  {
    static readonly string __ServiceName = "mruv.gates.MruVGatesService";

    static readonly grpc::Marshaller<global::Mruv.Gates.CreateGateRequest> __Marshaller_mruv_gates_CreateGateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Gates.CreateGateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Gates.CreateGateResponse> __Marshaller_mruv_gates_CreateGateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Gates.CreateGateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Gates.GetGateRequest> __Marshaller_mruv_gates_GetGateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Gates.GetGateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Gates.GetGateResponse> __Marshaller_mruv_gates_GetGateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Gates.GetGateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Gates.UpdateGateRequest> __Marshaller_mruv_gates_UpdateGateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Gates.UpdateGateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Gates.UpdateGateResponse> __Marshaller_mruv_gates_UpdateGateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Gates.UpdateGateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Gates.DeleteGateRequest> __Marshaller_mruv_gates_DeleteGateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Gates.DeleteGateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Gates.DeleteGateResponse> __Marshaller_mruv_gates_DeleteGateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Gates.DeleteGateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Gates.LockRequest> __Marshaller_mruv_gates_LockRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Gates.LockRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Gates.LockResponse> __Marshaller_mruv_gates_LockResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Gates.LockResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Gates.UnlockRequest> __Marshaller_mruv_gates_UnlockRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Gates.UnlockRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Gates.UnlockResponse> __Marshaller_mruv_gates_UnlockResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Gates.UnlockResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Gates.OpenRequest> __Marshaller_mruv_gates_OpenRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Gates.OpenRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Gates.OpenResponse> __Marshaller_mruv_gates_OpenResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Gates.OpenResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Gates.CloseRequest> __Marshaller_mruv_gates_CloseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Gates.CloseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Gates.CloseResponse> __Marshaller_mruv_gates_CloseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Gates.CloseResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Gates.FindNearestGateRequest> __Marshaller_mruv_gates_FindNearestGateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Gates.FindNearestGateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Gates.FindNearestGateResponse> __Marshaller_mruv_gates_FindNearestGateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Gates.FindNearestGateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Gates.FetchAllGatesRequest> __Marshaller_mruv_gates_FetchAllGatesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Gates.FetchAllGatesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Gates.FetchAllGatesResponse> __Marshaller_mruv_gates_FetchAllGatesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Gates.FetchAllGatesResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Mruv.Gates.CreateGateRequest, global::Mruv.Gates.CreateGateResponse> __Method_CreateGate = new grpc::Method<global::Mruv.Gates.CreateGateRequest, global::Mruv.Gates.CreateGateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateGate",
        __Marshaller_mruv_gates_CreateGateRequest,
        __Marshaller_mruv_gates_CreateGateResponse);

    static readonly grpc::Method<global::Mruv.Gates.GetGateRequest, global::Mruv.Gates.GetGateResponse> __Method_GetGate = new grpc::Method<global::Mruv.Gates.GetGateRequest, global::Mruv.Gates.GetGateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGate",
        __Marshaller_mruv_gates_GetGateRequest,
        __Marshaller_mruv_gates_GetGateResponse);

    static readonly grpc::Method<global::Mruv.Gates.UpdateGateRequest, global::Mruv.Gates.UpdateGateResponse> __Method_UpdateGate = new grpc::Method<global::Mruv.Gates.UpdateGateRequest, global::Mruv.Gates.UpdateGateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateGate",
        __Marshaller_mruv_gates_UpdateGateRequest,
        __Marshaller_mruv_gates_UpdateGateResponse);

    static readonly grpc::Method<global::Mruv.Gates.DeleteGateRequest, global::Mruv.Gates.DeleteGateResponse> __Method_DeleteGate = new grpc::Method<global::Mruv.Gates.DeleteGateRequest, global::Mruv.Gates.DeleteGateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteGate",
        __Marshaller_mruv_gates_DeleteGateRequest,
        __Marshaller_mruv_gates_DeleteGateResponse);

    static readonly grpc::Method<global::Mruv.Gates.LockRequest, global::Mruv.Gates.LockResponse> __Method_Lock = new grpc::Method<global::Mruv.Gates.LockRequest, global::Mruv.Gates.LockResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Lock",
        __Marshaller_mruv_gates_LockRequest,
        __Marshaller_mruv_gates_LockResponse);

    static readonly grpc::Method<global::Mruv.Gates.UnlockRequest, global::Mruv.Gates.UnlockResponse> __Method_Unlock = new grpc::Method<global::Mruv.Gates.UnlockRequest, global::Mruv.Gates.UnlockResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Unlock",
        __Marshaller_mruv_gates_UnlockRequest,
        __Marshaller_mruv_gates_UnlockResponse);

    static readonly grpc::Method<global::Mruv.Gates.OpenRequest, global::Mruv.Gates.OpenResponse> __Method_Open = new grpc::Method<global::Mruv.Gates.OpenRequest, global::Mruv.Gates.OpenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Open",
        __Marshaller_mruv_gates_OpenRequest,
        __Marshaller_mruv_gates_OpenResponse);

    static readonly grpc::Method<global::Mruv.Gates.CloseRequest, global::Mruv.Gates.CloseResponse> __Method_Close = new grpc::Method<global::Mruv.Gates.CloseRequest, global::Mruv.Gates.CloseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Close",
        __Marshaller_mruv_gates_CloseRequest,
        __Marshaller_mruv_gates_CloseResponse);

    static readonly grpc::Method<global::Mruv.Gates.FindNearestGateRequest, global::Mruv.Gates.FindNearestGateResponse> __Method_FindNearestGate = new grpc::Method<global::Mruv.Gates.FindNearestGateRequest, global::Mruv.Gates.FindNearestGateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FindNearestGate",
        __Marshaller_mruv_gates_FindNearestGateRequest,
        __Marshaller_mruv_gates_FindNearestGateResponse);

    static readonly grpc::Method<global::Mruv.Gates.FetchAllGatesRequest, global::Mruv.Gates.FetchAllGatesResponse> __Method_FetchAll = new grpc::Method<global::Mruv.Gates.FetchAllGatesRequest, global::Mruv.Gates.FetchAllGatesResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "FetchAll",
        __Marshaller_mruv_gates_FetchAllGatesRequest,
        __Marshaller_mruv_gates_FetchAllGatesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mruv.Gates.GatesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MruVGatesService</summary>
    [grpc::BindServiceMethod(typeof(MruVGatesService), "BindService")]
    public abstract partial class MruVGatesServiceBase
    {
      /// <summary>
      /// Create a gate or a moving objects objects group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Gates.CreateGateResponse> CreateGate(global::Mruv.Gates.CreateGateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a gate or a moving objects objects group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Gates.GetGateResponse> GetGate(global::Mruv.Gates.GetGateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a gate or a moving objects objects group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Gates.UpdateGateResponse> UpdateGate(global::Mruv.Gates.UpdateGateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a gate or a moving objects objects group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Gates.DeleteGateResponse> DeleteGate(global::Mruv.Gates.DeleteGateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lock a gate. Locked gate cannot be opened.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Gates.LockResponse> Lock(global::Mruv.Gates.LockRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Unload a gate, so it can be open.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Gates.UnlockResponse> Unlock(global::Mruv.Gates.UnlockRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Opens a gate.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Gates.OpenResponse> Open(global::Mruv.Gates.OpenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Close a gate.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Gates.CloseResponse> Close(global::Mruv.Gates.CloseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Find gate that is closest to a specific position.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Gates.FindNearestGateResponse> FindNearestGate(global::Mruv.Gates.FindNearestGateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task FetchAll(global::Mruv.Gates.FetchAllGatesRequest request, grpc::IServerStreamWriter<global::Mruv.Gates.FetchAllGatesResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MruVGatesService</summary>
    public partial class MruVGatesServiceClient : grpc::ClientBase<MruVGatesServiceClient>
    {
      /// <summary>Creates a new client for MruVGatesService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MruVGatesServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MruVGatesService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MruVGatesServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MruVGatesServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MruVGatesServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a gate or a moving objects objects group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Gates.CreateGateResponse CreateGate(global::Mruv.Gates.CreateGateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a gate or a moving objects objects group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Gates.CreateGateResponse CreateGate(global::Mruv.Gates.CreateGateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateGate, null, options, request);
      }
      /// <summary>
      /// Create a gate or a moving objects objects group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Gates.CreateGateResponse> CreateGateAsync(global::Mruv.Gates.CreateGateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a gate or a moving objects objects group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Gates.CreateGateResponse> CreateGateAsync(global::Mruv.Gates.CreateGateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateGate, null, options, request);
      }
      /// <summary>
      /// Get a gate or a moving objects objects group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Gates.GetGateResponse GetGate(global::Mruv.Gates.GetGateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a gate or a moving objects objects group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Gates.GetGateResponse GetGate(global::Mruv.Gates.GetGateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGate, null, options, request);
      }
      /// <summary>
      /// Get a gate or a moving objects objects group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Gates.GetGateResponse> GetGateAsync(global::Mruv.Gates.GetGateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a gate or a moving objects objects group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Gates.GetGateResponse> GetGateAsync(global::Mruv.Gates.GetGateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGate, null, options, request);
      }
      /// <summary>
      /// Update a gate or a moving objects objects group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Gates.UpdateGateResponse UpdateGate(global::Mruv.Gates.UpdateGateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a gate or a moving objects objects group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Gates.UpdateGateResponse UpdateGate(global::Mruv.Gates.UpdateGateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateGate, null, options, request);
      }
      /// <summary>
      /// Update a gate or a moving objects objects group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Gates.UpdateGateResponse> UpdateGateAsync(global::Mruv.Gates.UpdateGateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a gate or a moving objects objects group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Gates.UpdateGateResponse> UpdateGateAsync(global::Mruv.Gates.UpdateGateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateGate, null, options, request);
      }
      /// <summary>
      /// Delete a gate or a moving objects objects group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Gates.DeleteGateResponse DeleteGate(global::Mruv.Gates.DeleteGateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a gate or a moving objects objects group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Gates.DeleteGateResponse DeleteGate(global::Mruv.Gates.DeleteGateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteGate, null, options, request);
      }
      /// <summary>
      /// Delete a gate or a moving objects objects group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Gates.DeleteGateResponse> DeleteGateAsync(global::Mruv.Gates.DeleteGateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a gate or a moving objects objects group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Gates.DeleteGateResponse> DeleteGateAsync(global::Mruv.Gates.DeleteGateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteGate, null, options, request);
      }
      /// <summary>
      /// Lock a gate. Locked gate cannot be opened.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Gates.LockResponse Lock(global::Mruv.Gates.LockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Lock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lock a gate. Locked gate cannot be opened.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Gates.LockResponse Lock(global::Mruv.Gates.LockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Lock, null, options, request);
      }
      /// <summary>
      /// Lock a gate. Locked gate cannot be opened.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Gates.LockResponse> LockAsync(global::Mruv.Gates.LockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lock a gate. Locked gate cannot be opened.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Gates.LockResponse> LockAsync(global::Mruv.Gates.LockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Lock, null, options, request);
      }
      /// <summary>
      /// Unload a gate, so it can be open.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Gates.UnlockResponse Unlock(global::Mruv.Gates.UnlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Unlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unload a gate, so it can be open.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Gates.UnlockResponse Unlock(global::Mruv.Gates.UnlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Unlock, null, options, request);
      }
      /// <summary>
      /// Unload a gate, so it can be open.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Gates.UnlockResponse> UnlockAsync(global::Mruv.Gates.UnlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unload a gate, so it can be open.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Gates.UnlockResponse> UnlockAsync(global::Mruv.Gates.UnlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Unlock, null, options, request);
      }
      /// <summary>
      /// Opens a gate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Gates.OpenResponse Open(global::Mruv.Gates.OpenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Open(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Opens a gate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Gates.OpenResponse Open(global::Mruv.Gates.OpenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Open, null, options, request);
      }
      /// <summary>
      /// Opens a gate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Gates.OpenResponse> OpenAsync(global::Mruv.Gates.OpenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OpenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Opens a gate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Gates.OpenResponse> OpenAsync(global::Mruv.Gates.OpenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Open, null, options, request);
      }
      /// <summary>
      /// Close a gate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Gates.CloseResponse Close(global::Mruv.Gates.CloseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Close(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Close a gate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Gates.CloseResponse Close(global::Mruv.Gates.CloseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Close, null, options, request);
      }
      /// <summary>
      /// Close a gate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Gates.CloseResponse> CloseAsync(global::Mruv.Gates.CloseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CloseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Close a gate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Gates.CloseResponse> CloseAsync(global::Mruv.Gates.CloseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Close, null, options, request);
      }
      /// <summary>
      /// Find gate that is closest to a specific position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Gates.FindNearestGateResponse FindNearestGate(global::Mruv.Gates.FindNearestGateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindNearestGate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Find gate that is closest to a specific position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Gates.FindNearestGateResponse FindNearestGate(global::Mruv.Gates.FindNearestGateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FindNearestGate, null, options, request);
      }
      /// <summary>
      /// Find gate that is closest to a specific position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Gates.FindNearestGateResponse> FindNearestGateAsync(global::Mruv.Gates.FindNearestGateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindNearestGateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Find gate that is closest to a specific position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Gates.FindNearestGateResponse> FindNearestGateAsync(global::Mruv.Gates.FindNearestGateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FindNearestGate, null, options, request);
      }
      /// <summary>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Gates.FetchAllGatesResponse> FetchAll(global::Mruv.Gates.FetchAllGatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchAll(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Gates.FetchAllGatesResponse> FetchAll(global::Mruv.Gates.FetchAllGatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_FetchAll, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MruVGatesServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MruVGatesServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MruVGatesServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateGate, serviceImpl.CreateGate)
          .AddMethod(__Method_GetGate, serviceImpl.GetGate)
          .AddMethod(__Method_UpdateGate, serviceImpl.UpdateGate)
          .AddMethod(__Method_DeleteGate, serviceImpl.DeleteGate)
          .AddMethod(__Method_Lock, serviceImpl.Lock)
          .AddMethod(__Method_Unlock, serviceImpl.Unlock)
          .AddMethod(__Method_Open, serviceImpl.Open)
          .AddMethod(__Method_Close, serviceImpl.Close)
          .AddMethod(__Method_FindNearestGate, serviceImpl.FindNearestGate)
          .AddMethod(__Method_FetchAll, serviceImpl.FetchAll).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MruVGatesServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateGate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Gates.CreateGateRequest, global::Mruv.Gates.CreateGateResponse>(serviceImpl.CreateGate));
      serviceBinder.AddMethod(__Method_GetGate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Gates.GetGateRequest, global::Mruv.Gates.GetGateResponse>(serviceImpl.GetGate));
      serviceBinder.AddMethod(__Method_UpdateGate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Gates.UpdateGateRequest, global::Mruv.Gates.UpdateGateResponse>(serviceImpl.UpdateGate));
      serviceBinder.AddMethod(__Method_DeleteGate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Gates.DeleteGateRequest, global::Mruv.Gates.DeleteGateResponse>(serviceImpl.DeleteGate));
      serviceBinder.AddMethod(__Method_Lock, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Gates.LockRequest, global::Mruv.Gates.LockResponse>(serviceImpl.Lock));
      serviceBinder.AddMethod(__Method_Unlock, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Gates.UnlockRequest, global::Mruv.Gates.UnlockResponse>(serviceImpl.Unlock));
      serviceBinder.AddMethod(__Method_Open, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Gates.OpenRequest, global::Mruv.Gates.OpenResponse>(serviceImpl.Open));
      serviceBinder.AddMethod(__Method_Close, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Gates.CloseRequest, global::Mruv.Gates.CloseResponse>(serviceImpl.Close));
      serviceBinder.AddMethod(__Method_FindNearestGate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Gates.FindNearestGateRequest, global::Mruv.Gates.FindNearestGateResponse>(serviceImpl.FindNearestGate));
      serviceBinder.AddMethod(__Method_FetchAll, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mruv.Gates.FetchAllGatesRequest, global::Mruv.Gates.FetchAllGatesResponse>(serviceImpl.FetchAll));
    }

  }
}
#endregion
