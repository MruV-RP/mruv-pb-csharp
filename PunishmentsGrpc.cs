// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: punishments/punishments.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mruv.Economy {
  /// <summary>
  /// This service provides interface for managing punishments for players.
  /// </summary>
  public static partial class MruVPunishmentsService
  {
    static readonly string __ServiceName = "mruv.economy.MruVPunishmentsService";

    static readonly grpc::Marshaller<global::Mruv.Economy.BanRequest> __Marshaller_mruv_economy_BanRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.BanRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.BanResponse> __Marshaller_mruv_economy_BanResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.BanResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.BlockRequest> __Marshaller_mruv_economy_BlockRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.BlockRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.BlockResponse> __Marshaller_mruv_economy_BlockResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.BlockResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.WarnRequest> __Marshaller_mruv_economy_WarnRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.WarnRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.WarnResponse> __Marshaller_mruv_economy_WarnResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.WarnResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.AdminJailRequest> __Marshaller_mruv_economy_AdminJailRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.AdminJailRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.AdminJailResponse> __Marshaller_mruv_economy_AdminJailResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.AdminJailResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.MuteGlobalChatsRequest> __Marshaller_mruv_economy_MuteGlobalChatsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.MuteGlobalChatsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.MuteGlobalChatsResponse> __Marshaller_mruv_economy_MuteGlobalChatsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.MuteGlobalChatsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.UnBanRequest> __Marshaller_mruv_economy_UnBanRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.UnBanRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.UnBanResponse> __Marshaller_mruv_economy_UnBanResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.UnBanResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.UnBlockRequest> __Marshaller_mruv_economy_UnBlockRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.UnBlockRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.UnBlockResponse> __Marshaller_mruv_economy_UnBlockResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.UnBlockResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.UnWarnRequest> __Marshaller_mruv_economy_UnWarnRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.UnWarnRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.UnWarnResponse> __Marshaller_mruv_economy_UnWarnResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.UnWarnResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.UnAdminJailRequest> __Marshaller_mruv_economy_UnAdminJailRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.UnAdminJailRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.UnAdminJailResponse> __Marshaller_mruv_economy_UnAdminJailResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.UnAdminJailResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.UnMuteGlobalChatsRequest> __Marshaller_mruv_economy_UnMuteGlobalChatsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.UnMuteGlobalChatsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.UnMuteGlobalChatsResponse> __Marshaller_mruv_economy_UnMuteGlobalChatsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.UnMuteGlobalChatsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.GetPlayerBansRequest> __Marshaller_mruv_economy_GetPlayerBansRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.GetPlayerBansRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.GetPlayerBansResponse> __Marshaller_mruv_economy_GetPlayerBansResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.GetPlayerBansResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.GetPlayerWarnsRequest> __Marshaller_mruv_economy_GetPlayerWarnsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.GetPlayerWarnsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.GetPlayerWarnsResponse> __Marshaller_mruv_economy_GetPlayerWarnsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.GetPlayerWarnsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.GetPlayerAdminJailRequest> __Marshaller_mruv_economy_GetPlayerAdminJailRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.GetPlayerAdminJailRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.GetPlayerAdminJailResponse> __Marshaller_mruv_economy_GetPlayerAdminJailResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.GetPlayerAdminJailResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.GetBanRequest> __Marshaller_mruv_economy_GetBanRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.GetBanRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.BanMessage> __Marshaller_mruv_economy_BanMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.BanMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.GetWarnRequest> __Marshaller_mruv_economy_GetWarnRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.GetWarnRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.WarnMessage> __Marshaller_mruv_economy_WarnMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.WarnMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.GetBlockRequest> __Marshaller_mruv_economy_GetBlockRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.GetBlockRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.BlockMessage> __Marshaller_mruv_economy_BlockMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.BlockMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.IsPlayerBannedRequest> __Marshaller_mruv_economy_IsPlayerBannedRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.IsPlayerBannedRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.IsPlayerBannedResponse> __Marshaller_mruv_economy_IsPlayerBannedResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.IsPlayerBannedResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.IsCharacterBlockedRequest> __Marshaller_mruv_economy_IsCharacterBlockedRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.IsCharacterBlockedRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.IsCharacterBlockedResponse> __Marshaller_mruv_economy_IsCharacterBlockedResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.IsCharacterBlockedResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.IsCharacterJailedRequest> __Marshaller_mruv_economy_IsCharacterJailedRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.IsCharacterJailedRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.IsCharacterJailedResponse> __Marshaller_mruv_economy_IsCharacterJailedResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.IsCharacterJailedResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.WatchBansRequest> __Marshaller_mruv_economy_WatchBansRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.WatchBansRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.WatchBlocksRequest> __Marshaller_mruv_economy_WatchBlocksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.WatchBlocksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.WatchWarnsRequest> __Marshaller_mruv_economy_WatchWarnsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.WatchWarnsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.WatchAdminJailsRequest> __Marshaller_mruv_economy_WatchAdminJailsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.WatchAdminJailsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.AdminJailMessage> __Marshaller_mruv_economy_AdminJailMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.AdminJailMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.WatchUnBansRequest> __Marshaller_mruv_economy_WatchUnBansRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.WatchUnBansRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.UnBanMessage> __Marshaller_mruv_economy_UnBanMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.UnBanMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.WatchUnBlocksRequest> __Marshaller_mruv_economy_WatchUnBlocksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.WatchUnBlocksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.UnBlockMessage> __Marshaller_mruv_economy_UnBlockMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.UnBlockMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.WatchUnWarnsRequest> __Marshaller_mruv_economy_WatchUnWarnsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.WatchUnWarnsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.UnWarnMessage> __Marshaller_mruv_economy_UnWarnMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.UnWarnMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.WatchUnAdminJailsRequest> __Marshaller_mruv_economy_WatchUnAdminJailsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.WatchUnAdminJailsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.UnAdminJailMessage> __Marshaller_mruv_economy_UnAdminJailMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.UnAdminJailMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.WatchPlayerPunishmentsRequest> __Marshaller_mruv_economy_WatchPlayerPunishmentsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.WatchPlayerPunishmentsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.WatchPlayerPunishmentsResponse> __Marshaller_mruv_economy_WatchPlayerPunishmentsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.WatchPlayerPunishmentsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.WatchPlayerAcquittalsRequest> __Marshaller_mruv_economy_WatchPlayerAcquittalsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.WatchPlayerAcquittalsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.WatchPlayerAcquittalsResponse> __Marshaller_mruv_economy_WatchPlayerAcquittalsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.WatchPlayerAcquittalsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.WatchPunishmentsRequest> __Marshaller_mruv_economy_WatchPunishmentsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.WatchPunishmentsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Economy.WatchPunishmentsResponse> __Marshaller_mruv_economy_WatchPunishmentsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Economy.WatchPunishmentsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Mruv.Economy.BanRequest, global::Mruv.Economy.BanResponse> __Method_Ban = new grpc::Method<global::Mruv.Economy.BanRequest, global::Mruv.Economy.BanResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ban",
        __Marshaller_mruv_economy_BanRequest,
        __Marshaller_mruv_economy_BanResponse);

    static readonly grpc::Method<global::Mruv.Economy.BlockRequest, global::Mruv.Economy.BlockResponse> __Method_Block = new grpc::Method<global::Mruv.Economy.BlockRequest, global::Mruv.Economy.BlockResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Block",
        __Marshaller_mruv_economy_BlockRequest,
        __Marshaller_mruv_economy_BlockResponse);

    static readonly grpc::Method<global::Mruv.Economy.WarnRequest, global::Mruv.Economy.WarnResponse> __Method_Warn = new grpc::Method<global::Mruv.Economy.WarnRequest, global::Mruv.Economy.WarnResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Warn",
        __Marshaller_mruv_economy_WarnRequest,
        __Marshaller_mruv_economy_WarnResponse);

    static readonly grpc::Method<global::Mruv.Economy.AdminJailRequest, global::Mruv.Economy.AdminJailResponse> __Method_AdminJail = new grpc::Method<global::Mruv.Economy.AdminJailRequest, global::Mruv.Economy.AdminJailResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AdminJail",
        __Marshaller_mruv_economy_AdminJailRequest,
        __Marshaller_mruv_economy_AdminJailResponse);

    static readonly grpc::Method<global::Mruv.Economy.MuteGlobalChatsRequest, global::Mruv.Economy.MuteGlobalChatsResponse> __Method_MuteGlobalChats = new grpc::Method<global::Mruv.Economy.MuteGlobalChatsRequest, global::Mruv.Economy.MuteGlobalChatsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MuteGlobalChats",
        __Marshaller_mruv_economy_MuteGlobalChatsRequest,
        __Marshaller_mruv_economy_MuteGlobalChatsResponse);

    static readonly grpc::Method<global::Mruv.Economy.UnBanRequest, global::Mruv.Economy.UnBanResponse> __Method_UnBan = new grpc::Method<global::Mruv.Economy.UnBanRequest, global::Mruv.Economy.UnBanResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnBan",
        __Marshaller_mruv_economy_UnBanRequest,
        __Marshaller_mruv_economy_UnBanResponse);

    static readonly grpc::Method<global::Mruv.Economy.UnBlockRequest, global::Mruv.Economy.UnBlockResponse> __Method_UnBlock = new grpc::Method<global::Mruv.Economy.UnBlockRequest, global::Mruv.Economy.UnBlockResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnBlock",
        __Marshaller_mruv_economy_UnBlockRequest,
        __Marshaller_mruv_economy_UnBlockResponse);

    static readonly grpc::Method<global::Mruv.Economy.UnWarnRequest, global::Mruv.Economy.UnWarnResponse> __Method_UnWarn = new grpc::Method<global::Mruv.Economy.UnWarnRequest, global::Mruv.Economy.UnWarnResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnWarn",
        __Marshaller_mruv_economy_UnWarnRequest,
        __Marshaller_mruv_economy_UnWarnResponse);

    static readonly grpc::Method<global::Mruv.Economy.UnAdminJailRequest, global::Mruv.Economy.UnAdminJailResponse> __Method_UnAdminJail = new grpc::Method<global::Mruv.Economy.UnAdminJailRequest, global::Mruv.Economy.UnAdminJailResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnAdminJail",
        __Marshaller_mruv_economy_UnAdminJailRequest,
        __Marshaller_mruv_economy_UnAdminJailResponse);

    static readonly grpc::Method<global::Mruv.Economy.UnMuteGlobalChatsRequest, global::Mruv.Economy.UnMuteGlobalChatsResponse> __Method_UnMuteGlobalChats = new grpc::Method<global::Mruv.Economy.UnMuteGlobalChatsRequest, global::Mruv.Economy.UnMuteGlobalChatsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnMuteGlobalChats",
        __Marshaller_mruv_economy_UnMuteGlobalChatsRequest,
        __Marshaller_mruv_economy_UnMuteGlobalChatsResponse);

    static readonly grpc::Method<global::Mruv.Economy.GetPlayerBansRequest, global::Mruv.Economy.GetPlayerBansResponse> __Method_GetPlayerBans = new grpc::Method<global::Mruv.Economy.GetPlayerBansRequest, global::Mruv.Economy.GetPlayerBansResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPlayerBans",
        __Marshaller_mruv_economy_GetPlayerBansRequest,
        __Marshaller_mruv_economy_GetPlayerBansResponse);

    static readonly grpc::Method<global::Mruv.Economy.GetPlayerWarnsRequest, global::Mruv.Economy.GetPlayerWarnsResponse> __Method_GetPlayerWarns = new grpc::Method<global::Mruv.Economy.GetPlayerWarnsRequest, global::Mruv.Economy.GetPlayerWarnsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPlayerWarns",
        __Marshaller_mruv_economy_GetPlayerWarnsRequest,
        __Marshaller_mruv_economy_GetPlayerWarnsResponse);

    static readonly grpc::Method<global::Mruv.Economy.GetPlayerAdminJailRequest, global::Mruv.Economy.GetPlayerAdminJailResponse> __Method_GetPlayerAdminJail = new grpc::Method<global::Mruv.Economy.GetPlayerAdminJailRequest, global::Mruv.Economy.GetPlayerAdminJailResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPlayerAdminJail",
        __Marshaller_mruv_economy_GetPlayerAdminJailRequest,
        __Marshaller_mruv_economy_GetPlayerAdminJailResponse);

    static readonly grpc::Method<global::Mruv.Economy.GetBanRequest, global::Mruv.Economy.BanMessage> __Method_GetBan = new grpc::Method<global::Mruv.Economy.GetBanRequest, global::Mruv.Economy.BanMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBan",
        __Marshaller_mruv_economy_GetBanRequest,
        __Marshaller_mruv_economy_BanMessage);

    static readonly grpc::Method<global::Mruv.Economy.GetWarnRequest, global::Mruv.Economy.WarnMessage> __Method_GetWarn = new grpc::Method<global::Mruv.Economy.GetWarnRequest, global::Mruv.Economy.WarnMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWarn",
        __Marshaller_mruv_economy_GetWarnRequest,
        __Marshaller_mruv_economy_WarnMessage);

    static readonly grpc::Method<global::Mruv.Economy.GetBlockRequest, global::Mruv.Economy.BlockMessage> __Method_GetBlock = new grpc::Method<global::Mruv.Economy.GetBlockRequest, global::Mruv.Economy.BlockMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlock",
        __Marshaller_mruv_economy_GetBlockRequest,
        __Marshaller_mruv_economy_BlockMessage);

    static readonly grpc::Method<global::Mruv.Economy.IsPlayerBannedRequest, global::Mruv.Economy.IsPlayerBannedResponse> __Method_IsPlayerBanned = new grpc::Method<global::Mruv.Economy.IsPlayerBannedRequest, global::Mruv.Economy.IsPlayerBannedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsPlayerBanned",
        __Marshaller_mruv_economy_IsPlayerBannedRequest,
        __Marshaller_mruv_economy_IsPlayerBannedResponse);

    static readonly grpc::Method<global::Mruv.Economy.IsCharacterBlockedRequest, global::Mruv.Economy.IsCharacterBlockedResponse> __Method_IsCharacterBlocked = new grpc::Method<global::Mruv.Economy.IsCharacterBlockedRequest, global::Mruv.Economy.IsCharacterBlockedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsCharacterBlocked",
        __Marshaller_mruv_economy_IsCharacterBlockedRequest,
        __Marshaller_mruv_economy_IsCharacterBlockedResponse);

    static readonly grpc::Method<global::Mruv.Economy.IsCharacterJailedRequest, global::Mruv.Economy.IsCharacterJailedResponse> __Method_IsCharacterJailed = new grpc::Method<global::Mruv.Economy.IsCharacterJailedRequest, global::Mruv.Economy.IsCharacterJailedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsCharacterJailed",
        __Marshaller_mruv_economy_IsCharacterJailedRequest,
        __Marshaller_mruv_economy_IsCharacterJailedResponse);

    static readonly grpc::Method<global::Mruv.Economy.WatchBansRequest, global::Mruv.Economy.BanMessage> __Method_WatchBans = new grpc::Method<global::Mruv.Economy.WatchBansRequest, global::Mruv.Economy.BanMessage>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "WatchBans",
        __Marshaller_mruv_economy_WatchBansRequest,
        __Marshaller_mruv_economy_BanMessage);

    static readonly grpc::Method<global::Mruv.Economy.WatchBlocksRequest, global::Mruv.Economy.BlockMessage> __Method_WatchBlocks = new grpc::Method<global::Mruv.Economy.WatchBlocksRequest, global::Mruv.Economy.BlockMessage>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "WatchBlocks",
        __Marshaller_mruv_economy_WatchBlocksRequest,
        __Marshaller_mruv_economy_BlockMessage);

    static readonly grpc::Method<global::Mruv.Economy.WatchWarnsRequest, global::Mruv.Economy.WarnMessage> __Method_WatchWarns = new grpc::Method<global::Mruv.Economy.WatchWarnsRequest, global::Mruv.Economy.WarnMessage>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "WatchWarns",
        __Marshaller_mruv_economy_WatchWarnsRequest,
        __Marshaller_mruv_economy_WarnMessage);

    static readonly grpc::Method<global::Mruv.Economy.WatchAdminJailsRequest, global::Mruv.Economy.AdminJailMessage> __Method_WatchAdminJails = new grpc::Method<global::Mruv.Economy.WatchAdminJailsRequest, global::Mruv.Economy.AdminJailMessage>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "WatchAdminJails",
        __Marshaller_mruv_economy_WatchAdminJailsRequest,
        __Marshaller_mruv_economy_AdminJailMessage);

    static readonly grpc::Method<global::Mruv.Economy.WatchUnBansRequest, global::Mruv.Economy.UnBanMessage> __Method_WatchUnBans = new grpc::Method<global::Mruv.Economy.WatchUnBansRequest, global::Mruv.Economy.UnBanMessage>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "WatchUnBans",
        __Marshaller_mruv_economy_WatchUnBansRequest,
        __Marshaller_mruv_economy_UnBanMessage);

    static readonly grpc::Method<global::Mruv.Economy.WatchUnBlocksRequest, global::Mruv.Economy.UnBlockMessage> __Method_WatchUnBlocks = new grpc::Method<global::Mruv.Economy.WatchUnBlocksRequest, global::Mruv.Economy.UnBlockMessage>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "WatchUnBlocks",
        __Marshaller_mruv_economy_WatchUnBlocksRequest,
        __Marshaller_mruv_economy_UnBlockMessage);

    static readonly grpc::Method<global::Mruv.Economy.WatchUnWarnsRequest, global::Mruv.Economy.UnWarnMessage> __Method_WatchUnWarns = new grpc::Method<global::Mruv.Economy.WatchUnWarnsRequest, global::Mruv.Economy.UnWarnMessage>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "WatchUnWarns",
        __Marshaller_mruv_economy_WatchUnWarnsRequest,
        __Marshaller_mruv_economy_UnWarnMessage);

    static readonly grpc::Method<global::Mruv.Economy.WatchUnAdminJailsRequest, global::Mruv.Economy.UnAdminJailMessage> __Method_WatchUnAdminJails = new grpc::Method<global::Mruv.Economy.WatchUnAdminJailsRequest, global::Mruv.Economy.UnAdminJailMessage>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "WatchUnAdminJails",
        __Marshaller_mruv_economy_WatchUnAdminJailsRequest,
        __Marshaller_mruv_economy_UnAdminJailMessage);

    static readonly grpc::Method<global::Mruv.Economy.WatchPlayerPunishmentsRequest, global::Mruv.Economy.WatchPlayerPunishmentsResponse> __Method_WatchPlayerPunishments = new grpc::Method<global::Mruv.Economy.WatchPlayerPunishmentsRequest, global::Mruv.Economy.WatchPlayerPunishmentsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "WatchPlayerPunishments",
        __Marshaller_mruv_economy_WatchPlayerPunishmentsRequest,
        __Marshaller_mruv_economy_WatchPlayerPunishmentsResponse);

    static readonly grpc::Method<global::Mruv.Economy.WatchPlayerAcquittalsRequest, global::Mruv.Economy.WatchPlayerAcquittalsResponse> __Method_WatchPlayerAcquittals = new grpc::Method<global::Mruv.Economy.WatchPlayerAcquittalsRequest, global::Mruv.Economy.WatchPlayerAcquittalsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "WatchPlayerAcquittals",
        __Marshaller_mruv_economy_WatchPlayerAcquittalsRequest,
        __Marshaller_mruv_economy_WatchPlayerAcquittalsResponse);

    static readonly grpc::Method<global::Mruv.Economy.WatchPunishmentsRequest, global::Mruv.Economy.WatchPunishmentsResponse> __Method_WatchPunishments = new grpc::Method<global::Mruv.Economy.WatchPunishmentsRequest, global::Mruv.Economy.WatchPunishmentsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "WatchPunishments",
        __Marshaller_mruv_economy_WatchPunishmentsRequest,
        __Marshaller_mruv_economy_WatchPunishmentsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MruVPunishmentsService</summary>
    [grpc::BindServiceMethod(typeof(MruVPunishmentsService), "BindService")]
    public abstract partial class MruVPunishmentsServiceBase
    {
      /// <summary>
      /// Ban player on account and/or ip.
      /// If ban_time is 0, ban will never expire.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.BanResponse> Ban(global::Mruv.Economy.BanRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Block player character.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.BlockResponse> Block(global::Mruv.Economy.BlockRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Warn player.
      /// If warn_time is 0, warn will never expire.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.WarnResponse> Warn(global::Mruv.Economy.WarnRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Put player in an admin jail.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.AdminJailResponse> AdminJail(global::Mruv.Economy.AdminJailRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Mute player global chats.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.MuteGlobalChatsResponse> MuteGlobalChats(global::Mruv.Economy.MuteGlobalChatsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deactivate a specific player ban.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.UnBanResponse> UnBan(global::Mruv.Economy.UnBanRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deactivate a character block.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.UnBlockResponse> UnBlock(global::Mruv.Economy.UnBlockRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deactivate a specific player warning. If a player was banned by reaching the warning limit, a player will be unbanned.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.UnWarnResponse> UnWarn(global::Mruv.Economy.UnWarnRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Remove player from admin jail.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.UnAdminJailResponse> UnAdminJail(global::Mruv.Economy.UnAdminJailRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.UnMuteGlobalChatsResponse> UnMuteGlobalChats(global::Mruv.Economy.UnMuteGlobalChatsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get all player bans.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.GetPlayerBansResponse> GetPlayerBans(global::Mruv.Economy.GetPlayerBansRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get all player warns.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.GetPlayerWarnsResponse> GetPlayerWarns(global::Mruv.Economy.GetPlayerWarnsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get player admin jail time.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.GetPlayerAdminJailResponse> GetPlayerAdminJail(global::Mruv.Economy.GetPlayerAdminJailRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get ban info.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.BanMessage> GetBan(global::Mruv.Economy.GetBanRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get warn info.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.WarnMessage> GetWarn(global::Mruv.Economy.GetWarnRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get block info.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.BlockMessage> GetBlock(global::Mruv.Economy.GetBlockRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Check is player or ip banned.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.IsPlayerBannedResponse> IsPlayerBanned(global::Mruv.Economy.IsPlayerBannedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Check is character is blocked.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.IsCharacterBlockedResponse> IsCharacterBlocked(global::Mruv.Economy.IsCharacterBlockedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.IsCharacterJailedResponse> IsCharacterJailed(global::Mruv.Economy.IsCharacterJailedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribe to ban events.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task WatchBans(global::Mruv.Economy.WatchBansRequest request, grpc::IServerStreamWriter<global::Mruv.Economy.BanMessage> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribe to block events.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task WatchBlocks(global::Mruv.Economy.WatchBlocksRequest request, grpc::IServerStreamWriter<global::Mruv.Economy.BlockMessage> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribe to warn events.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task WatchWarns(global::Mruv.Economy.WatchWarnsRequest request, grpc::IServerStreamWriter<global::Mruv.Economy.WarnMessage> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribe to admin jail events.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task WatchAdminJails(global::Mruv.Economy.WatchAdminJailsRequest request, grpc::IServerStreamWriter<global::Mruv.Economy.AdminJailMessage> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribe to unban events.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task WatchUnBans(global::Mruv.Economy.WatchUnBansRequest request, grpc::IServerStreamWriter<global::Mruv.Economy.UnBanMessage> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribe to unblock events.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task WatchUnBlocks(global::Mruv.Economy.WatchUnBlocksRequest request, grpc::IServerStreamWriter<global::Mruv.Economy.UnBlockMessage> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribe to unwarn events.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task WatchUnWarns(global::Mruv.Economy.WatchUnWarnsRequest request, grpc::IServerStreamWriter<global::Mruv.Economy.UnWarnMessage> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribe to admin jail release events.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task WatchUnAdminJails(global::Mruv.Economy.WatchUnAdminJailsRequest request, grpc::IServerStreamWriter<global::Mruv.Economy.UnAdminJailMessage> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribe to player punishments.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task WatchPlayerPunishments(global::Mruv.Economy.WatchPlayerPunishmentsRequest request, grpc::IServerStreamWriter<global::Mruv.Economy.WatchPlayerPunishmentsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribe to player acquittals.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task WatchPlayerAcquittals(global::Mruv.Economy.WatchPlayerAcquittalsRequest request, grpc::IServerStreamWriter<global::Mruv.Economy.WatchPlayerAcquittalsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribe to all punishments and acquittals events.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task WatchPunishments(global::Mruv.Economy.WatchPunishmentsRequest request, grpc::IServerStreamWriter<global::Mruv.Economy.WatchPunishmentsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MruVPunishmentsService</summary>
    public partial class MruVPunishmentsServiceClient : grpc::ClientBase<MruVPunishmentsServiceClient>
    {
      /// <summary>Creates a new client for MruVPunishmentsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MruVPunishmentsServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MruVPunishmentsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MruVPunishmentsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MruVPunishmentsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MruVPunishmentsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Ban player on account and/or ip.
      /// If ban_time is 0, ban will never expire.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.BanResponse Ban(global::Mruv.Economy.BanRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Ban(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Ban player on account and/or ip.
      /// If ban_time is 0, ban will never expire.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.BanResponse Ban(global::Mruv.Economy.BanRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Ban, null, options, request);
      }
      /// <summary>
      /// Ban player on account and/or ip.
      /// If ban_time is 0, ban will never expire.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.BanResponse> BanAsync(global::Mruv.Economy.BanRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BanAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Ban player on account and/or ip.
      /// If ban_time is 0, ban will never expire.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.BanResponse> BanAsync(global::Mruv.Economy.BanRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Ban, null, options, request);
      }
      /// <summary>
      /// Block player character.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.BlockResponse Block(global::Mruv.Economy.BlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Block(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Block player character.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.BlockResponse Block(global::Mruv.Economy.BlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Block, null, options, request);
      }
      /// <summary>
      /// Block player character.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.BlockResponse> BlockAsync(global::Mruv.Economy.BlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Block player character.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.BlockResponse> BlockAsync(global::Mruv.Economy.BlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Block, null, options, request);
      }
      /// <summary>
      /// Warn player.
      /// If warn_time is 0, warn will never expire.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.WarnResponse Warn(global::Mruv.Economy.WarnRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Warn(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Warn player.
      /// If warn_time is 0, warn will never expire.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.WarnResponse Warn(global::Mruv.Economy.WarnRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Warn, null, options, request);
      }
      /// <summary>
      /// Warn player.
      /// If warn_time is 0, warn will never expire.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.WarnResponse> WarnAsync(global::Mruv.Economy.WarnRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WarnAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Warn player.
      /// If warn_time is 0, warn will never expire.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.WarnResponse> WarnAsync(global::Mruv.Economy.WarnRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Warn, null, options, request);
      }
      /// <summary>
      /// Put player in an admin jail.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.AdminJailResponse AdminJail(global::Mruv.Economy.AdminJailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AdminJail(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Put player in an admin jail.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.AdminJailResponse AdminJail(global::Mruv.Economy.AdminJailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AdminJail, null, options, request);
      }
      /// <summary>
      /// Put player in an admin jail.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.AdminJailResponse> AdminJailAsync(global::Mruv.Economy.AdminJailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AdminJailAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Put player in an admin jail.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.AdminJailResponse> AdminJailAsync(global::Mruv.Economy.AdminJailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AdminJail, null, options, request);
      }
      /// <summary>
      /// Mute player global chats.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.MuteGlobalChatsResponse MuteGlobalChats(global::Mruv.Economy.MuteGlobalChatsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MuteGlobalChats(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Mute player global chats.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.MuteGlobalChatsResponse MuteGlobalChats(global::Mruv.Economy.MuteGlobalChatsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MuteGlobalChats, null, options, request);
      }
      /// <summary>
      /// Mute player global chats.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.MuteGlobalChatsResponse> MuteGlobalChatsAsync(global::Mruv.Economy.MuteGlobalChatsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MuteGlobalChatsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Mute player global chats.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.MuteGlobalChatsResponse> MuteGlobalChatsAsync(global::Mruv.Economy.MuteGlobalChatsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MuteGlobalChats, null, options, request);
      }
      /// <summary>
      /// Deactivate a specific player ban.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.UnBanResponse UnBan(global::Mruv.Economy.UnBanRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnBan(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deactivate a specific player ban.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.UnBanResponse UnBan(global::Mruv.Economy.UnBanRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnBan, null, options, request);
      }
      /// <summary>
      /// Deactivate a specific player ban.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.UnBanResponse> UnBanAsync(global::Mruv.Economy.UnBanRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnBanAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deactivate a specific player ban.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.UnBanResponse> UnBanAsync(global::Mruv.Economy.UnBanRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnBan, null, options, request);
      }
      /// <summary>
      /// Deactivate a character block.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.UnBlockResponse UnBlock(global::Mruv.Economy.UnBlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deactivate a character block.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.UnBlockResponse UnBlock(global::Mruv.Economy.UnBlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnBlock, null, options, request);
      }
      /// <summary>
      /// Deactivate a character block.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.UnBlockResponse> UnBlockAsync(global::Mruv.Economy.UnBlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deactivate a character block.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.UnBlockResponse> UnBlockAsync(global::Mruv.Economy.UnBlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnBlock, null, options, request);
      }
      /// <summary>
      /// Deactivate a specific player warning. If a player was banned by reaching the warning limit, a player will be unbanned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.UnWarnResponse UnWarn(global::Mruv.Economy.UnWarnRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnWarn(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deactivate a specific player warning. If a player was banned by reaching the warning limit, a player will be unbanned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.UnWarnResponse UnWarn(global::Mruv.Economy.UnWarnRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnWarn, null, options, request);
      }
      /// <summary>
      /// Deactivate a specific player warning. If a player was banned by reaching the warning limit, a player will be unbanned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.UnWarnResponse> UnWarnAsync(global::Mruv.Economy.UnWarnRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnWarnAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deactivate a specific player warning. If a player was banned by reaching the warning limit, a player will be unbanned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.UnWarnResponse> UnWarnAsync(global::Mruv.Economy.UnWarnRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnWarn, null, options, request);
      }
      /// <summary>
      /// Remove player from admin jail.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.UnAdminJailResponse UnAdminJail(global::Mruv.Economy.UnAdminJailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnAdminJail(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove player from admin jail.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.UnAdminJailResponse UnAdminJail(global::Mruv.Economy.UnAdminJailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnAdminJail, null, options, request);
      }
      /// <summary>
      /// Remove player from admin jail.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.UnAdminJailResponse> UnAdminJailAsync(global::Mruv.Economy.UnAdminJailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnAdminJailAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove player from admin jail.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.UnAdminJailResponse> UnAdminJailAsync(global::Mruv.Economy.UnAdminJailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnAdminJail, null, options, request);
      }
      /// <summary>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.UnMuteGlobalChatsResponse UnMuteGlobalChats(global::Mruv.Economy.UnMuteGlobalChatsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnMuteGlobalChats(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.UnMuteGlobalChatsResponse UnMuteGlobalChats(global::Mruv.Economy.UnMuteGlobalChatsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnMuteGlobalChats, null, options, request);
      }
      /// <summary>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.UnMuteGlobalChatsResponse> UnMuteGlobalChatsAsync(global::Mruv.Economy.UnMuteGlobalChatsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnMuteGlobalChatsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.UnMuteGlobalChatsResponse> UnMuteGlobalChatsAsync(global::Mruv.Economy.UnMuteGlobalChatsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnMuteGlobalChats, null, options, request);
      }
      /// <summary>
      /// Get all player bans.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.GetPlayerBansResponse GetPlayerBans(global::Mruv.Economy.GetPlayerBansRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPlayerBans(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all player bans.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.GetPlayerBansResponse GetPlayerBans(global::Mruv.Economy.GetPlayerBansRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPlayerBans, null, options, request);
      }
      /// <summary>
      /// Get all player bans.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.GetPlayerBansResponse> GetPlayerBansAsync(global::Mruv.Economy.GetPlayerBansRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPlayerBansAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all player bans.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.GetPlayerBansResponse> GetPlayerBansAsync(global::Mruv.Economy.GetPlayerBansRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPlayerBans, null, options, request);
      }
      /// <summary>
      /// Get all player warns.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.GetPlayerWarnsResponse GetPlayerWarns(global::Mruv.Economy.GetPlayerWarnsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPlayerWarns(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all player warns.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.GetPlayerWarnsResponse GetPlayerWarns(global::Mruv.Economy.GetPlayerWarnsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPlayerWarns, null, options, request);
      }
      /// <summary>
      /// Get all player warns.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.GetPlayerWarnsResponse> GetPlayerWarnsAsync(global::Mruv.Economy.GetPlayerWarnsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPlayerWarnsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all player warns.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.GetPlayerWarnsResponse> GetPlayerWarnsAsync(global::Mruv.Economy.GetPlayerWarnsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPlayerWarns, null, options, request);
      }
      /// <summary>
      /// Get player admin jail time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.GetPlayerAdminJailResponse GetPlayerAdminJail(global::Mruv.Economy.GetPlayerAdminJailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPlayerAdminJail(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get player admin jail time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.GetPlayerAdminJailResponse GetPlayerAdminJail(global::Mruv.Economy.GetPlayerAdminJailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPlayerAdminJail, null, options, request);
      }
      /// <summary>
      /// Get player admin jail time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.GetPlayerAdminJailResponse> GetPlayerAdminJailAsync(global::Mruv.Economy.GetPlayerAdminJailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPlayerAdminJailAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get player admin jail time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.GetPlayerAdminJailResponse> GetPlayerAdminJailAsync(global::Mruv.Economy.GetPlayerAdminJailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPlayerAdminJail, null, options, request);
      }
      /// <summary>
      /// Get ban info.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.BanMessage GetBan(global::Mruv.Economy.GetBanRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBan(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get ban info.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.BanMessage GetBan(global::Mruv.Economy.GetBanRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBan, null, options, request);
      }
      /// <summary>
      /// Get ban info.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.BanMessage> GetBanAsync(global::Mruv.Economy.GetBanRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBanAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get ban info.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.BanMessage> GetBanAsync(global::Mruv.Economy.GetBanRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBan, null, options, request);
      }
      /// <summary>
      /// Get warn info.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.WarnMessage GetWarn(global::Mruv.Economy.GetWarnRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWarn(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get warn info.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.WarnMessage GetWarn(global::Mruv.Economy.GetWarnRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWarn, null, options, request);
      }
      /// <summary>
      /// Get warn info.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.WarnMessage> GetWarnAsync(global::Mruv.Economy.GetWarnRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWarnAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get warn info.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.WarnMessage> GetWarnAsync(global::Mruv.Economy.GetWarnRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWarn, null, options, request);
      }
      /// <summary>
      /// Get block info.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.BlockMessage GetBlock(global::Mruv.Economy.GetBlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get block info.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.BlockMessage GetBlock(global::Mruv.Economy.GetBlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlock, null, options, request);
      }
      /// <summary>
      /// Get block info.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.BlockMessage> GetBlockAsync(global::Mruv.Economy.GetBlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get block info.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.BlockMessage> GetBlockAsync(global::Mruv.Economy.GetBlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlock, null, options, request);
      }
      /// <summary>
      /// Check is player or ip banned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.IsPlayerBannedResponse IsPlayerBanned(global::Mruv.Economy.IsPlayerBannedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsPlayerBanned(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check is player or ip banned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.IsPlayerBannedResponse IsPlayerBanned(global::Mruv.Economy.IsPlayerBannedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsPlayerBanned, null, options, request);
      }
      /// <summary>
      /// Check is player or ip banned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.IsPlayerBannedResponse> IsPlayerBannedAsync(global::Mruv.Economy.IsPlayerBannedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsPlayerBannedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check is player or ip banned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.IsPlayerBannedResponse> IsPlayerBannedAsync(global::Mruv.Economy.IsPlayerBannedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsPlayerBanned, null, options, request);
      }
      /// <summary>
      /// Check is character is blocked.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.IsCharacterBlockedResponse IsCharacterBlocked(global::Mruv.Economy.IsCharacterBlockedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsCharacterBlocked(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check is character is blocked.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.IsCharacterBlockedResponse IsCharacterBlocked(global::Mruv.Economy.IsCharacterBlockedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsCharacterBlocked, null, options, request);
      }
      /// <summary>
      /// Check is character is blocked.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.IsCharacterBlockedResponse> IsCharacterBlockedAsync(global::Mruv.Economy.IsCharacterBlockedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsCharacterBlockedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check is character is blocked.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.IsCharacterBlockedResponse> IsCharacterBlockedAsync(global::Mruv.Economy.IsCharacterBlockedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsCharacterBlocked, null, options, request);
      }
      /// <summary>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.IsCharacterJailedResponse IsCharacterJailed(global::Mruv.Economy.IsCharacterJailedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsCharacterJailed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.IsCharacterJailedResponse IsCharacterJailed(global::Mruv.Economy.IsCharacterJailedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsCharacterJailed, null, options, request);
      }
      /// <summary>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.IsCharacterJailedResponse> IsCharacterJailedAsync(global::Mruv.Economy.IsCharacterJailedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsCharacterJailedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.IsCharacterJailedResponse> IsCharacterJailedAsync(global::Mruv.Economy.IsCharacterJailedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsCharacterJailed, null, options, request);
      }
      /// <summary>
      /// Subscribe to ban events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.BanMessage> WatchBans(global::Mruv.Economy.WatchBansRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WatchBans(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to ban events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.BanMessage> WatchBans(global::Mruv.Economy.WatchBansRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_WatchBans, null, options, request);
      }
      /// <summary>
      /// Subscribe to block events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.BlockMessage> WatchBlocks(global::Mruv.Economy.WatchBlocksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WatchBlocks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to block events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.BlockMessage> WatchBlocks(global::Mruv.Economy.WatchBlocksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_WatchBlocks, null, options, request);
      }
      /// <summary>
      /// Subscribe to warn events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.WarnMessage> WatchWarns(global::Mruv.Economy.WatchWarnsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WatchWarns(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to warn events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.WarnMessage> WatchWarns(global::Mruv.Economy.WatchWarnsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_WatchWarns, null, options, request);
      }
      /// <summary>
      /// Subscribe to admin jail events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.AdminJailMessage> WatchAdminJails(global::Mruv.Economy.WatchAdminJailsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WatchAdminJails(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to admin jail events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.AdminJailMessage> WatchAdminJails(global::Mruv.Economy.WatchAdminJailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_WatchAdminJails, null, options, request);
      }
      /// <summary>
      /// Subscribe to unban events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.UnBanMessage> WatchUnBans(global::Mruv.Economy.WatchUnBansRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WatchUnBans(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to unban events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.UnBanMessage> WatchUnBans(global::Mruv.Economy.WatchUnBansRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_WatchUnBans, null, options, request);
      }
      /// <summary>
      /// Subscribe to unblock events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.UnBlockMessage> WatchUnBlocks(global::Mruv.Economy.WatchUnBlocksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WatchUnBlocks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to unblock events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.UnBlockMessage> WatchUnBlocks(global::Mruv.Economy.WatchUnBlocksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_WatchUnBlocks, null, options, request);
      }
      /// <summary>
      /// Subscribe to unwarn events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.UnWarnMessage> WatchUnWarns(global::Mruv.Economy.WatchUnWarnsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WatchUnWarns(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to unwarn events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.UnWarnMessage> WatchUnWarns(global::Mruv.Economy.WatchUnWarnsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_WatchUnWarns, null, options, request);
      }
      /// <summary>
      /// Subscribe to admin jail release events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.UnAdminJailMessage> WatchUnAdminJails(global::Mruv.Economy.WatchUnAdminJailsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WatchUnAdminJails(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to admin jail release events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.UnAdminJailMessage> WatchUnAdminJails(global::Mruv.Economy.WatchUnAdminJailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_WatchUnAdminJails, null, options, request);
      }
      /// <summary>
      /// Subscribe to player punishments.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.WatchPlayerPunishmentsResponse> WatchPlayerPunishments(global::Mruv.Economy.WatchPlayerPunishmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WatchPlayerPunishments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to player punishments.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.WatchPlayerPunishmentsResponse> WatchPlayerPunishments(global::Mruv.Economy.WatchPlayerPunishmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_WatchPlayerPunishments, null, options, request);
      }
      /// <summary>
      /// Subscribe to player acquittals.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.WatchPlayerAcquittalsResponse> WatchPlayerAcquittals(global::Mruv.Economy.WatchPlayerAcquittalsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WatchPlayerAcquittals(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to player acquittals.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.WatchPlayerAcquittalsResponse> WatchPlayerAcquittals(global::Mruv.Economy.WatchPlayerAcquittalsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_WatchPlayerAcquittals, null, options, request);
      }
      /// <summary>
      /// Subscribe to all punishments and acquittals events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.WatchPunishmentsResponse> WatchPunishments(global::Mruv.Economy.WatchPunishmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WatchPunishments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to all punishments and acquittals events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.WatchPunishmentsResponse> WatchPunishments(global::Mruv.Economy.WatchPunishmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_WatchPunishments, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MruVPunishmentsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MruVPunishmentsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MruVPunishmentsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Ban, serviceImpl.Ban)
          .AddMethod(__Method_Block, serviceImpl.Block)
          .AddMethod(__Method_Warn, serviceImpl.Warn)
          .AddMethod(__Method_AdminJail, serviceImpl.AdminJail)
          .AddMethod(__Method_MuteGlobalChats, serviceImpl.MuteGlobalChats)
          .AddMethod(__Method_UnBan, serviceImpl.UnBan)
          .AddMethod(__Method_UnBlock, serviceImpl.UnBlock)
          .AddMethod(__Method_UnWarn, serviceImpl.UnWarn)
          .AddMethod(__Method_UnAdminJail, serviceImpl.UnAdminJail)
          .AddMethod(__Method_UnMuteGlobalChats, serviceImpl.UnMuteGlobalChats)
          .AddMethod(__Method_GetPlayerBans, serviceImpl.GetPlayerBans)
          .AddMethod(__Method_GetPlayerWarns, serviceImpl.GetPlayerWarns)
          .AddMethod(__Method_GetPlayerAdminJail, serviceImpl.GetPlayerAdminJail)
          .AddMethod(__Method_GetBan, serviceImpl.GetBan)
          .AddMethod(__Method_GetWarn, serviceImpl.GetWarn)
          .AddMethod(__Method_GetBlock, serviceImpl.GetBlock)
          .AddMethod(__Method_IsPlayerBanned, serviceImpl.IsPlayerBanned)
          .AddMethod(__Method_IsCharacterBlocked, serviceImpl.IsCharacterBlocked)
          .AddMethod(__Method_IsCharacterJailed, serviceImpl.IsCharacterJailed)
          .AddMethod(__Method_WatchBans, serviceImpl.WatchBans)
          .AddMethod(__Method_WatchBlocks, serviceImpl.WatchBlocks)
          .AddMethod(__Method_WatchWarns, serviceImpl.WatchWarns)
          .AddMethod(__Method_WatchAdminJails, serviceImpl.WatchAdminJails)
          .AddMethod(__Method_WatchUnBans, serviceImpl.WatchUnBans)
          .AddMethod(__Method_WatchUnBlocks, serviceImpl.WatchUnBlocks)
          .AddMethod(__Method_WatchUnWarns, serviceImpl.WatchUnWarns)
          .AddMethod(__Method_WatchUnAdminJails, serviceImpl.WatchUnAdminJails)
          .AddMethod(__Method_WatchPlayerPunishments, serviceImpl.WatchPlayerPunishments)
          .AddMethod(__Method_WatchPlayerAcquittals, serviceImpl.WatchPlayerAcquittals)
          .AddMethod(__Method_WatchPunishments, serviceImpl.WatchPunishments).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MruVPunishmentsServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Ban, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.BanRequest, global::Mruv.Economy.BanResponse>(serviceImpl.Ban));
      serviceBinder.AddMethod(__Method_Block, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.BlockRequest, global::Mruv.Economy.BlockResponse>(serviceImpl.Block));
      serviceBinder.AddMethod(__Method_Warn, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.WarnRequest, global::Mruv.Economy.WarnResponse>(serviceImpl.Warn));
      serviceBinder.AddMethod(__Method_AdminJail, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.AdminJailRequest, global::Mruv.Economy.AdminJailResponse>(serviceImpl.AdminJail));
      serviceBinder.AddMethod(__Method_MuteGlobalChats, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.MuteGlobalChatsRequest, global::Mruv.Economy.MuteGlobalChatsResponse>(serviceImpl.MuteGlobalChats));
      serviceBinder.AddMethod(__Method_UnBan, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.UnBanRequest, global::Mruv.Economy.UnBanResponse>(serviceImpl.UnBan));
      serviceBinder.AddMethod(__Method_UnBlock, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.UnBlockRequest, global::Mruv.Economy.UnBlockResponse>(serviceImpl.UnBlock));
      serviceBinder.AddMethod(__Method_UnWarn, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.UnWarnRequest, global::Mruv.Economy.UnWarnResponse>(serviceImpl.UnWarn));
      serviceBinder.AddMethod(__Method_UnAdminJail, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.UnAdminJailRequest, global::Mruv.Economy.UnAdminJailResponse>(serviceImpl.UnAdminJail));
      serviceBinder.AddMethod(__Method_UnMuteGlobalChats, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.UnMuteGlobalChatsRequest, global::Mruv.Economy.UnMuteGlobalChatsResponse>(serviceImpl.UnMuteGlobalChats));
      serviceBinder.AddMethod(__Method_GetPlayerBans, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.GetPlayerBansRequest, global::Mruv.Economy.GetPlayerBansResponse>(serviceImpl.GetPlayerBans));
      serviceBinder.AddMethod(__Method_GetPlayerWarns, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.GetPlayerWarnsRequest, global::Mruv.Economy.GetPlayerWarnsResponse>(serviceImpl.GetPlayerWarns));
      serviceBinder.AddMethod(__Method_GetPlayerAdminJail, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.GetPlayerAdminJailRequest, global::Mruv.Economy.GetPlayerAdminJailResponse>(serviceImpl.GetPlayerAdminJail));
      serviceBinder.AddMethod(__Method_GetBan, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.GetBanRequest, global::Mruv.Economy.BanMessage>(serviceImpl.GetBan));
      serviceBinder.AddMethod(__Method_GetWarn, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.GetWarnRequest, global::Mruv.Economy.WarnMessage>(serviceImpl.GetWarn));
      serviceBinder.AddMethod(__Method_GetBlock, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.GetBlockRequest, global::Mruv.Economy.BlockMessage>(serviceImpl.GetBlock));
      serviceBinder.AddMethod(__Method_IsPlayerBanned, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.IsPlayerBannedRequest, global::Mruv.Economy.IsPlayerBannedResponse>(serviceImpl.IsPlayerBanned));
      serviceBinder.AddMethod(__Method_IsCharacterBlocked, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.IsCharacterBlockedRequest, global::Mruv.Economy.IsCharacterBlockedResponse>(serviceImpl.IsCharacterBlocked));
      serviceBinder.AddMethod(__Method_IsCharacterJailed, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.IsCharacterJailedRequest, global::Mruv.Economy.IsCharacterJailedResponse>(serviceImpl.IsCharacterJailed));
      serviceBinder.AddMethod(__Method_WatchBans, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mruv.Economy.WatchBansRequest, global::Mruv.Economy.BanMessage>(serviceImpl.WatchBans));
      serviceBinder.AddMethod(__Method_WatchBlocks, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mruv.Economy.WatchBlocksRequest, global::Mruv.Economy.BlockMessage>(serviceImpl.WatchBlocks));
      serviceBinder.AddMethod(__Method_WatchWarns, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mruv.Economy.WatchWarnsRequest, global::Mruv.Economy.WarnMessage>(serviceImpl.WatchWarns));
      serviceBinder.AddMethod(__Method_WatchAdminJails, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mruv.Economy.WatchAdminJailsRequest, global::Mruv.Economy.AdminJailMessage>(serviceImpl.WatchAdminJails));
      serviceBinder.AddMethod(__Method_WatchUnBans, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mruv.Economy.WatchUnBansRequest, global::Mruv.Economy.UnBanMessage>(serviceImpl.WatchUnBans));
      serviceBinder.AddMethod(__Method_WatchUnBlocks, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mruv.Economy.WatchUnBlocksRequest, global::Mruv.Economy.UnBlockMessage>(serviceImpl.WatchUnBlocks));
      serviceBinder.AddMethod(__Method_WatchUnWarns, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mruv.Economy.WatchUnWarnsRequest, global::Mruv.Economy.UnWarnMessage>(serviceImpl.WatchUnWarns));
      serviceBinder.AddMethod(__Method_WatchUnAdminJails, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mruv.Economy.WatchUnAdminJailsRequest, global::Mruv.Economy.UnAdminJailMessage>(serviceImpl.WatchUnAdminJails));
      serviceBinder.AddMethod(__Method_WatchPlayerPunishments, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mruv.Economy.WatchPlayerPunishmentsRequest, global::Mruv.Economy.WatchPlayerPunishmentsResponse>(serviceImpl.WatchPlayerPunishments));
      serviceBinder.AddMethod(__Method_WatchPlayerAcquittals, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mruv.Economy.WatchPlayerAcquittalsRequest, global::Mruv.Economy.WatchPlayerAcquittalsResponse>(serviceImpl.WatchPlayerAcquittals));
      serviceBinder.AddMethod(__Method_WatchPunishments, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mruv.Economy.WatchPunishmentsRequest, global::Mruv.Economy.WatchPunishmentsResponse>(serviceImpl.WatchPunishments));
    }

  }
}
#endregion
