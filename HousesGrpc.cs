// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: houses/houses.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mruv.Houses {
  /// <summary>
  /// The MruV houses service provides procedures for managing houses.
  /// </summary>
  public static partial class MruVHousesService
  {
    static readonly string __ServiceName = "mruv.houses.MruVHousesService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Mruv.Houses.CreateHouseRequest> __Marshaller_mruv_houses_CreateHouseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Houses.CreateHouseRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Houses.CreateHouseResponse> __Marshaller_mruv_houses_CreateHouseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Houses.CreateHouseResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Houses.GetHouseRequest> __Marshaller_mruv_houses_GetHouseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Houses.GetHouseRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Houses.GetHouseResponse> __Marshaller_mruv_houses_GetHouseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Houses.GetHouseResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Houses.UpdateHouseRequest> __Marshaller_mruv_houses_UpdateHouseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Houses.UpdateHouseRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Houses.UpdateHouseResponse> __Marshaller_mruv_houses_UpdateHouseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Houses.UpdateHouseResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Houses.DeleteHouseRequest> __Marshaller_mruv_houses_DeleteHouseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Houses.DeleteHouseRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Houses.DeleteHouseResponse> __Marshaller_mruv_houses_DeleteHouseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Houses.DeleteHouseResponse.Parser));

    static readonly grpc::Method<global::Mruv.Houses.CreateHouseRequest, global::Mruv.Houses.CreateHouseResponse> __Method_CreateHouse = new grpc::Method<global::Mruv.Houses.CreateHouseRequest, global::Mruv.Houses.CreateHouseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateHouse",
        __Marshaller_mruv_houses_CreateHouseRequest,
        __Marshaller_mruv_houses_CreateHouseResponse);

    static readonly grpc::Method<global::Mruv.Houses.GetHouseRequest, global::Mruv.Houses.GetHouseResponse> __Method_GetHouse = new grpc::Method<global::Mruv.Houses.GetHouseRequest, global::Mruv.Houses.GetHouseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHouse",
        __Marshaller_mruv_houses_GetHouseRequest,
        __Marshaller_mruv_houses_GetHouseResponse);

    static readonly grpc::Method<global::Mruv.Houses.UpdateHouseRequest, global::Mruv.Houses.UpdateHouseResponse> __Method_UpdateHouse = new grpc::Method<global::Mruv.Houses.UpdateHouseRequest, global::Mruv.Houses.UpdateHouseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateHouse",
        __Marshaller_mruv_houses_UpdateHouseRequest,
        __Marshaller_mruv_houses_UpdateHouseResponse);

    static readonly grpc::Method<global::Mruv.Houses.DeleteHouseRequest, global::Mruv.Houses.DeleteHouseResponse> __Method_DeleteHouse = new grpc::Method<global::Mruv.Houses.DeleteHouseRequest, global::Mruv.Houses.DeleteHouseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteHouse",
        __Marshaller_mruv_houses_DeleteHouseRequest,
        __Marshaller_mruv_houses_DeleteHouseResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mruv.Houses.HousesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MruVHousesService</summary>
    [grpc::BindServiceMethod(typeof(MruVHousesService), "BindService")]
    public abstract partial class MruVHousesServiceBase
    {
      /// <summary>
      /// Create a house.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Houses.CreateHouseResponse> CreateHouse(global::Mruv.Houses.CreateHouseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a house.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Houses.GetHouseResponse> GetHouse(global::Mruv.Houses.GetHouseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a house.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Houses.UpdateHouseResponse> UpdateHouse(global::Mruv.Houses.UpdateHouseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a house.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Houses.DeleteHouseResponse> DeleteHouse(global::Mruv.Houses.DeleteHouseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MruVHousesService</summary>
    public partial class MruVHousesServiceClient : grpc::ClientBase<MruVHousesServiceClient>
    {
      /// <summary>Creates a new client for MruVHousesService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MruVHousesServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MruVHousesService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MruVHousesServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MruVHousesServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MruVHousesServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a house.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Houses.CreateHouseResponse CreateHouse(global::Mruv.Houses.CreateHouseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateHouse(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a house.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Houses.CreateHouseResponse CreateHouse(global::Mruv.Houses.CreateHouseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateHouse, null, options, request);
      }
      /// <summary>
      /// Create a house.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Houses.CreateHouseResponse> CreateHouseAsync(global::Mruv.Houses.CreateHouseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateHouseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a house.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Houses.CreateHouseResponse> CreateHouseAsync(global::Mruv.Houses.CreateHouseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateHouse, null, options, request);
      }
      /// <summary>
      /// Get a house.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Houses.GetHouseResponse GetHouse(global::Mruv.Houses.GetHouseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHouse(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a house.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Houses.GetHouseResponse GetHouse(global::Mruv.Houses.GetHouseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHouse, null, options, request);
      }
      /// <summary>
      /// Get a house.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Houses.GetHouseResponse> GetHouseAsync(global::Mruv.Houses.GetHouseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHouseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a house.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Houses.GetHouseResponse> GetHouseAsync(global::Mruv.Houses.GetHouseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHouse, null, options, request);
      }
      /// <summary>
      /// Update a house.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Houses.UpdateHouseResponse UpdateHouse(global::Mruv.Houses.UpdateHouseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateHouse(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a house.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Houses.UpdateHouseResponse UpdateHouse(global::Mruv.Houses.UpdateHouseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateHouse, null, options, request);
      }
      /// <summary>
      /// Update a house.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Houses.UpdateHouseResponse> UpdateHouseAsync(global::Mruv.Houses.UpdateHouseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateHouseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a house.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Houses.UpdateHouseResponse> UpdateHouseAsync(global::Mruv.Houses.UpdateHouseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateHouse, null, options, request);
      }
      /// <summary>
      /// Delete a house.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Houses.DeleteHouseResponse DeleteHouse(global::Mruv.Houses.DeleteHouseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteHouse(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a house.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Houses.DeleteHouseResponse DeleteHouse(global::Mruv.Houses.DeleteHouseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteHouse, null, options, request);
      }
      /// <summary>
      /// Delete a house.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Houses.DeleteHouseResponse> DeleteHouseAsync(global::Mruv.Houses.DeleteHouseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteHouseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a house.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Houses.DeleteHouseResponse> DeleteHouseAsync(global::Mruv.Houses.DeleteHouseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteHouse, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MruVHousesServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MruVHousesServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MruVHousesServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateHouse, serviceImpl.CreateHouse)
          .AddMethod(__Method_GetHouse, serviceImpl.GetHouse)
          .AddMethod(__Method_UpdateHouse, serviceImpl.UpdateHouse)
          .AddMethod(__Method_DeleteHouse, serviceImpl.DeleteHouse).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MruVHousesServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateHouse, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Houses.CreateHouseRequest, global::Mruv.Houses.CreateHouseResponse>(serviceImpl.CreateHouse));
      serviceBinder.AddMethod(__Method_GetHouse, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Houses.GetHouseRequest, global::Mruv.Houses.GetHouseResponse>(serviceImpl.GetHouse));
      serviceBinder.AddMethod(__Method_UpdateHouse, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Houses.UpdateHouseRequest, global::Mruv.Houses.UpdateHouseResponse>(serviceImpl.UpdateHouse));
      serviceBinder.AddMethod(__Method_DeleteHouse, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Houses.DeleteHouseRequest, global::Mruv.Houses.DeleteHouseResponse>(serviceImpl.DeleteHouse));
    }

  }
}
#endregion
