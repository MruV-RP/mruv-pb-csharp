// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: characters/characters.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mruv.Characters {
  public static partial class MruVCharactersService
  {
    static readonly string __ServiceName = "mruv.characters.MruVCharactersService";

    static readonly grpc::Marshaller<global::Mruv.Characters.CreateCharacterRequest> __Marshaller_mruv_characters_CreateCharacterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Characters.CreateCharacterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Characters.CreateCharacterResponse> __Marshaller_mruv_characters_CreateCharacterResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Characters.CreateCharacterResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Characters.GetCharacterRequest> __Marshaller_mruv_characters_GetCharacterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Characters.GetCharacterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Characters.GetCharacterResponse> __Marshaller_mruv_characters_GetCharacterResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Characters.GetCharacterResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Characters.UpdateCharacterRequest> __Marshaller_mruv_characters_UpdateCharacterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Characters.UpdateCharacterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Characters.UpdateCharacterResponse> __Marshaller_mruv_characters_UpdateCharacterResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Characters.UpdateCharacterResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Characters.DeleteCharacterRequest> __Marshaller_mruv_characters_DeleteCharacterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Characters.DeleteCharacterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Characters.DeleteCharacterResponse> __Marshaller_mruv_characters_DeleteCharacterResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Characters.DeleteCharacterResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Characters.CharacterID> __Marshaller_mruv_characters_CharacterID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Characters.CharacterID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Characters.ChangeClothesRequest> __Marshaller_mruv_characters_ChangeClothesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Characters.ChangeClothesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Characters.ChangeClothesResponse> __Marshaller_mruv_characters_ChangeClothesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Characters.ChangeClothesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Characters.DeathStreamRequest> __Marshaller_mruv_characters_DeathStreamRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Characters.DeathStreamRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Characters.DeathStreamResponse> __Marshaller_mruv_characters_DeathStreamResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Characters.DeathStreamResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.ServiceStatusRequest> __Marshaller_mruv_ServiceStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.ServiceStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.ServiceStatusResponse> __Marshaller_mruv_ServiceStatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.ServiceStatusResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.VersionRequest> __Marshaller_mruv_VersionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.VersionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.VersionResponse> __Marshaller_mruv_VersionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.VersionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Mruv.Characters.CreateCharacterRequest, global::Mruv.Characters.CreateCharacterResponse> __Method_CreateCharacter = new grpc::Method<global::Mruv.Characters.CreateCharacterRequest, global::Mruv.Characters.CreateCharacterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCharacter",
        __Marshaller_mruv_characters_CreateCharacterRequest,
        __Marshaller_mruv_characters_CreateCharacterResponse);

    static readonly grpc::Method<global::Mruv.Characters.GetCharacterRequest, global::Mruv.Characters.GetCharacterResponse> __Method_GetCharacter = new grpc::Method<global::Mruv.Characters.GetCharacterRequest, global::Mruv.Characters.GetCharacterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCharacter",
        __Marshaller_mruv_characters_GetCharacterRequest,
        __Marshaller_mruv_characters_GetCharacterResponse);

    static readonly grpc::Method<global::Mruv.Characters.UpdateCharacterRequest, global::Mruv.Characters.UpdateCharacterResponse> __Method_UpdateCharacter = new grpc::Method<global::Mruv.Characters.UpdateCharacterRequest, global::Mruv.Characters.UpdateCharacterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCharacter",
        __Marshaller_mruv_characters_UpdateCharacterRequest,
        __Marshaller_mruv_characters_UpdateCharacterResponse);

    static readonly grpc::Method<global::Mruv.Characters.DeleteCharacterRequest, global::Mruv.Characters.DeleteCharacterResponse> __Method_DeleteCharacter = new grpc::Method<global::Mruv.Characters.DeleteCharacterRequest, global::Mruv.Characters.DeleteCharacterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCharacter",
        __Marshaller_mruv_characters_DeleteCharacterRequest,
        __Marshaller_mruv_characters_DeleteCharacterResponse);

    static readonly grpc::Method<global::Mruv.Characters.CharacterID, global::Mruv.Characters.CharacterID> __Method_PermanentCharacterKill = new grpc::Method<global::Mruv.Characters.CharacterID, global::Mruv.Characters.CharacterID>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PermanentCharacterKill",
        __Marshaller_mruv_characters_CharacterID,
        __Marshaller_mruv_characters_CharacterID);

    static readonly grpc::Method<global::Mruv.Characters.ChangeClothesRequest, global::Mruv.Characters.ChangeClothesResponse> __Method_ChangeClothes = new grpc::Method<global::Mruv.Characters.ChangeClothesRequest, global::Mruv.Characters.ChangeClothesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChangeClothes",
        __Marshaller_mruv_characters_ChangeClothesRequest,
        __Marshaller_mruv_characters_ChangeClothesResponse);

    static readonly grpc::Method<global::Mruv.Characters.DeathStreamRequest, global::Mruv.Characters.DeathStreamResponse> __Method_DeathsStream = new grpc::Method<global::Mruv.Characters.DeathStreamRequest, global::Mruv.Characters.DeathStreamResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "DeathsStream",
        __Marshaller_mruv_characters_DeathStreamRequest,
        __Marshaller_mruv_characters_DeathStreamResponse);

    static readonly grpc::Method<global::Mruv.ServiceStatusRequest, global::Mruv.ServiceStatusResponse> __Method_GetServiceStatus = new grpc::Method<global::Mruv.ServiceStatusRequest, global::Mruv.ServiceStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServiceStatus",
        __Marshaller_mruv_ServiceStatusRequest,
        __Marshaller_mruv_ServiceStatusResponse);

    static readonly grpc::Method<global::Mruv.VersionRequest, global::Mruv.VersionResponse> __Method_GetServiceVersion = new grpc::Method<global::Mruv.VersionRequest, global::Mruv.VersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServiceVersion",
        __Marshaller_mruv_VersionRequest,
        __Marshaller_mruv_VersionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mruv.Characters.CharactersReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MruVCharactersService</summary>
    [grpc::BindServiceMethod(typeof(MruVCharactersService), "BindService")]
    public abstract partial class MruVCharactersServiceBase
    {
      /// <summary>
      /// Create a character.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Characters.CreateCharacterResponse> CreateCharacter(global::Mruv.Characters.CreateCharacterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a character.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Characters.GetCharacterResponse> GetCharacter(global::Mruv.Characters.GetCharacterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a character.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Characters.UpdateCharacterResponse> UpdateCharacter(global::Mruv.Characters.UpdateCharacterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a character.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Characters.DeleteCharacterResponse> DeleteCharacter(global::Mruv.Characters.DeleteCharacterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Kill a character. A character that is killed cannot be played anymore.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Characters.CharacterID> PermanentCharacterKill(global::Mruv.Characters.CharacterID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Change player clothes.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Characters.ChangeClothesResponse> ChangeClothes(global::Mruv.Characters.ChangeClothesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Stream of deaths.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task DeathsStream(global::Mruv.Characters.DeathStreamRequest request, grpc::IServerStreamWriter<global::Mruv.Characters.DeathStreamResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Service status
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.ServiceStatusResponse> GetServiceStatus(global::Mruv.ServiceStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.VersionResponse> GetServiceVersion(global::Mruv.VersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MruVCharactersService</summary>
    public partial class MruVCharactersServiceClient : grpc::ClientBase<MruVCharactersServiceClient>
    {
      /// <summary>Creates a new client for MruVCharactersService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MruVCharactersServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MruVCharactersService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MruVCharactersServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MruVCharactersServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MruVCharactersServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a character.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Characters.CreateCharacterResponse CreateCharacter(global::Mruv.Characters.CreateCharacterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCharacter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a character.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Characters.CreateCharacterResponse CreateCharacter(global::Mruv.Characters.CreateCharacterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCharacter, null, options, request);
      }
      /// <summary>
      /// Create a character.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Characters.CreateCharacterResponse> CreateCharacterAsync(global::Mruv.Characters.CreateCharacterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCharacterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a character.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Characters.CreateCharacterResponse> CreateCharacterAsync(global::Mruv.Characters.CreateCharacterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCharacter, null, options, request);
      }
      /// <summary>
      /// Get a character.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Characters.GetCharacterResponse GetCharacter(global::Mruv.Characters.GetCharacterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCharacter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a character.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Characters.GetCharacterResponse GetCharacter(global::Mruv.Characters.GetCharacterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCharacter, null, options, request);
      }
      /// <summary>
      /// Get a character.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Characters.GetCharacterResponse> GetCharacterAsync(global::Mruv.Characters.GetCharacterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCharacterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a character.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Characters.GetCharacterResponse> GetCharacterAsync(global::Mruv.Characters.GetCharacterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCharacter, null, options, request);
      }
      /// <summary>
      /// Update a character.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Characters.UpdateCharacterResponse UpdateCharacter(global::Mruv.Characters.UpdateCharacterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCharacter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a character.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Characters.UpdateCharacterResponse UpdateCharacter(global::Mruv.Characters.UpdateCharacterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCharacter, null, options, request);
      }
      /// <summary>
      /// Update a character.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Characters.UpdateCharacterResponse> UpdateCharacterAsync(global::Mruv.Characters.UpdateCharacterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCharacterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a character.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Characters.UpdateCharacterResponse> UpdateCharacterAsync(global::Mruv.Characters.UpdateCharacterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCharacter, null, options, request);
      }
      /// <summary>
      /// Delete a character.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Characters.DeleteCharacterResponse DeleteCharacter(global::Mruv.Characters.DeleteCharacterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCharacter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a character.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Characters.DeleteCharacterResponse DeleteCharacter(global::Mruv.Characters.DeleteCharacterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCharacter, null, options, request);
      }
      /// <summary>
      /// Delete a character.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Characters.DeleteCharacterResponse> DeleteCharacterAsync(global::Mruv.Characters.DeleteCharacterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCharacterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a character.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Characters.DeleteCharacterResponse> DeleteCharacterAsync(global::Mruv.Characters.DeleteCharacterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCharacter, null, options, request);
      }
      /// <summary>
      /// Kill a character. A character that is killed cannot be played anymore.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Characters.CharacterID PermanentCharacterKill(global::Mruv.Characters.CharacterID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PermanentCharacterKill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Kill a character. A character that is killed cannot be played anymore.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Characters.CharacterID PermanentCharacterKill(global::Mruv.Characters.CharacterID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PermanentCharacterKill, null, options, request);
      }
      /// <summary>
      /// Kill a character. A character that is killed cannot be played anymore.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Characters.CharacterID> PermanentCharacterKillAsync(global::Mruv.Characters.CharacterID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PermanentCharacterKillAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Kill a character. A character that is killed cannot be played anymore.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Characters.CharacterID> PermanentCharacterKillAsync(global::Mruv.Characters.CharacterID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PermanentCharacterKill, null, options, request);
      }
      /// <summary>
      /// Change player clothes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Characters.ChangeClothesResponse ChangeClothes(global::Mruv.Characters.ChangeClothesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangeClothes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Change player clothes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Characters.ChangeClothesResponse ChangeClothes(global::Mruv.Characters.ChangeClothesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChangeClothes, null, options, request);
      }
      /// <summary>
      /// Change player clothes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Characters.ChangeClothesResponse> ChangeClothesAsync(global::Mruv.Characters.ChangeClothesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangeClothesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Change player clothes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Characters.ChangeClothesResponse> ChangeClothesAsync(global::Mruv.Characters.ChangeClothesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChangeClothes, null, options, request);
      }
      /// <summary>
      /// Stream of deaths.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Characters.DeathStreamResponse> DeathsStream(global::Mruv.Characters.DeathStreamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeathsStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stream of deaths.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Characters.DeathStreamResponse> DeathsStream(global::Mruv.Characters.DeathStreamRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_DeathsStream, null, options, request);
      }
      /// <summary>
      ///Service status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.ServiceStatusResponse GetServiceStatus(global::Mruv.ServiceStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Service status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.ServiceStatusResponse GetServiceStatus(global::Mruv.ServiceStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServiceStatus, null, options, request);
      }
      /// <summary>
      ///Service status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.ServiceStatusResponse> GetServiceStatusAsync(global::Mruv.ServiceStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Service status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.ServiceStatusResponse> GetServiceStatusAsync(global::Mruv.ServiceStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServiceStatus, null, options, request);
      }
      public virtual global::Mruv.VersionResponse GetServiceVersion(global::Mruv.VersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.VersionResponse GetServiceVersion(global::Mruv.VersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServiceVersion, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.VersionResponse> GetServiceVersionAsync(global::Mruv.VersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.VersionResponse> GetServiceVersionAsync(global::Mruv.VersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServiceVersion, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MruVCharactersServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MruVCharactersServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MruVCharactersServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateCharacter, serviceImpl.CreateCharacter)
          .AddMethod(__Method_GetCharacter, serviceImpl.GetCharacter)
          .AddMethod(__Method_UpdateCharacter, serviceImpl.UpdateCharacter)
          .AddMethod(__Method_DeleteCharacter, serviceImpl.DeleteCharacter)
          .AddMethod(__Method_PermanentCharacterKill, serviceImpl.PermanentCharacterKill)
          .AddMethod(__Method_ChangeClothes, serviceImpl.ChangeClothes)
          .AddMethod(__Method_DeathsStream, serviceImpl.DeathsStream)
          .AddMethod(__Method_GetServiceStatus, serviceImpl.GetServiceStatus)
          .AddMethod(__Method_GetServiceVersion, serviceImpl.GetServiceVersion).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MruVCharactersServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateCharacter, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Characters.CreateCharacterRequest, global::Mruv.Characters.CreateCharacterResponse>(serviceImpl.CreateCharacter));
      serviceBinder.AddMethod(__Method_GetCharacter, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Characters.GetCharacterRequest, global::Mruv.Characters.GetCharacterResponse>(serviceImpl.GetCharacter));
      serviceBinder.AddMethod(__Method_UpdateCharacter, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Characters.UpdateCharacterRequest, global::Mruv.Characters.UpdateCharacterResponse>(serviceImpl.UpdateCharacter));
      serviceBinder.AddMethod(__Method_DeleteCharacter, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Characters.DeleteCharacterRequest, global::Mruv.Characters.DeleteCharacterResponse>(serviceImpl.DeleteCharacter));
      serviceBinder.AddMethod(__Method_PermanentCharacterKill, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Characters.CharacterID, global::Mruv.Characters.CharacterID>(serviceImpl.PermanentCharacterKill));
      serviceBinder.AddMethod(__Method_ChangeClothes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Characters.ChangeClothesRequest, global::Mruv.Characters.ChangeClothesResponse>(serviceImpl.ChangeClothes));
      serviceBinder.AddMethod(__Method_DeathsStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mruv.Characters.DeathStreamRequest, global::Mruv.Characters.DeathStreamResponse>(serviceImpl.DeathsStream));
      serviceBinder.AddMethod(__Method_GetServiceStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.ServiceStatusRequest, global::Mruv.ServiceStatusResponse>(serviceImpl.GetServiceStatus));
      serviceBinder.AddMethod(__Method_GetServiceVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.VersionRequest, global::Mruv.VersionResponse>(serviceImpl.GetServiceVersion));
    }

  }
}
#endregion
