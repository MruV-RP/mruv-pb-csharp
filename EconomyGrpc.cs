// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: economy/economy.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mruv.Economy {
  /// <summary>
  /// The MruV economy service provides procedures for managing prices and economy.
  /// </summary>
  public static partial class MruVEconomyService
  {
    static readonly string __ServiceName = "mruv.economy.MruVEconomyService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Mruv.Economy.RegisterProductRequest> __Marshaller_mruv_economy_RegisterProductRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Economy.RegisterProductRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Economy.RegisterProductResponse> __Marshaller_mruv_economy_RegisterProductResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Economy.RegisterProductResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Economy.GetProductRequest> __Marshaller_mruv_economy_GetProductRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Economy.GetProductRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Economy.GetProductResponse> __Marshaller_mruv_economy_GetProductResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Economy.GetProductResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Economy.UpdateProductRequest> __Marshaller_mruv_economy_UpdateProductRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Economy.UpdateProductRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Economy.UpdateProductResponse> __Marshaller_mruv_economy_UpdateProductResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Economy.UpdateProductResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Economy.DeleteProductRequest> __Marshaller_mruv_economy_DeleteProductRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Economy.DeleteProductRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Economy.DeleteProductResponse> __Marshaller_mruv_economy_DeleteProductResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Economy.DeleteProductResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Economy.UpdatePriceRequest> __Marshaller_mruv_economy_UpdatePriceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Economy.UpdatePriceRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Economy.UpdatePriceResponse> __Marshaller_mruv_economy_UpdatePriceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Economy.UpdatePriceResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Economy.GetPriceRequest> __Marshaller_mruv_economy_GetPriceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Economy.GetPriceRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Economy.GetPriceResponse> __Marshaller_mruv_economy_GetPriceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Economy.GetPriceResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Economy.BuyProductRequest> __Marshaller_mruv_economy_BuyProductRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Economy.BuyProductRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Economy.BuyProductResponse> __Marshaller_mruv_economy_BuyProductResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Economy.BuyProductResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Economy.WatchProductRequest> __Marshaller_mruv_economy_WatchProductRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Economy.WatchProductRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Economy.WatchProductResponse> __Marshaller_mruv_economy_WatchProductResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Economy.WatchProductResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Economy.WatchPriceRequest> __Marshaller_mruv_economy_WatchPriceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Economy.WatchPriceRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Economy.WatchPriceResponse> __Marshaller_mruv_economy_WatchPriceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Economy.WatchPriceResponse.Parser));

    static readonly grpc::Method<global::Mruv.Economy.RegisterProductRequest, global::Mruv.Economy.RegisterProductResponse> __Method_RegisterProduct = new grpc::Method<global::Mruv.Economy.RegisterProductRequest, global::Mruv.Economy.RegisterProductResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterProduct",
        __Marshaller_mruv_economy_RegisterProductRequest,
        __Marshaller_mruv_economy_RegisterProductResponse);

    static readonly grpc::Method<global::Mruv.Economy.GetProductRequest, global::Mruv.Economy.GetProductResponse> __Method_GetProduct = new grpc::Method<global::Mruv.Economy.GetProductRequest, global::Mruv.Economy.GetProductResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProduct",
        __Marshaller_mruv_economy_GetProductRequest,
        __Marshaller_mruv_economy_GetProductResponse);

    static readonly grpc::Method<global::Mruv.Economy.UpdateProductRequest, global::Mruv.Economy.UpdateProductResponse> __Method_UpdateProduct = new grpc::Method<global::Mruv.Economy.UpdateProductRequest, global::Mruv.Economy.UpdateProductResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateProduct",
        __Marshaller_mruv_economy_UpdateProductRequest,
        __Marshaller_mruv_economy_UpdateProductResponse);

    static readonly grpc::Method<global::Mruv.Economy.DeleteProductRequest, global::Mruv.Economy.DeleteProductResponse> __Method_DeleteProduct = new grpc::Method<global::Mruv.Economy.DeleteProductRequest, global::Mruv.Economy.DeleteProductResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteProduct",
        __Marshaller_mruv_economy_DeleteProductRequest,
        __Marshaller_mruv_economy_DeleteProductResponse);

    static readonly grpc::Method<global::Mruv.Economy.UpdatePriceRequest, global::Mruv.Economy.UpdatePriceResponse> __Method_UpdatePrice = new grpc::Method<global::Mruv.Economy.UpdatePriceRequest, global::Mruv.Economy.UpdatePriceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePrice",
        __Marshaller_mruv_economy_UpdatePriceRequest,
        __Marshaller_mruv_economy_UpdatePriceResponse);

    static readonly grpc::Method<global::Mruv.Economy.GetPriceRequest, global::Mruv.Economy.GetPriceResponse> __Method_GetPrice = new grpc::Method<global::Mruv.Economy.GetPriceRequest, global::Mruv.Economy.GetPriceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPrice",
        __Marshaller_mruv_economy_GetPriceRequest,
        __Marshaller_mruv_economy_GetPriceResponse);

    static readonly grpc::Method<global::Mruv.Economy.BuyProductRequest, global::Mruv.Economy.BuyProductResponse> __Method_BuyProduct = new grpc::Method<global::Mruv.Economy.BuyProductRequest, global::Mruv.Economy.BuyProductResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BuyProduct",
        __Marshaller_mruv_economy_BuyProductRequest,
        __Marshaller_mruv_economy_BuyProductResponse);

    static readonly grpc::Method<global::Mruv.Economy.WatchProductRequest, global::Mruv.Economy.WatchProductResponse> __Method_WatchProduct = new grpc::Method<global::Mruv.Economy.WatchProductRequest, global::Mruv.Economy.WatchProductResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "WatchProduct",
        __Marshaller_mruv_economy_WatchProductRequest,
        __Marshaller_mruv_economy_WatchProductResponse);

    static readonly grpc::Method<global::Mruv.Economy.WatchPriceRequest, global::Mruv.Economy.WatchPriceResponse> __Method_WatchPrice = new grpc::Method<global::Mruv.Economy.WatchPriceRequest, global::Mruv.Economy.WatchPriceResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "WatchPrice",
        __Marshaller_mruv_economy_WatchPriceRequest,
        __Marshaller_mruv_economy_WatchPriceResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mruv.Economy.EconomyReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MruVEconomyService</summary>
    [grpc::BindServiceMethod(typeof(MruVEconomyService), "BindService")]
    public abstract partial class MruVEconomyServiceBase
    {
      /// <summary>
      /// Register price in economy system.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.RegisterProductResponse> RegisterProduct(global::Mruv.Economy.RegisterProductRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get product information.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.GetProductResponse> GetProduct(global::Mruv.Economy.GetProductRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update product information.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.UpdateProductResponse> UpdateProduct(global::Mruv.Economy.UpdateProductRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.DeleteProductResponse> DeleteProduct(global::Mruv.Economy.DeleteProductRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update product price.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.UpdatePriceResponse> UpdatePrice(global::Mruv.Economy.UpdatePriceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get current value for registered price.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.GetPriceResponse> GetPrice(global::Mruv.Economy.GetPriceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Send information to the system, that the product has been purchased.
      /// This rpc call can affect a product price.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Economy.BuyProductResponse> BuyProduct(global::Mruv.Economy.BuyProductRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribe to events related to a product.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task WatchProduct(global::Mruv.Economy.WatchProductRequest request, grpc::IServerStreamWriter<global::Mruv.Economy.WatchProductResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribe to product price changes.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task WatchPrice(global::Mruv.Economy.WatchPriceRequest request, grpc::IServerStreamWriter<global::Mruv.Economy.WatchPriceResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MruVEconomyService</summary>
    public partial class MruVEconomyServiceClient : grpc::ClientBase<MruVEconomyServiceClient>
    {
      /// <summary>Creates a new client for MruVEconomyService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MruVEconomyServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MruVEconomyService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MruVEconomyServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MruVEconomyServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MruVEconomyServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Register price in economy system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.RegisterProductResponse RegisterProduct(global::Mruv.Economy.RegisterProductRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterProduct(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Register price in economy system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.RegisterProductResponse RegisterProduct(global::Mruv.Economy.RegisterProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterProduct, null, options, request);
      }
      /// <summary>
      /// Register price in economy system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.RegisterProductResponse> RegisterProductAsync(global::Mruv.Economy.RegisterProductRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterProductAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Register price in economy system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.RegisterProductResponse> RegisterProductAsync(global::Mruv.Economy.RegisterProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterProduct, null, options, request);
      }
      /// <summary>
      /// Get product information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.GetProductResponse GetProduct(global::Mruv.Economy.GetProductRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProduct(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get product information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.GetProductResponse GetProduct(global::Mruv.Economy.GetProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProduct, null, options, request);
      }
      /// <summary>
      /// Get product information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.GetProductResponse> GetProductAsync(global::Mruv.Economy.GetProductRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProductAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get product information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.GetProductResponse> GetProductAsync(global::Mruv.Economy.GetProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProduct, null, options, request);
      }
      /// <summary>
      /// Update product information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.UpdateProductResponse UpdateProduct(global::Mruv.Economy.UpdateProductRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateProduct(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update product information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.UpdateProductResponse UpdateProduct(global::Mruv.Economy.UpdateProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateProduct, null, options, request);
      }
      /// <summary>
      /// Update product information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.UpdateProductResponse> UpdateProductAsync(global::Mruv.Economy.UpdateProductRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateProductAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update product information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.UpdateProductResponse> UpdateProductAsync(global::Mruv.Economy.UpdateProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateProduct, null, options, request);
      }
      /// <summary>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.DeleteProductResponse DeleteProduct(global::Mruv.Economy.DeleteProductRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteProduct(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.DeleteProductResponse DeleteProduct(global::Mruv.Economy.DeleteProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteProduct, null, options, request);
      }
      /// <summary>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.DeleteProductResponse> DeleteProductAsync(global::Mruv.Economy.DeleteProductRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteProductAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.DeleteProductResponse> DeleteProductAsync(global::Mruv.Economy.DeleteProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteProduct, null, options, request);
      }
      /// <summary>
      /// Update product price.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.UpdatePriceResponse UpdatePrice(global::Mruv.Economy.UpdatePriceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePrice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update product price.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.UpdatePriceResponse UpdatePrice(global::Mruv.Economy.UpdatePriceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePrice, null, options, request);
      }
      /// <summary>
      /// Update product price.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.UpdatePriceResponse> UpdatePriceAsync(global::Mruv.Economy.UpdatePriceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePriceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update product price.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.UpdatePriceResponse> UpdatePriceAsync(global::Mruv.Economy.UpdatePriceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePrice, null, options, request);
      }
      /// <summary>
      /// Get current value for registered price.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.GetPriceResponse GetPrice(global::Mruv.Economy.GetPriceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPrice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get current value for registered price.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.GetPriceResponse GetPrice(global::Mruv.Economy.GetPriceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPrice, null, options, request);
      }
      /// <summary>
      /// Get current value for registered price.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.GetPriceResponse> GetPriceAsync(global::Mruv.Economy.GetPriceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPriceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get current value for registered price.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.GetPriceResponse> GetPriceAsync(global::Mruv.Economy.GetPriceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPrice, null, options, request);
      }
      /// <summary>
      /// Send information to the system, that the product has been purchased.
      /// This rpc call can affect a product price.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.BuyProductResponse BuyProduct(global::Mruv.Economy.BuyProductRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BuyProduct(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send information to the system, that the product has been purchased.
      /// This rpc call can affect a product price.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Economy.BuyProductResponse BuyProduct(global::Mruv.Economy.BuyProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BuyProduct, null, options, request);
      }
      /// <summary>
      /// Send information to the system, that the product has been purchased.
      /// This rpc call can affect a product price.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.BuyProductResponse> BuyProductAsync(global::Mruv.Economy.BuyProductRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BuyProductAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send information to the system, that the product has been purchased.
      /// This rpc call can affect a product price.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Economy.BuyProductResponse> BuyProductAsync(global::Mruv.Economy.BuyProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BuyProduct, null, options, request);
      }
      /// <summary>
      /// Subscribe to events related to a product.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.WatchProductResponse> WatchProduct(global::Mruv.Economy.WatchProductRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WatchProduct(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to events related to a product.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.WatchProductResponse> WatchProduct(global::Mruv.Economy.WatchProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_WatchProduct, null, options, request);
      }
      /// <summary>
      /// Subscribe to product price changes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.WatchPriceResponse> WatchPrice(global::Mruv.Economy.WatchPriceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WatchPrice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to product price changes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Economy.WatchPriceResponse> WatchPrice(global::Mruv.Economy.WatchPriceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_WatchPrice, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MruVEconomyServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MruVEconomyServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MruVEconomyServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RegisterProduct, serviceImpl.RegisterProduct)
          .AddMethod(__Method_GetProduct, serviceImpl.GetProduct)
          .AddMethod(__Method_UpdateProduct, serviceImpl.UpdateProduct)
          .AddMethod(__Method_DeleteProduct, serviceImpl.DeleteProduct)
          .AddMethod(__Method_UpdatePrice, serviceImpl.UpdatePrice)
          .AddMethod(__Method_GetPrice, serviceImpl.GetPrice)
          .AddMethod(__Method_BuyProduct, serviceImpl.BuyProduct)
          .AddMethod(__Method_WatchProduct, serviceImpl.WatchProduct)
          .AddMethod(__Method_WatchPrice, serviceImpl.WatchPrice).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MruVEconomyServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_RegisterProduct, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.RegisterProductRequest, global::Mruv.Economy.RegisterProductResponse>(serviceImpl.RegisterProduct));
      serviceBinder.AddMethod(__Method_GetProduct, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.GetProductRequest, global::Mruv.Economy.GetProductResponse>(serviceImpl.GetProduct));
      serviceBinder.AddMethod(__Method_UpdateProduct, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.UpdateProductRequest, global::Mruv.Economy.UpdateProductResponse>(serviceImpl.UpdateProduct));
      serviceBinder.AddMethod(__Method_DeleteProduct, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.DeleteProductRequest, global::Mruv.Economy.DeleteProductResponse>(serviceImpl.DeleteProduct));
      serviceBinder.AddMethod(__Method_UpdatePrice, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.UpdatePriceRequest, global::Mruv.Economy.UpdatePriceResponse>(serviceImpl.UpdatePrice));
      serviceBinder.AddMethod(__Method_GetPrice, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.GetPriceRequest, global::Mruv.Economy.GetPriceResponse>(serviceImpl.GetPrice));
      serviceBinder.AddMethod(__Method_BuyProduct, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Economy.BuyProductRequest, global::Mruv.Economy.BuyProductResponse>(serviceImpl.BuyProduct));
      serviceBinder.AddMethod(__Method_WatchProduct, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mruv.Economy.WatchProductRequest, global::Mruv.Economy.WatchProductResponse>(serviceImpl.WatchProduct));
      serviceBinder.AddMethod(__Method_WatchPrice, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mruv.Economy.WatchPriceRequest, global::Mruv.Economy.WatchPriceResponse>(serviceImpl.WatchPrice));
    }

  }
}
#endregion
