// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: items/items.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mruv {
  public static partial class MruVItemService
  {
    static readonly string __ServiceName = "mruv.MruVItemService";

    static readonly grpc::Marshaller<global::Mruv.Item> __Marshaller_mruv_Item = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Item.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.ItemID> __Marshaller_mruv_ItemID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.ItemID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetItemsRequest> __Marshaller_mruv_GetItemsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetItemsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetItemsResponse> __Marshaller_mruv_GetItemsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetItemsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.ItemType> __Marshaller_mruv_ItemType = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.ItemType.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.ItemTypeID> __Marshaller_mruv_ItemTypeID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.ItemTypeID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetItemTypesRequest> __Marshaller_mruv_GetItemTypesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetItemTypesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetItemTypesResponse> __Marshaller_mruv_GetItemTypesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetItemTypesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Container> __Marshaller_mruv_Container = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Container.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.ContainerID> __Marshaller_mruv_ContainerID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.ContainerID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetContainersRequest> __Marshaller_mruv_GetContainersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetContainersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetContainersResponse> __Marshaller_mruv_GetContainersResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetContainersResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.ContainerType> __Marshaller_mruv_ContainerType = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.ContainerType.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.ContainerTypeID> __Marshaller_mruv_ContainerTypeID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.ContainerTypeID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetContainerTypesRequest> __Marshaller_mruv_GetContainerTypesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetContainerTypesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetContainerItemsResponse> __Marshaller_mruv_GetContainerItemsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetContainerItemsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.RemoveItemRequest> __Marshaller_mruv_RemoveItemRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.RemoveItemRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.PutItemRequest> __Marshaller_mruv_PutItemRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.PutItemRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.SortItemsRequest> __Marshaller_mruv_SortItemsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.SortItemsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.SortItemsResponse> __Marshaller_mruv_SortItemsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.SortItemsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetNearestItemsRequest> __Marshaller_mruv_GetNearestItemsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetNearestItemsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetNearestItemsResponse> __Marshaller_mruv_GetNearestItemsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetNearestItemsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.UseItemRequest> __Marshaller_mruv_UseItemRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.UseItemRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.UseItemResponse> __Marshaller_mruv_UseItemResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.UseItemResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.ServiceStatusRequest> __Marshaller_mruv_ServiceStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.ServiceStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.ServiceStatusResponse> __Marshaller_mruv_ServiceStatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.ServiceStatusResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.VersionRequest> __Marshaller_mruv_VersionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.VersionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.VersionResponse> __Marshaller_mruv_VersionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.VersionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Mruv.Item, global::Mruv.ItemID> __Method_CreateItem = new grpc::Method<global::Mruv.Item, global::Mruv.ItemID>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateItem",
        __Marshaller_mruv_Item,
        __Marshaller_mruv_ItemID);

    static readonly grpc::Method<global::Mruv.ItemID, global::Mruv.Item> __Method_GetItem = new grpc::Method<global::Mruv.ItemID, global::Mruv.Item>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetItem",
        __Marshaller_mruv_ItemID,
        __Marshaller_mruv_Item);

    static readonly grpc::Method<global::Mruv.ItemID, global::Mruv.ItemID> __Method_DeleteItem = new grpc::Method<global::Mruv.ItemID, global::Mruv.ItemID>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteItem",
        __Marshaller_mruv_ItemID,
        __Marshaller_mruv_ItemID);

    static readonly grpc::Method<global::Mruv.GetItemsRequest, global::Mruv.GetItemsResponse> __Method_GetItems = new grpc::Method<global::Mruv.GetItemsRequest, global::Mruv.GetItemsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetItems",
        __Marshaller_mruv_GetItemsRequest,
        __Marshaller_mruv_GetItemsResponse);

    static readonly grpc::Method<global::Mruv.ItemType, global::Mruv.ItemTypeID> __Method_CreateItemType = new grpc::Method<global::Mruv.ItemType, global::Mruv.ItemTypeID>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateItemType",
        __Marshaller_mruv_ItemType,
        __Marshaller_mruv_ItemTypeID);

    static readonly grpc::Method<global::Mruv.ItemTypeID, global::Mruv.ItemType> __Method_GetItemType = new grpc::Method<global::Mruv.ItemTypeID, global::Mruv.ItemType>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetItemType",
        __Marshaller_mruv_ItemTypeID,
        __Marshaller_mruv_ItemType);

    static readonly grpc::Method<global::Mruv.ItemTypeID, global::Mruv.ItemTypeID> __Method_DeleteItemType = new grpc::Method<global::Mruv.ItemTypeID, global::Mruv.ItemTypeID>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteItemType",
        __Marshaller_mruv_ItemTypeID,
        __Marshaller_mruv_ItemTypeID);

    static readonly grpc::Method<global::Mruv.GetItemTypesRequest, global::Mruv.GetItemTypesResponse> __Method_GetItemTypes = new grpc::Method<global::Mruv.GetItemTypesRequest, global::Mruv.GetItemTypesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetItemTypes",
        __Marshaller_mruv_GetItemTypesRequest,
        __Marshaller_mruv_GetItemTypesResponse);

    static readonly grpc::Method<global::Mruv.Container, global::Mruv.ContainerID> __Method_CreateContainer = new grpc::Method<global::Mruv.Container, global::Mruv.ContainerID>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateContainer",
        __Marshaller_mruv_Container,
        __Marshaller_mruv_ContainerID);

    static readonly grpc::Method<global::Mruv.ContainerID, global::Mruv.Container> __Method_GetContainer = new grpc::Method<global::Mruv.ContainerID, global::Mruv.Container>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetContainer",
        __Marshaller_mruv_ContainerID,
        __Marshaller_mruv_Container);

    static readonly grpc::Method<global::Mruv.ContainerID, global::Mruv.ContainerID> __Method_DeleteContainer = new grpc::Method<global::Mruv.ContainerID, global::Mruv.ContainerID>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteContainer",
        __Marshaller_mruv_ContainerID,
        __Marshaller_mruv_ContainerID);

    static readonly grpc::Method<global::Mruv.GetContainersRequest, global::Mruv.GetContainersResponse> __Method_GetContainers = new grpc::Method<global::Mruv.GetContainersRequest, global::Mruv.GetContainersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetContainers",
        __Marshaller_mruv_GetContainersRequest,
        __Marshaller_mruv_GetContainersResponse);

    static readonly grpc::Method<global::Mruv.ContainerType, global::Mruv.ContainerTypeID> __Method_CreateContainerType = new grpc::Method<global::Mruv.ContainerType, global::Mruv.ContainerTypeID>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateContainerType",
        __Marshaller_mruv_ContainerType,
        __Marshaller_mruv_ContainerTypeID);

    static readonly grpc::Method<global::Mruv.ContainerTypeID, global::Mruv.ContainerType> __Method_GetContainerType = new grpc::Method<global::Mruv.ContainerTypeID, global::Mruv.ContainerType>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetContainerType",
        __Marshaller_mruv_ContainerTypeID,
        __Marshaller_mruv_ContainerType);

    static readonly grpc::Method<global::Mruv.ContainerTypeID, global::Mruv.ContainerTypeID> __Method_DeleteContainerType = new grpc::Method<global::Mruv.ContainerTypeID, global::Mruv.ContainerTypeID>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteContainerType",
        __Marshaller_mruv_ContainerTypeID,
        __Marshaller_mruv_ContainerTypeID);

    static readonly grpc::Method<global::Mruv.GetContainerTypesRequest, global::Mruv.ContainerType> __Method_GetContainerTypes = new grpc::Method<global::Mruv.GetContainerTypesRequest, global::Mruv.ContainerType>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetContainerTypes",
        __Marshaller_mruv_GetContainerTypesRequest,
        __Marshaller_mruv_ContainerType);

    static readonly grpc::Method<global::Mruv.ContainerID, global::Mruv.GetContainerItemsResponse> __Method_GetContainerItems = new grpc::Method<global::Mruv.ContainerID, global::Mruv.GetContainerItemsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetContainerItems",
        __Marshaller_mruv_ContainerID,
        __Marshaller_mruv_GetContainerItemsResponse);

    static readonly grpc::Method<global::Mruv.RemoveItemRequest, global::Mruv.Item> __Method_RemoveContainerItem = new grpc::Method<global::Mruv.RemoveItemRequest, global::Mruv.Item>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveContainerItem",
        __Marshaller_mruv_RemoveItemRequest,
        __Marshaller_mruv_Item);

    static readonly grpc::Method<global::Mruv.PutItemRequest, global::Mruv.ItemID> __Method_PutItem = new grpc::Method<global::Mruv.PutItemRequest, global::Mruv.ItemID>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutItem",
        __Marshaller_mruv_PutItemRequest,
        __Marshaller_mruv_ItemID);

    static readonly grpc::Method<global::Mruv.SortItemsRequest, global::Mruv.SortItemsResponse> __Method_SortItems = new grpc::Method<global::Mruv.SortItemsRequest, global::Mruv.SortItemsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SortItems",
        __Marshaller_mruv_SortItemsRequest,
        __Marshaller_mruv_SortItemsResponse);

    static readonly grpc::Method<global::Mruv.GetNearestItemsRequest, global::Mruv.GetNearestItemsResponse> __Method_GetNearestItems = new grpc::Method<global::Mruv.GetNearestItemsRequest, global::Mruv.GetNearestItemsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNearestItems",
        __Marshaller_mruv_GetNearestItemsRequest,
        __Marshaller_mruv_GetNearestItemsResponse);

    static readonly grpc::Method<global::Mruv.UseItemRequest, global::Mruv.UseItemResponse> __Method_UseItem = new grpc::Method<global::Mruv.UseItemRequest, global::Mruv.UseItemResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UseItem",
        __Marshaller_mruv_UseItemRequest,
        __Marshaller_mruv_UseItemResponse);

    static readonly grpc::Method<global::Mruv.ServiceStatusRequest, global::Mruv.ServiceStatusResponse> __Method_GetServiceStatus = new grpc::Method<global::Mruv.ServiceStatusRequest, global::Mruv.ServiceStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServiceStatus",
        __Marshaller_mruv_ServiceStatusRequest,
        __Marshaller_mruv_ServiceStatusResponse);

    static readonly grpc::Method<global::Mruv.VersionRequest, global::Mruv.VersionResponse> __Method_GetServiceVersion = new grpc::Method<global::Mruv.VersionRequest, global::Mruv.VersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServiceVersion",
        __Marshaller_mruv_VersionRequest,
        __Marshaller_mruv_VersionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mruv.ItemsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MruVItemService</summary>
    [grpc::BindServiceMethod(typeof(MruVItemService), "BindService")]
    public abstract partial class MruVItemServiceBase
    {
      /// <summary>
      ///CRUD items
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.ItemID> CreateItem(global::Mruv.Item request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.Item> GetItem(global::Mruv.ItemID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.ItemID> DeleteItem(global::Mruv.ItemID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.GetItemsResponse> GetItems(global::Mruv.GetItemsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///CRUD itemsTypes
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.ItemTypeID> CreateItemType(global::Mruv.ItemType request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.ItemType> GetItemType(global::Mruv.ItemTypeID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.ItemTypeID> DeleteItemType(global::Mruv.ItemTypeID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.GetItemTypesResponse> GetItemTypes(global::Mruv.GetItemTypesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///CRUD containers
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.ContainerID> CreateContainer(global::Mruv.Container request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.Container> GetContainer(global::Mruv.ContainerID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.ContainerID> DeleteContainer(global::Mruv.ContainerID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.GetContainersResponse> GetContainers(global::Mruv.GetContainersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///CRUD container types
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.ContainerTypeID> CreateContainerType(global::Mruv.ContainerType request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.ContainerType> GetContainerType(global::Mruv.ContainerTypeID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.ContainerTypeID> DeleteContainerType(global::Mruv.ContainerTypeID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetContainerTypes(global::Mruv.GetContainerTypesRequest request, grpc::IServerStreamWriter<global::Mruv.ContainerType> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Container Methods
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.GetContainerItemsResponse> GetContainerItems(global::Mruv.ContainerID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.Item> RemoveContainerItem(global::Mruv.RemoveItemRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.ItemID> PutItem(global::Mruv.PutItemRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///TODO: SortItemsStream
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.SortItemsResponse> SortItems(global::Mruv.SortItemsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///TODO: GetNearestItemsStream
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.GetNearestItemsResponse> GetNearestItems(global::Mruv.GetNearestItemsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.UseItemResponse> UseItem(global::Mruv.UseItemRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Service status
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.ServiceStatusResponse> GetServiceStatus(global::Mruv.ServiceStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.VersionResponse> GetServiceVersion(global::Mruv.VersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MruVItemService</summary>
    public partial class MruVItemServiceClient : grpc::ClientBase<MruVItemServiceClient>
    {
      /// <summary>Creates a new client for MruVItemService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MruVItemServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MruVItemService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MruVItemServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MruVItemServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MruVItemServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///CRUD items
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.ItemID CreateItem(global::Mruv.Item request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///CRUD items
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.ItemID CreateItem(global::Mruv.Item request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateItem, null, options, request);
      }
      /// <summary>
      ///CRUD items
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.ItemID> CreateItemAsync(global::Mruv.Item request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///CRUD items
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.ItemID> CreateItemAsync(global::Mruv.Item request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateItem, null, options, request);
      }
      public virtual global::Mruv.Item GetItem(global::Mruv.ItemID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.Item GetItem(global::Mruv.ItemID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetItem, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.Item> GetItemAsync(global::Mruv.ItemID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.Item> GetItemAsync(global::Mruv.ItemID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetItem, null, options, request);
      }
      public virtual global::Mruv.ItemID DeleteItem(global::Mruv.ItemID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.ItemID DeleteItem(global::Mruv.ItemID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteItem, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.ItemID> DeleteItemAsync(global::Mruv.ItemID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.ItemID> DeleteItemAsync(global::Mruv.ItemID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteItem, null, options, request);
      }
      public virtual global::Mruv.GetItemsResponse GetItems(global::Mruv.GetItemsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetItems(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.GetItemsResponse GetItems(global::Mruv.GetItemsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetItems, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetItemsResponse> GetItemsAsync(global::Mruv.GetItemsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetItemsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetItemsResponse> GetItemsAsync(global::Mruv.GetItemsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetItems, null, options, request);
      }
      /// <summary>
      ///CRUD itemsTypes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.ItemTypeID CreateItemType(global::Mruv.ItemType request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateItemType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///CRUD itemsTypes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.ItemTypeID CreateItemType(global::Mruv.ItemType request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateItemType, null, options, request);
      }
      /// <summary>
      ///CRUD itemsTypes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.ItemTypeID> CreateItemTypeAsync(global::Mruv.ItemType request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateItemTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///CRUD itemsTypes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.ItemTypeID> CreateItemTypeAsync(global::Mruv.ItemType request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateItemType, null, options, request);
      }
      public virtual global::Mruv.ItemType GetItemType(global::Mruv.ItemTypeID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetItemType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.ItemType GetItemType(global::Mruv.ItemTypeID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetItemType, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.ItemType> GetItemTypeAsync(global::Mruv.ItemTypeID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetItemTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.ItemType> GetItemTypeAsync(global::Mruv.ItemTypeID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetItemType, null, options, request);
      }
      public virtual global::Mruv.ItemTypeID DeleteItemType(global::Mruv.ItemTypeID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteItemType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.ItemTypeID DeleteItemType(global::Mruv.ItemTypeID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteItemType, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.ItemTypeID> DeleteItemTypeAsync(global::Mruv.ItemTypeID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteItemTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.ItemTypeID> DeleteItemTypeAsync(global::Mruv.ItemTypeID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteItemType, null, options, request);
      }
      public virtual global::Mruv.GetItemTypesResponse GetItemTypes(global::Mruv.GetItemTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetItemTypes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.GetItemTypesResponse GetItemTypes(global::Mruv.GetItemTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetItemTypes, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetItemTypesResponse> GetItemTypesAsync(global::Mruv.GetItemTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetItemTypesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetItemTypesResponse> GetItemTypesAsync(global::Mruv.GetItemTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetItemTypes, null, options, request);
      }
      /// <summary>
      ///CRUD containers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.ContainerID CreateContainer(global::Mruv.Container request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateContainer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///CRUD containers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.ContainerID CreateContainer(global::Mruv.Container request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateContainer, null, options, request);
      }
      /// <summary>
      ///CRUD containers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.ContainerID> CreateContainerAsync(global::Mruv.Container request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateContainerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///CRUD containers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.ContainerID> CreateContainerAsync(global::Mruv.Container request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateContainer, null, options, request);
      }
      public virtual global::Mruv.Container GetContainer(global::Mruv.ContainerID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContainer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.Container GetContainer(global::Mruv.ContainerID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetContainer, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.Container> GetContainerAsync(global::Mruv.ContainerID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContainerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.Container> GetContainerAsync(global::Mruv.ContainerID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetContainer, null, options, request);
      }
      public virtual global::Mruv.ContainerID DeleteContainer(global::Mruv.ContainerID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteContainer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.ContainerID DeleteContainer(global::Mruv.ContainerID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteContainer, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.ContainerID> DeleteContainerAsync(global::Mruv.ContainerID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteContainerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.ContainerID> DeleteContainerAsync(global::Mruv.ContainerID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteContainer, null, options, request);
      }
      public virtual global::Mruv.GetContainersResponse GetContainers(global::Mruv.GetContainersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContainers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.GetContainersResponse GetContainers(global::Mruv.GetContainersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetContainers, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetContainersResponse> GetContainersAsync(global::Mruv.GetContainersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContainersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetContainersResponse> GetContainersAsync(global::Mruv.GetContainersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetContainers, null, options, request);
      }
      /// <summary>
      ///CRUD container types
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.ContainerTypeID CreateContainerType(global::Mruv.ContainerType request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateContainerType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///CRUD container types
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.ContainerTypeID CreateContainerType(global::Mruv.ContainerType request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateContainerType, null, options, request);
      }
      /// <summary>
      ///CRUD container types
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.ContainerTypeID> CreateContainerTypeAsync(global::Mruv.ContainerType request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateContainerTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///CRUD container types
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.ContainerTypeID> CreateContainerTypeAsync(global::Mruv.ContainerType request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateContainerType, null, options, request);
      }
      public virtual global::Mruv.ContainerType GetContainerType(global::Mruv.ContainerTypeID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContainerType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.ContainerType GetContainerType(global::Mruv.ContainerTypeID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetContainerType, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.ContainerType> GetContainerTypeAsync(global::Mruv.ContainerTypeID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContainerTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.ContainerType> GetContainerTypeAsync(global::Mruv.ContainerTypeID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetContainerType, null, options, request);
      }
      public virtual global::Mruv.ContainerTypeID DeleteContainerType(global::Mruv.ContainerTypeID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteContainerType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.ContainerTypeID DeleteContainerType(global::Mruv.ContainerTypeID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteContainerType, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.ContainerTypeID> DeleteContainerTypeAsync(global::Mruv.ContainerTypeID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteContainerTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.ContainerTypeID> DeleteContainerTypeAsync(global::Mruv.ContainerTypeID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteContainerType, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.ContainerType> GetContainerTypes(global::Mruv.GetContainerTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContainerTypes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.ContainerType> GetContainerTypes(global::Mruv.GetContainerTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetContainerTypes, null, options, request);
      }
      /// <summary>
      ///Container Methods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.GetContainerItemsResponse GetContainerItems(global::Mruv.ContainerID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContainerItems(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Container Methods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.GetContainerItemsResponse GetContainerItems(global::Mruv.ContainerID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetContainerItems, null, options, request);
      }
      /// <summary>
      ///Container Methods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetContainerItemsResponse> GetContainerItemsAsync(global::Mruv.ContainerID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContainerItemsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Container Methods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetContainerItemsResponse> GetContainerItemsAsync(global::Mruv.ContainerID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetContainerItems, null, options, request);
      }
      public virtual global::Mruv.Item RemoveContainerItem(global::Mruv.RemoveItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveContainerItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.Item RemoveContainerItem(global::Mruv.RemoveItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveContainerItem, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.Item> RemoveContainerItemAsync(global::Mruv.RemoveItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveContainerItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.Item> RemoveContainerItemAsync(global::Mruv.RemoveItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveContainerItem, null, options, request);
      }
      public virtual global::Mruv.ItemID PutItem(global::Mruv.PutItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.ItemID PutItem(global::Mruv.PutItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutItem, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.ItemID> PutItemAsync(global::Mruv.PutItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.ItemID> PutItemAsync(global::Mruv.PutItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutItem, null, options, request);
      }
      /// <summary>
      ///TODO: SortItemsStream
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.SortItemsResponse SortItems(global::Mruv.SortItemsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SortItems(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///TODO: SortItemsStream
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.SortItemsResponse SortItems(global::Mruv.SortItemsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SortItems, null, options, request);
      }
      /// <summary>
      ///TODO: SortItemsStream
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.SortItemsResponse> SortItemsAsync(global::Mruv.SortItemsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SortItemsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///TODO: SortItemsStream
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.SortItemsResponse> SortItemsAsync(global::Mruv.SortItemsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SortItems, null, options, request);
      }
      /// <summary>
      ///TODO: GetNearestItemsStream
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.GetNearestItemsResponse GetNearestItems(global::Mruv.GetNearestItemsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNearestItems(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///TODO: GetNearestItemsStream
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.GetNearestItemsResponse GetNearestItems(global::Mruv.GetNearestItemsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNearestItems, null, options, request);
      }
      /// <summary>
      ///TODO: GetNearestItemsStream
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetNearestItemsResponse> GetNearestItemsAsync(global::Mruv.GetNearestItemsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNearestItemsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///TODO: GetNearestItemsStream
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetNearestItemsResponse> GetNearestItemsAsync(global::Mruv.GetNearestItemsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNearestItems, null, options, request);
      }
      public virtual global::Mruv.UseItemResponse UseItem(global::Mruv.UseItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UseItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.UseItemResponse UseItem(global::Mruv.UseItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UseItem, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.UseItemResponse> UseItemAsync(global::Mruv.UseItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UseItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.UseItemResponse> UseItemAsync(global::Mruv.UseItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UseItem, null, options, request);
      }
      /// <summary>
      ///Service status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.ServiceStatusResponse GetServiceStatus(global::Mruv.ServiceStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Service status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.ServiceStatusResponse GetServiceStatus(global::Mruv.ServiceStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServiceStatus, null, options, request);
      }
      /// <summary>
      ///Service status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.ServiceStatusResponse> GetServiceStatusAsync(global::Mruv.ServiceStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Service status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.ServiceStatusResponse> GetServiceStatusAsync(global::Mruv.ServiceStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServiceStatus, null, options, request);
      }
      public virtual global::Mruv.VersionResponse GetServiceVersion(global::Mruv.VersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.VersionResponse GetServiceVersion(global::Mruv.VersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServiceVersion, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.VersionResponse> GetServiceVersionAsync(global::Mruv.VersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.VersionResponse> GetServiceVersionAsync(global::Mruv.VersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServiceVersion, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MruVItemServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MruVItemServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MruVItemServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateItem, serviceImpl.CreateItem)
          .AddMethod(__Method_GetItem, serviceImpl.GetItem)
          .AddMethod(__Method_DeleteItem, serviceImpl.DeleteItem)
          .AddMethod(__Method_GetItems, serviceImpl.GetItems)
          .AddMethod(__Method_CreateItemType, serviceImpl.CreateItemType)
          .AddMethod(__Method_GetItemType, serviceImpl.GetItemType)
          .AddMethod(__Method_DeleteItemType, serviceImpl.DeleteItemType)
          .AddMethod(__Method_GetItemTypes, serviceImpl.GetItemTypes)
          .AddMethod(__Method_CreateContainer, serviceImpl.CreateContainer)
          .AddMethod(__Method_GetContainer, serviceImpl.GetContainer)
          .AddMethod(__Method_DeleteContainer, serviceImpl.DeleteContainer)
          .AddMethod(__Method_GetContainers, serviceImpl.GetContainers)
          .AddMethod(__Method_CreateContainerType, serviceImpl.CreateContainerType)
          .AddMethod(__Method_GetContainerType, serviceImpl.GetContainerType)
          .AddMethod(__Method_DeleteContainerType, serviceImpl.DeleteContainerType)
          .AddMethod(__Method_GetContainerTypes, serviceImpl.GetContainerTypes)
          .AddMethod(__Method_GetContainerItems, serviceImpl.GetContainerItems)
          .AddMethod(__Method_RemoveContainerItem, serviceImpl.RemoveContainerItem)
          .AddMethod(__Method_PutItem, serviceImpl.PutItem)
          .AddMethod(__Method_SortItems, serviceImpl.SortItems)
          .AddMethod(__Method_GetNearestItems, serviceImpl.GetNearestItems)
          .AddMethod(__Method_UseItem, serviceImpl.UseItem)
          .AddMethod(__Method_GetServiceStatus, serviceImpl.GetServiceStatus)
          .AddMethod(__Method_GetServiceVersion, serviceImpl.GetServiceVersion).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MruVItemServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateItem, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Item, global::Mruv.ItemID>(serviceImpl.CreateItem));
      serviceBinder.AddMethod(__Method_GetItem, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.ItemID, global::Mruv.Item>(serviceImpl.GetItem));
      serviceBinder.AddMethod(__Method_DeleteItem, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.ItemID, global::Mruv.ItemID>(serviceImpl.DeleteItem));
      serviceBinder.AddMethod(__Method_GetItems, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.GetItemsRequest, global::Mruv.GetItemsResponse>(serviceImpl.GetItems));
      serviceBinder.AddMethod(__Method_CreateItemType, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.ItemType, global::Mruv.ItemTypeID>(serviceImpl.CreateItemType));
      serviceBinder.AddMethod(__Method_GetItemType, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.ItemTypeID, global::Mruv.ItemType>(serviceImpl.GetItemType));
      serviceBinder.AddMethod(__Method_DeleteItemType, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.ItemTypeID, global::Mruv.ItemTypeID>(serviceImpl.DeleteItemType));
      serviceBinder.AddMethod(__Method_GetItemTypes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.GetItemTypesRequest, global::Mruv.GetItemTypesResponse>(serviceImpl.GetItemTypes));
      serviceBinder.AddMethod(__Method_CreateContainer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Container, global::Mruv.ContainerID>(serviceImpl.CreateContainer));
      serviceBinder.AddMethod(__Method_GetContainer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.ContainerID, global::Mruv.Container>(serviceImpl.GetContainer));
      serviceBinder.AddMethod(__Method_DeleteContainer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.ContainerID, global::Mruv.ContainerID>(serviceImpl.DeleteContainer));
      serviceBinder.AddMethod(__Method_GetContainers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.GetContainersRequest, global::Mruv.GetContainersResponse>(serviceImpl.GetContainers));
      serviceBinder.AddMethod(__Method_CreateContainerType, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.ContainerType, global::Mruv.ContainerTypeID>(serviceImpl.CreateContainerType));
      serviceBinder.AddMethod(__Method_GetContainerType, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.ContainerTypeID, global::Mruv.ContainerType>(serviceImpl.GetContainerType));
      serviceBinder.AddMethod(__Method_DeleteContainerType, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.ContainerTypeID, global::Mruv.ContainerTypeID>(serviceImpl.DeleteContainerType));
      serviceBinder.AddMethod(__Method_GetContainerTypes, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mruv.GetContainerTypesRequest, global::Mruv.ContainerType>(serviceImpl.GetContainerTypes));
      serviceBinder.AddMethod(__Method_GetContainerItems, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.ContainerID, global::Mruv.GetContainerItemsResponse>(serviceImpl.GetContainerItems));
      serviceBinder.AddMethod(__Method_RemoveContainerItem, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.RemoveItemRequest, global::Mruv.Item>(serviceImpl.RemoveContainerItem));
      serviceBinder.AddMethod(__Method_PutItem, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.PutItemRequest, global::Mruv.ItemID>(serviceImpl.PutItem));
      serviceBinder.AddMethod(__Method_SortItems, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.SortItemsRequest, global::Mruv.SortItemsResponse>(serviceImpl.SortItems));
      serviceBinder.AddMethod(__Method_GetNearestItems, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.GetNearestItemsRequest, global::Mruv.GetNearestItemsResponse>(serviceImpl.GetNearestItems));
      serviceBinder.AddMethod(__Method_UseItem, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.UseItemRequest, global::Mruv.UseItemResponse>(serviceImpl.UseItem));
      serviceBinder.AddMethod(__Method_GetServiceStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.ServiceStatusRequest, global::Mruv.ServiceStatusResponse>(serviceImpl.GetServiceStatus));
      serviceBinder.AddMethod(__Method_GetServiceVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.VersionRequest, global::Mruv.VersionResponse>(serviceImpl.GetServiceVersion));
    }

  }
}
#endregion
