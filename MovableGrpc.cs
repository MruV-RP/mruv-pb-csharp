// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: objects/movable.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mruv.Objects {
  /// <summary>
  ///The MruV objects service provides procedures for movable game objects.
  /// </summary>
  public static partial class MruVMovableObjectsService
  {
    static readonly string __ServiceName = "mruv.objects.MruVMovableObjectsService";

    static readonly grpc::Marshaller<global::Mruv.Objects.CreateMovableObjectRequest> __Marshaller_mruv_objects_CreateMovableObjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.CreateMovableObjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.CreateMovableObjectResponse> __Marshaller_mruv_objects_CreateMovableObjectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.CreateMovableObjectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.GetMovableObjectRequest> __Marshaller_mruv_objects_GetMovableObjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.GetMovableObjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.GetMovableObjectResponse> __Marshaller_mruv_objects_GetMovableObjectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.GetMovableObjectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.UpdateMovableObjectRequest> __Marshaller_mruv_objects_UpdateMovableObjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.UpdateMovableObjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.UpdateMovableObjectResponse> __Marshaller_mruv_objects_UpdateMovableObjectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.UpdateMovableObjectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.DeleteMovableObjectRequest> __Marshaller_mruv_objects_DeleteMovableObjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.DeleteMovableObjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.DeleteMovableObjectResponse> __Marshaller_mruv_objects_DeleteMovableObjectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.DeleteMovableObjectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.MoveObjectRequest> __Marshaller_mruv_objects_MoveObjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.MoveObjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.MoveObjectResponse> __Marshaller_mruv_objects_MoveObjectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.MoveObjectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.MoveObjectNextRequest> __Marshaller_mruv_objects_MoveObjectNextRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.MoveObjectNextRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.MoveObjectNextResponse> __Marshaller_mruv_objects_MoveObjectNextResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.MoveObjectNextResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.MoveObjectPreviousRequest> __Marshaller_mruv_objects_MoveObjectPreviousRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.MoveObjectPreviousRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.MoveObjectPreviousResponse> __Marshaller_mruv_objects_MoveObjectPreviousResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.MoveObjectPreviousResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Mruv.Objects.CreateMovableObjectRequest, global::Mruv.Objects.CreateMovableObjectResponse> __Method_CreateMovableObject = new grpc::Method<global::Mruv.Objects.CreateMovableObjectRequest, global::Mruv.Objects.CreateMovableObjectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateMovableObject",
        __Marshaller_mruv_objects_CreateMovableObjectRequest,
        __Marshaller_mruv_objects_CreateMovableObjectResponse);

    static readonly grpc::Method<global::Mruv.Objects.GetMovableObjectRequest, global::Mruv.Objects.GetMovableObjectResponse> __Method_GetMovableObject = new grpc::Method<global::Mruv.Objects.GetMovableObjectRequest, global::Mruv.Objects.GetMovableObjectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMovableObject",
        __Marshaller_mruv_objects_GetMovableObjectRequest,
        __Marshaller_mruv_objects_GetMovableObjectResponse);

    static readonly grpc::Method<global::Mruv.Objects.UpdateMovableObjectRequest, global::Mruv.Objects.UpdateMovableObjectResponse> __Method_UpdateMovableObject = new grpc::Method<global::Mruv.Objects.UpdateMovableObjectRequest, global::Mruv.Objects.UpdateMovableObjectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateMovableObject",
        __Marshaller_mruv_objects_UpdateMovableObjectRequest,
        __Marshaller_mruv_objects_UpdateMovableObjectResponse);

    static readonly grpc::Method<global::Mruv.Objects.DeleteMovableObjectRequest, global::Mruv.Objects.DeleteMovableObjectResponse> __Method_DeleteMovableObject = new grpc::Method<global::Mruv.Objects.DeleteMovableObjectRequest, global::Mruv.Objects.DeleteMovableObjectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteMovableObject",
        __Marshaller_mruv_objects_DeleteMovableObjectRequest,
        __Marshaller_mruv_objects_DeleteMovableObjectResponse);

    static readonly grpc::Method<global::Mruv.Objects.MoveObjectRequest, global::Mruv.Objects.MoveObjectResponse> __Method_MoveObject = new grpc::Method<global::Mruv.Objects.MoveObjectRequest, global::Mruv.Objects.MoveObjectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MoveObject",
        __Marshaller_mruv_objects_MoveObjectRequest,
        __Marshaller_mruv_objects_MoveObjectResponse);

    static readonly grpc::Method<global::Mruv.Objects.MoveObjectNextRequest, global::Mruv.Objects.MoveObjectNextResponse> __Method_MoveObjectNext = new grpc::Method<global::Mruv.Objects.MoveObjectNextRequest, global::Mruv.Objects.MoveObjectNextResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MoveObjectNext",
        __Marshaller_mruv_objects_MoveObjectNextRequest,
        __Marshaller_mruv_objects_MoveObjectNextResponse);

    static readonly grpc::Method<global::Mruv.Objects.MoveObjectPreviousRequest, global::Mruv.Objects.MoveObjectPreviousResponse> __Method_MoveObjectPrevious = new grpc::Method<global::Mruv.Objects.MoveObjectPreviousRequest, global::Mruv.Objects.MoveObjectPreviousResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MoveObjectPrevious",
        __Marshaller_mruv_objects_MoveObjectPreviousRequest,
        __Marshaller_mruv_objects_MoveObjectPreviousResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mruv.Objects.MovableReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MruVMovableObjectsService</summary>
    [grpc::BindServiceMethod(typeof(MruVMovableObjectsService), "BindService")]
    public abstract partial class MruVMovableObjectsServiceBase
    {
      /// <summary>
      /// Create a movable object.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.CreateMovableObjectResponse> CreateMovableObject(global::Mruv.Objects.CreateMovableObjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a movable object.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.GetMovableObjectResponse> GetMovableObject(global::Mruv.Objects.GetMovableObjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a movable object.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.UpdateMovableObjectResponse> UpdateMovableObject(global::Mruv.Objects.UpdateMovableObjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a movable object.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.DeleteMovableObjectResponse> DeleteMovableObject(global::Mruv.Objects.DeleteMovableObjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Move an object to other state.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.MoveObjectResponse> MoveObject(global::Mruv.Objects.MoveObjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Move an object to next state.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.MoveObjectNextResponse> MoveObjectNext(global::Mruv.Objects.MoveObjectNextRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Move an object to previous state.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.MoveObjectPreviousResponse> MoveObjectPrevious(global::Mruv.Objects.MoveObjectPreviousRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MruVMovableObjectsService</summary>
    public partial class MruVMovableObjectsServiceClient : grpc::ClientBase<MruVMovableObjectsServiceClient>
    {
      /// <summary>Creates a new client for MruVMovableObjectsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MruVMovableObjectsServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MruVMovableObjectsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MruVMovableObjectsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MruVMovableObjectsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MruVMovableObjectsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a movable object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.CreateMovableObjectResponse CreateMovableObject(global::Mruv.Objects.CreateMovableObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMovableObject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a movable object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.CreateMovableObjectResponse CreateMovableObject(global::Mruv.Objects.CreateMovableObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateMovableObject, null, options, request);
      }
      /// <summary>
      /// Create a movable object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.CreateMovableObjectResponse> CreateMovableObjectAsync(global::Mruv.Objects.CreateMovableObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMovableObjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a movable object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.CreateMovableObjectResponse> CreateMovableObjectAsync(global::Mruv.Objects.CreateMovableObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateMovableObject, null, options, request);
      }
      /// <summary>
      /// Get a movable object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.GetMovableObjectResponse GetMovableObject(global::Mruv.Objects.GetMovableObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMovableObject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a movable object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.GetMovableObjectResponse GetMovableObject(global::Mruv.Objects.GetMovableObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMovableObject, null, options, request);
      }
      /// <summary>
      /// Get a movable object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.GetMovableObjectResponse> GetMovableObjectAsync(global::Mruv.Objects.GetMovableObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMovableObjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a movable object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.GetMovableObjectResponse> GetMovableObjectAsync(global::Mruv.Objects.GetMovableObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMovableObject, null, options, request);
      }
      /// <summary>
      /// Update a movable object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.UpdateMovableObjectResponse UpdateMovableObject(global::Mruv.Objects.UpdateMovableObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMovableObject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a movable object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.UpdateMovableObjectResponse UpdateMovableObject(global::Mruv.Objects.UpdateMovableObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateMovableObject, null, options, request);
      }
      /// <summary>
      /// Update a movable object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.UpdateMovableObjectResponse> UpdateMovableObjectAsync(global::Mruv.Objects.UpdateMovableObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMovableObjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a movable object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.UpdateMovableObjectResponse> UpdateMovableObjectAsync(global::Mruv.Objects.UpdateMovableObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateMovableObject, null, options, request);
      }
      /// <summary>
      /// Delete a movable object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.DeleteMovableObjectResponse DeleteMovableObject(global::Mruv.Objects.DeleteMovableObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMovableObject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a movable object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.DeleteMovableObjectResponse DeleteMovableObject(global::Mruv.Objects.DeleteMovableObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteMovableObject, null, options, request);
      }
      /// <summary>
      /// Delete a movable object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.DeleteMovableObjectResponse> DeleteMovableObjectAsync(global::Mruv.Objects.DeleteMovableObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMovableObjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a movable object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.DeleteMovableObjectResponse> DeleteMovableObjectAsync(global::Mruv.Objects.DeleteMovableObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteMovableObject, null, options, request);
      }
      /// <summary>
      /// Move an object to other state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.MoveObjectResponse MoveObject(global::Mruv.Objects.MoveObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveObject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Move an object to other state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.MoveObjectResponse MoveObject(global::Mruv.Objects.MoveObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MoveObject, null, options, request);
      }
      /// <summary>
      /// Move an object to other state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.MoveObjectResponse> MoveObjectAsync(global::Mruv.Objects.MoveObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveObjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Move an object to other state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.MoveObjectResponse> MoveObjectAsync(global::Mruv.Objects.MoveObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MoveObject, null, options, request);
      }
      /// <summary>
      /// Move an object to next state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.MoveObjectNextResponse MoveObjectNext(global::Mruv.Objects.MoveObjectNextRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveObjectNext(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Move an object to next state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.MoveObjectNextResponse MoveObjectNext(global::Mruv.Objects.MoveObjectNextRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MoveObjectNext, null, options, request);
      }
      /// <summary>
      /// Move an object to next state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.MoveObjectNextResponse> MoveObjectNextAsync(global::Mruv.Objects.MoveObjectNextRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveObjectNextAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Move an object to next state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.MoveObjectNextResponse> MoveObjectNextAsync(global::Mruv.Objects.MoveObjectNextRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MoveObjectNext, null, options, request);
      }
      /// <summary>
      /// Move an object to previous state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.MoveObjectPreviousResponse MoveObjectPrevious(global::Mruv.Objects.MoveObjectPreviousRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveObjectPrevious(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Move an object to previous state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.MoveObjectPreviousResponse MoveObjectPrevious(global::Mruv.Objects.MoveObjectPreviousRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MoveObjectPrevious, null, options, request);
      }
      /// <summary>
      /// Move an object to previous state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.MoveObjectPreviousResponse> MoveObjectPreviousAsync(global::Mruv.Objects.MoveObjectPreviousRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveObjectPreviousAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Move an object to previous state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.MoveObjectPreviousResponse> MoveObjectPreviousAsync(global::Mruv.Objects.MoveObjectPreviousRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MoveObjectPrevious, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MruVMovableObjectsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MruVMovableObjectsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MruVMovableObjectsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateMovableObject, serviceImpl.CreateMovableObject)
          .AddMethod(__Method_GetMovableObject, serviceImpl.GetMovableObject)
          .AddMethod(__Method_UpdateMovableObject, serviceImpl.UpdateMovableObject)
          .AddMethod(__Method_DeleteMovableObject, serviceImpl.DeleteMovableObject)
          .AddMethod(__Method_MoveObject, serviceImpl.MoveObject)
          .AddMethod(__Method_MoveObjectNext, serviceImpl.MoveObjectNext)
          .AddMethod(__Method_MoveObjectPrevious, serviceImpl.MoveObjectPrevious).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MruVMovableObjectsServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateMovableObject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.CreateMovableObjectRequest, global::Mruv.Objects.CreateMovableObjectResponse>(serviceImpl.CreateMovableObject));
      serviceBinder.AddMethod(__Method_GetMovableObject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.GetMovableObjectRequest, global::Mruv.Objects.GetMovableObjectResponse>(serviceImpl.GetMovableObject));
      serviceBinder.AddMethod(__Method_UpdateMovableObject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.UpdateMovableObjectRequest, global::Mruv.Objects.UpdateMovableObjectResponse>(serviceImpl.UpdateMovableObject));
      serviceBinder.AddMethod(__Method_DeleteMovableObject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.DeleteMovableObjectRequest, global::Mruv.Objects.DeleteMovableObjectResponse>(serviceImpl.DeleteMovableObject));
      serviceBinder.AddMethod(__Method_MoveObject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.MoveObjectRequest, global::Mruv.Objects.MoveObjectResponse>(serviceImpl.MoveObject));
      serviceBinder.AddMethod(__Method_MoveObjectNext, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.MoveObjectNextRequest, global::Mruv.Objects.MoveObjectNextResponse>(serviceImpl.MoveObjectNext));
      serviceBinder.AddMethod(__Method_MoveObjectPrevious, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.MoveObjectPreviousRequest, global::Mruv.Objects.MoveObjectPreviousResponse>(serviceImpl.MoveObjectPrevious));
    }

  }
}
#endregion
