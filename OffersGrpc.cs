// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: offers/offers.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mruv.Offers {
  /// <summary>
  /// The MruV offers service.
  /// </summary>
  public static partial class MruVOffersService
  {
    static readonly string __ServiceName = "mruv.offers.MruVOffersService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Mruv.Offers.CreateOfferRequest> __Marshaller_mruv_offers_CreateOfferRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Offers.CreateOfferRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Offers.CreateOfferResponse> __Marshaller_mruv_offers_CreateOfferResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Offers.CreateOfferResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Offers.GetOfferRequest> __Marshaller_mruv_offers_GetOfferRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Offers.GetOfferRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Offers.GetOfferResponse> __Marshaller_mruv_offers_GetOfferResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Offers.GetOfferResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Offers.UpdateOfferRequest> __Marshaller_mruv_offers_UpdateOfferRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Offers.UpdateOfferRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Offers.UpdateOfferResponse> __Marshaller_mruv_offers_UpdateOfferResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Offers.UpdateOfferResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Offers.DeleteOfferRequest> __Marshaller_mruv_offers_DeleteOfferRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Offers.DeleteOfferRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Offers.DeleteOfferResponse> __Marshaller_mruv_offers_DeleteOfferResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Offers.DeleteOfferResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Offers.AcceptOfferRequest> __Marshaller_mruv_offers_AcceptOfferRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Offers.AcceptOfferRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Offers.AcceptOfferResponse> __Marshaller_mruv_offers_AcceptOfferResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Offers.AcceptOfferResponse.Parser));

    static readonly grpc::Method<global::Mruv.Offers.CreateOfferRequest, global::Mruv.Offers.CreateOfferResponse> __Method_CreateOffer = new grpc::Method<global::Mruv.Offers.CreateOfferRequest, global::Mruv.Offers.CreateOfferResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateOffer",
        __Marshaller_mruv_offers_CreateOfferRequest,
        __Marshaller_mruv_offers_CreateOfferResponse);

    static readonly grpc::Method<global::Mruv.Offers.GetOfferRequest, global::Mruv.Offers.GetOfferResponse> __Method_GetOffer = new grpc::Method<global::Mruv.Offers.GetOfferRequest, global::Mruv.Offers.GetOfferResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOffer",
        __Marshaller_mruv_offers_GetOfferRequest,
        __Marshaller_mruv_offers_GetOfferResponse);

    static readonly grpc::Method<global::Mruv.Offers.UpdateOfferRequest, global::Mruv.Offers.UpdateOfferResponse> __Method_UpdateOffer = new grpc::Method<global::Mruv.Offers.UpdateOfferRequest, global::Mruv.Offers.UpdateOfferResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateOffer",
        __Marshaller_mruv_offers_UpdateOfferRequest,
        __Marshaller_mruv_offers_UpdateOfferResponse);

    static readonly grpc::Method<global::Mruv.Offers.DeleteOfferRequest, global::Mruv.Offers.DeleteOfferResponse> __Method_DeleteOffer = new grpc::Method<global::Mruv.Offers.DeleteOfferRequest, global::Mruv.Offers.DeleteOfferResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteOffer",
        __Marshaller_mruv_offers_DeleteOfferRequest,
        __Marshaller_mruv_offers_DeleteOfferResponse);

    static readonly grpc::Method<global::Mruv.Offers.AcceptOfferRequest, global::Mruv.Offers.AcceptOfferResponse> __Method_AcceptOffer = new grpc::Method<global::Mruv.Offers.AcceptOfferRequest, global::Mruv.Offers.AcceptOfferResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AcceptOffer",
        __Marshaller_mruv_offers_AcceptOfferRequest,
        __Marshaller_mruv_offers_AcceptOfferResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mruv.Offers.OffersReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MruVOffersService</summary>
    [grpc::BindServiceMethod(typeof(MruVOffersService), "BindService")]
    public abstract partial class MruVOffersServiceBase
    {
      /// <summary>
      /// Create an offer.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Offers.CreateOfferResponse> CreateOffer(global::Mruv.Offers.CreateOfferRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get an offer.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Offers.GetOfferResponse> GetOffer(global::Mruv.Offers.GetOfferRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update an offer.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Offers.UpdateOfferResponse> UpdateOffer(global::Mruv.Offers.UpdateOfferRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete an offer.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Offers.DeleteOfferResponse> DeleteOffer(global::Mruv.Offers.DeleteOfferRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Accept an offer and proceed transaction.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Offers.AcceptOfferResponse> AcceptOffer(global::Mruv.Offers.AcceptOfferRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MruVOffersService</summary>
    public partial class MruVOffersServiceClient : grpc::ClientBase<MruVOffersServiceClient>
    {
      /// <summary>Creates a new client for MruVOffersService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MruVOffersServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MruVOffersService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MruVOffersServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MruVOffersServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MruVOffersServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create an offer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Offers.CreateOfferResponse CreateOffer(global::Mruv.Offers.CreateOfferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOffer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an offer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Offers.CreateOfferResponse CreateOffer(global::Mruv.Offers.CreateOfferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateOffer, null, options, request);
      }
      /// <summary>
      /// Create an offer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Offers.CreateOfferResponse> CreateOfferAsync(global::Mruv.Offers.CreateOfferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOfferAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an offer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Offers.CreateOfferResponse> CreateOfferAsync(global::Mruv.Offers.CreateOfferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateOffer, null, options, request);
      }
      /// <summary>
      /// Get an offer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Offers.GetOfferResponse GetOffer(global::Mruv.Offers.GetOfferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOffer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an offer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Offers.GetOfferResponse GetOffer(global::Mruv.Offers.GetOfferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOffer, null, options, request);
      }
      /// <summary>
      /// Get an offer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Offers.GetOfferResponse> GetOfferAsync(global::Mruv.Offers.GetOfferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOfferAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an offer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Offers.GetOfferResponse> GetOfferAsync(global::Mruv.Offers.GetOfferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOffer, null, options, request);
      }
      /// <summary>
      /// Update an offer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Offers.UpdateOfferResponse UpdateOffer(global::Mruv.Offers.UpdateOfferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOffer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an offer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Offers.UpdateOfferResponse UpdateOffer(global::Mruv.Offers.UpdateOfferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateOffer, null, options, request);
      }
      /// <summary>
      /// Update an offer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Offers.UpdateOfferResponse> UpdateOfferAsync(global::Mruv.Offers.UpdateOfferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOfferAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an offer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Offers.UpdateOfferResponse> UpdateOfferAsync(global::Mruv.Offers.UpdateOfferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateOffer, null, options, request);
      }
      /// <summary>
      /// Delete an offer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Offers.DeleteOfferResponse DeleteOffer(global::Mruv.Offers.DeleteOfferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOffer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an offer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Offers.DeleteOfferResponse DeleteOffer(global::Mruv.Offers.DeleteOfferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteOffer, null, options, request);
      }
      /// <summary>
      /// Delete an offer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Offers.DeleteOfferResponse> DeleteOfferAsync(global::Mruv.Offers.DeleteOfferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOfferAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an offer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Offers.DeleteOfferResponse> DeleteOfferAsync(global::Mruv.Offers.DeleteOfferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteOffer, null, options, request);
      }
      /// <summary>
      /// Accept an offer and proceed transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Offers.AcceptOfferResponse AcceptOffer(global::Mruv.Offers.AcceptOfferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcceptOffer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Accept an offer and proceed transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Offers.AcceptOfferResponse AcceptOffer(global::Mruv.Offers.AcceptOfferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AcceptOffer, null, options, request);
      }
      /// <summary>
      /// Accept an offer and proceed transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Offers.AcceptOfferResponse> AcceptOfferAsync(global::Mruv.Offers.AcceptOfferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcceptOfferAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Accept an offer and proceed transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Offers.AcceptOfferResponse> AcceptOfferAsync(global::Mruv.Offers.AcceptOfferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AcceptOffer, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MruVOffersServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MruVOffersServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MruVOffersServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateOffer, serviceImpl.CreateOffer)
          .AddMethod(__Method_GetOffer, serviceImpl.GetOffer)
          .AddMethod(__Method_UpdateOffer, serviceImpl.UpdateOffer)
          .AddMethod(__Method_DeleteOffer, serviceImpl.DeleteOffer)
          .AddMethod(__Method_AcceptOffer, serviceImpl.AcceptOffer).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MruVOffersServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateOffer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Offers.CreateOfferRequest, global::Mruv.Offers.CreateOfferResponse>(serviceImpl.CreateOffer));
      serviceBinder.AddMethod(__Method_GetOffer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Offers.GetOfferRequest, global::Mruv.Offers.GetOfferResponse>(serviceImpl.GetOffer));
      serviceBinder.AddMethod(__Method_UpdateOffer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Offers.UpdateOfferRequest, global::Mruv.Offers.UpdateOfferResponse>(serviceImpl.UpdateOffer));
      serviceBinder.AddMethod(__Method_DeleteOffer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Offers.DeleteOfferRequest, global::Mruv.Offers.DeleteOfferResponse>(serviceImpl.DeleteOffer));
      serviceBinder.AddMethod(__Method_AcceptOffer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Offers.AcceptOfferRequest, global::Mruv.Offers.AcceptOfferResponse>(serviceImpl.AcceptOffer));
    }

  }
}
#endregion
