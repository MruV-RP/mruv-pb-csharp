// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: vehicles/vehicles.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mruv.Vehicles {
  /// <summary>
  /// The MruV vehicles service provides procedures for managing vehicles.
  /// </summary>
  public static partial class MruVVehiclesService
  {
    static readonly string __ServiceName = "mruv.vehicles.MruVVehiclesService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Mruv.Vehicles.CreateVehicleRequest> __Marshaller_mruv_vehicles_CreateVehicleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Vehicles.CreateVehicleRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Vehicles.CreateVehicleResponse> __Marshaller_mruv_vehicles_CreateVehicleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Vehicles.CreateVehicleResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Vehicles.GetVehicleRequest> __Marshaller_mruv_vehicles_GetVehicleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Vehicles.GetVehicleRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Vehicles.GetVehicleResponse> __Marshaller_mruv_vehicles_GetVehicleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Vehicles.GetVehicleResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Vehicles.UpdateVehicleRequest> __Marshaller_mruv_vehicles_UpdateVehicleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Vehicles.UpdateVehicleRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Vehicles.UpdateVehicleResponse> __Marshaller_mruv_vehicles_UpdateVehicleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Vehicles.UpdateVehicleResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Vehicles.DeleteVehicleRequest> __Marshaller_mruv_vehicles_DeleteVehicleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Vehicles.DeleteVehicleRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Vehicles.DeleteVehicleResponse> __Marshaller_mruv_vehicles_DeleteVehicleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Vehicles.DeleteVehicleResponse.Parser));

    static readonly grpc::Method<global::Mruv.Vehicles.CreateVehicleRequest, global::Mruv.Vehicles.CreateVehicleResponse> __Method_CreateVehicle = new grpc::Method<global::Mruv.Vehicles.CreateVehicleRequest, global::Mruv.Vehicles.CreateVehicleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateVehicle",
        __Marshaller_mruv_vehicles_CreateVehicleRequest,
        __Marshaller_mruv_vehicles_CreateVehicleResponse);

    static readonly grpc::Method<global::Mruv.Vehicles.GetVehicleRequest, global::Mruv.Vehicles.GetVehicleResponse> __Method_GetVehicle = new grpc::Method<global::Mruv.Vehicles.GetVehicleRequest, global::Mruv.Vehicles.GetVehicleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVehicle",
        __Marshaller_mruv_vehicles_GetVehicleRequest,
        __Marshaller_mruv_vehicles_GetVehicleResponse);

    static readonly grpc::Method<global::Mruv.Vehicles.UpdateVehicleRequest, global::Mruv.Vehicles.UpdateVehicleResponse> __Method_UpdateVehicle = new grpc::Method<global::Mruv.Vehicles.UpdateVehicleRequest, global::Mruv.Vehicles.UpdateVehicleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateVehicle",
        __Marshaller_mruv_vehicles_UpdateVehicleRequest,
        __Marshaller_mruv_vehicles_UpdateVehicleResponse);

    static readonly grpc::Method<global::Mruv.Vehicles.DeleteVehicleRequest, global::Mruv.Vehicles.DeleteVehicleResponse> __Method_DeleteVehicle = new grpc::Method<global::Mruv.Vehicles.DeleteVehicleRequest, global::Mruv.Vehicles.DeleteVehicleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteVehicle",
        __Marshaller_mruv_vehicles_DeleteVehicleRequest,
        __Marshaller_mruv_vehicles_DeleteVehicleResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mruv.Vehicles.VehiclesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MruVVehiclesService</summary>
    [grpc::BindServiceMethod(typeof(MruVVehiclesService), "BindService")]
    public abstract partial class MruVVehiclesServiceBase
    {
      /// <summary>
      /// Create a vehicle.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Vehicles.CreateVehicleResponse> CreateVehicle(global::Mruv.Vehicles.CreateVehicleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a vehicle.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Vehicles.GetVehicleResponse> GetVehicle(global::Mruv.Vehicles.GetVehicleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a vehicle.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Vehicles.UpdateVehicleResponse> UpdateVehicle(global::Mruv.Vehicles.UpdateVehicleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a vehicle.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Vehicles.DeleteVehicleResponse> DeleteVehicle(global::Mruv.Vehicles.DeleteVehicleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MruVVehiclesService</summary>
    public partial class MruVVehiclesServiceClient : grpc::ClientBase<MruVVehiclesServiceClient>
    {
      /// <summary>Creates a new client for MruVVehiclesService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MruVVehiclesServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MruVVehiclesService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MruVVehiclesServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MruVVehiclesServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MruVVehiclesServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Vehicles.CreateVehicleResponse CreateVehicle(global::Mruv.Vehicles.CreateVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateVehicle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Vehicles.CreateVehicleResponse CreateVehicle(global::Mruv.Vehicles.CreateVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateVehicle, null, options, request);
      }
      /// <summary>
      /// Create a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Vehicles.CreateVehicleResponse> CreateVehicleAsync(global::Mruv.Vehicles.CreateVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateVehicleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Vehicles.CreateVehicleResponse> CreateVehicleAsync(global::Mruv.Vehicles.CreateVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateVehicle, null, options, request);
      }
      /// <summary>
      /// Get a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Vehicles.GetVehicleResponse GetVehicle(global::Mruv.Vehicles.GetVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVehicle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Vehicles.GetVehicleResponse GetVehicle(global::Mruv.Vehicles.GetVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVehicle, null, options, request);
      }
      /// <summary>
      /// Get a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Vehicles.GetVehicleResponse> GetVehicleAsync(global::Mruv.Vehicles.GetVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVehicleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Vehicles.GetVehicleResponse> GetVehicleAsync(global::Mruv.Vehicles.GetVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVehicle, null, options, request);
      }
      /// <summary>
      /// Update a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Vehicles.UpdateVehicleResponse UpdateVehicle(global::Mruv.Vehicles.UpdateVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateVehicle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Vehicles.UpdateVehicleResponse UpdateVehicle(global::Mruv.Vehicles.UpdateVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateVehicle, null, options, request);
      }
      /// <summary>
      /// Update a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Vehicles.UpdateVehicleResponse> UpdateVehicleAsync(global::Mruv.Vehicles.UpdateVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateVehicleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Vehicles.UpdateVehicleResponse> UpdateVehicleAsync(global::Mruv.Vehicles.UpdateVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateVehicle, null, options, request);
      }
      /// <summary>
      /// Delete a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Vehicles.DeleteVehicleResponse DeleteVehicle(global::Mruv.Vehicles.DeleteVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteVehicle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Vehicles.DeleteVehicleResponse DeleteVehicle(global::Mruv.Vehicles.DeleteVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteVehicle, null, options, request);
      }
      /// <summary>
      /// Delete a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Vehicles.DeleteVehicleResponse> DeleteVehicleAsync(global::Mruv.Vehicles.DeleteVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteVehicleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Vehicles.DeleteVehicleResponse> DeleteVehicleAsync(global::Mruv.Vehicles.DeleteVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteVehicle, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MruVVehiclesServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MruVVehiclesServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MruVVehiclesServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateVehicle, serviceImpl.CreateVehicle)
          .AddMethod(__Method_GetVehicle, serviceImpl.GetVehicle)
          .AddMethod(__Method_UpdateVehicle, serviceImpl.UpdateVehicle)
          .AddMethod(__Method_DeleteVehicle, serviceImpl.DeleteVehicle).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MruVVehiclesServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateVehicle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Vehicles.CreateVehicleRequest, global::Mruv.Vehicles.CreateVehicleResponse>(serviceImpl.CreateVehicle));
      serviceBinder.AddMethod(__Method_GetVehicle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Vehicles.GetVehicleRequest, global::Mruv.Vehicles.GetVehicleResponse>(serviceImpl.GetVehicle));
      serviceBinder.AddMethod(__Method_UpdateVehicle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Vehicles.UpdateVehicleRequest, global::Mruv.Vehicles.UpdateVehicleResponse>(serviceImpl.UpdateVehicle));
      serviceBinder.AddMethod(__Method_DeleteVehicle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Vehicles.DeleteVehicleRequest, global::Mruv.Vehicles.DeleteVehicleResponse>(serviceImpl.DeleteVehicle));
    }

  }
}
#endregion
