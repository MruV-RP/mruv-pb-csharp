// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: objects/models.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mruv.Objects {
  /// <summary>
  ///The MruV objects service provides procedures for game object models.
  /// </summary>
  public static partial class MruVObjectModelsService
  {
    static readonly string __ServiceName = "mruv.objects.MruVObjectModelsService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Mruv.Objects.CreateObjectModelRequest> __Marshaller_mruv_objects_CreateObjectModelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Objects.CreateObjectModelRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Objects.CreateObjectModelResponse> __Marshaller_mruv_objects_CreateObjectModelResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Objects.CreateObjectModelResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Objects.GetObjectModelRequest> __Marshaller_mruv_objects_GetObjectModelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Objects.GetObjectModelRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Objects.GetObjectModelResponse> __Marshaller_mruv_objects_GetObjectModelResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Objects.GetObjectModelResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Objects.UpdateObjectModelRequest> __Marshaller_mruv_objects_UpdateObjectModelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Objects.UpdateObjectModelRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Objects.UpdateObjectModelResponse> __Marshaller_mruv_objects_UpdateObjectModelResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Objects.UpdateObjectModelResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Objects.DeleteObjectModelRequest> __Marshaller_mruv_objects_DeleteObjectModelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Objects.DeleteObjectModelRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Objects.DeleteObjectModelResponse> __Marshaller_mruv_objects_DeleteObjectModelResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Objects.DeleteObjectModelResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Objects.FetchAllModelsRequest> __Marshaller_mruv_objects_FetchAllModelsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Objects.FetchAllModelsRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Objects.FetchAllModelsResponse> __Marshaller_mruv_objects_FetchAllModelsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Objects.FetchAllModelsResponse.Parser));

    static readonly grpc::Method<global::Mruv.Objects.CreateObjectModelRequest, global::Mruv.Objects.CreateObjectModelResponse> __Method_CreateObjectModel = new grpc::Method<global::Mruv.Objects.CreateObjectModelRequest, global::Mruv.Objects.CreateObjectModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateObjectModel",
        __Marshaller_mruv_objects_CreateObjectModelRequest,
        __Marshaller_mruv_objects_CreateObjectModelResponse);

    static readonly grpc::Method<global::Mruv.Objects.GetObjectModelRequest, global::Mruv.Objects.GetObjectModelResponse> __Method_GetObjectModel = new grpc::Method<global::Mruv.Objects.GetObjectModelRequest, global::Mruv.Objects.GetObjectModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetObjectModel",
        __Marshaller_mruv_objects_GetObjectModelRequest,
        __Marshaller_mruv_objects_GetObjectModelResponse);

    static readonly grpc::Method<global::Mruv.Objects.UpdateObjectModelRequest, global::Mruv.Objects.UpdateObjectModelResponse> __Method_UpdateObjectModel = new grpc::Method<global::Mruv.Objects.UpdateObjectModelRequest, global::Mruv.Objects.UpdateObjectModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateObjectModel",
        __Marshaller_mruv_objects_UpdateObjectModelRequest,
        __Marshaller_mruv_objects_UpdateObjectModelResponse);

    static readonly grpc::Method<global::Mruv.Objects.DeleteObjectModelRequest, global::Mruv.Objects.DeleteObjectModelResponse> __Method_DeleteObjectModel = new grpc::Method<global::Mruv.Objects.DeleteObjectModelRequest, global::Mruv.Objects.DeleteObjectModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteObjectModel",
        __Marshaller_mruv_objects_DeleteObjectModelRequest,
        __Marshaller_mruv_objects_DeleteObjectModelResponse);

    static readonly grpc::Method<global::Mruv.Objects.FetchAllModelsRequest, global::Mruv.Objects.FetchAllModelsResponse> __Method_FetchAllModels = new grpc::Method<global::Mruv.Objects.FetchAllModelsRequest, global::Mruv.Objects.FetchAllModelsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "FetchAllModels",
        __Marshaller_mruv_objects_FetchAllModelsRequest,
        __Marshaller_mruv_objects_FetchAllModelsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mruv.Objects.ModelsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MruVObjectModelsService</summary>
    [grpc::BindServiceMethod(typeof(MruVObjectModelsService), "BindService")]
    public abstract partial class MruVObjectModelsServiceBase
    {
      /// <summary>
      /// Create an object model.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.CreateObjectModelResponse> CreateObjectModel(global::Mruv.Objects.CreateObjectModelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get an object model.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.GetObjectModelResponse> GetObjectModel(global::Mruv.Objects.GetObjectModelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update an object model.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.UpdateObjectModelResponse> UpdateObjectModel(global::Mruv.Objects.UpdateObjectModelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete an object model.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.DeleteObjectModelResponse> DeleteObjectModel(global::Mruv.Objects.DeleteObjectModelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get all models.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task FetchAllModels(global::Mruv.Objects.FetchAllModelsRequest request, grpc::IServerStreamWriter<global::Mruv.Objects.FetchAllModelsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MruVObjectModelsService</summary>
    public partial class MruVObjectModelsServiceClient : grpc::ClientBase<MruVObjectModelsServiceClient>
    {
      /// <summary>Creates a new client for MruVObjectModelsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MruVObjectModelsServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MruVObjectModelsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MruVObjectModelsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MruVObjectModelsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MruVObjectModelsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create an object model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.CreateObjectModelResponse CreateObjectModel(global::Mruv.Objects.CreateObjectModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateObjectModel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an object model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.CreateObjectModelResponse CreateObjectModel(global::Mruv.Objects.CreateObjectModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateObjectModel, null, options, request);
      }
      /// <summary>
      /// Create an object model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.CreateObjectModelResponse> CreateObjectModelAsync(global::Mruv.Objects.CreateObjectModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateObjectModelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an object model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.CreateObjectModelResponse> CreateObjectModelAsync(global::Mruv.Objects.CreateObjectModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateObjectModel, null, options, request);
      }
      /// <summary>
      /// Get an object model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.GetObjectModelResponse GetObjectModel(global::Mruv.Objects.GetObjectModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetObjectModel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an object model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.GetObjectModelResponse GetObjectModel(global::Mruv.Objects.GetObjectModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetObjectModel, null, options, request);
      }
      /// <summary>
      /// Get an object model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.GetObjectModelResponse> GetObjectModelAsync(global::Mruv.Objects.GetObjectModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetObjectModelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an object model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.GetObjectModelResponse> GetObjectModelAsync(global::Mruv.Objects.GetObjectModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetObjectModel, null, options, request);
      }
      /// <summary>
      /// Update an object model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.UpdateObjectModelResponse UpdateObjectModel(global::Mruv.Objects.UpdateObjectModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateObjectModel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an object model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.UpdateObjectModelResponse UpdateObjectModel(global::Mruv.Objects.UpdateObjectModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateObjectModel, null, options, request);
      }
      /// <summary>
      /// Update an object model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.UpdateObjectModelResponse> UpdateObjectModelAsync(global::Mruv.Objects.UpdateObjectModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateObjectModelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an object model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.UpdateObjectModelResponse> UpdateObjectModelAsync(global::Mruv.Objects.UpdateObjectModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateObjectModel, null, options, request);
      }
      /// <summary>
      /// Delete an object model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.DeleteObjectModelResponse DeleteObjectModel(global::Mruv.Objects.DeleteObjectModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteObjectModel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an object model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.DeleteObjectModelResponse DeleteObjectModel(global::Mruv.Objects.DeleteObjectModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteObjectModel, null, options, request);
      }
      /// <summary>
      /// Delete an object model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.DeleteObjectModelResponse> DeleteObjectModelAsync(global::Mruv.Objects.DeleteObjectModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteObjectModelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an object model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.DeleteObjectModelResponse> DeleteObjectModelAsync(global::Mruv.Objects.DeleteObjectModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteObjectModel, null, options, request);
      }
      /// <summary>
      /// Get all models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Objects.FetchAllModelsResponse> FetchAllModels(global::Mruv.Objects.FetchAllModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchAllModels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Objects.FetchAllModelsResponse> FetchAllModels(global::Mruv.Objects.FetchAllModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_FetchAllModels, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MruVObjectModelsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MruVObjectModelsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MruVObjectModelsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateObjectModel, serviceImpl.CreateObjectModel)
          .AddMethod(__Method_GetObjectModel, serviceImpl.GetObjectModel)
          .AddMethod(__Method_UpdateObjectModel, serviceImpl.UpdateObjectModel)
          .AddMethod(__Method_DeleteObjectModel, serviceImpl.DeleteObjectModel)
          .AddMethod(__Method_FetchAllModels, serviceImpl.FetchAllModels).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MruVObjectModelsServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateObjectModel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.CreateObjectModelRequest, global::Mruv.Objects.CreateObjectModelResponse>(serviceImpl.CreateObjectModel));
      serviceBinder.AddMethod(__Method_GetObjectModel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.GetObjectModelRequest, global::Mruv.Objects.GetObjectModelResponse>(serviceImpl.GetObjectModel));
      serviceBinder.AddMethod(__Method_UpdateObjectModel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.UpdateObjectModelRequest, global::Mruv.Objects.UpdateObjectModelResponse>(serviceImpl.UpdateObjectModel));
      serviceBinder.AddMethod(__Method_DeleteObjectModel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.DeleteObjectModelRequest, global::Mruv.Objects.DeleteObjectModelResponse>(serviceImpl.DeleteObjectModel));
      serviceBinder.AddMethod(__Method_FetchAllModels, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mruv.Objects.FetchAllModelsRequest, global::Mruv.Objects.FetchAllModelsResponse>(serviceImpl.FetchAllModels));
    }

  }
}
#endregion
