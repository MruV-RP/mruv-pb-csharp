// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: plot/plots.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mruv.Plots {
  /// <summary>
  /// The MruV plots service provides procedures for managing buildings plots and other areas.
  /// </summary>
  public static partial class MruVPlotsService
  {
    static readonly string __ServiceName = "mruv.plots.MruVPlotsService";

    static readonly grpc::Marshaller<global::Mruv.Plots.CreatePlotRequest> __Marshaller_mruv_plots_CreatePlotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Plots.CreatePlotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Plots.CreatePlotResponse> __Marshaller_mruv_plots_CreatePlotResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Plots.CreatePlotResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Plots.GetPlotRequest> __Marshaller_mruv_plots_GetPlotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Plots.GetPlotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Plots.GetPlotResponse> __Marshaller_mruv_plots_GetPlotResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Plots.GetPlotResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Plots.UpdatePlotRequest> __Marshaller_mruv_plots_UpdatePlotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Plots.UpdatePlotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Plots.UpdatePlotResponse> __Marshaller_mruv_plots_UpdatePlotResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Plots.UpdatePlotResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Plots.DeletePlotRequest> __Marshaller_mruv_plots_DeletePlotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Plots.DeletePlotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Plots.DeletePlotResponse> __Marshaller_mruv_plots_DeletePlotResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Plots.DeletePlotResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Mruv.Plots.CreatePlotRequest, global::Mruv.Plots.CreatePlotResponse> __Method_CreatePlot = new grpc::Method<global::Mruv.Plots.CreatePlotRequest, global::Mruv.Plots.CreatePlotResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreatePlot",
        __Marshaller_mruv_plots_CreatePlotRequest,
        __Marshaller_mruv_plots_CreatePlotResponse);

    static readonly grpc::Method<global::Mruv.Plots.GetPlotRequest, global::Mruv.Plots.GetPlotResponse> __Method_GetPlot = new grpc::Method<global::Mruv.Plots.GetPlotRequest, global::Mruv.Plots.GetPlotResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPlot",
        __Marshaller_mruv_plots_GetPlotRequest,
        __Marshaller_mruv_plots_GetPlotResponse);

    static readonly grpc::Method<global::Mruv.Plots.UpdatePlotRequest, global::Mruv.Plots.UpdatePlotResponse> __Method_UpdatePlot = new grpc::Method<global::Mruv.Plots.UpdatePlotRequest, global::Mruv.Plots.UpdatePlotResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePlot",
        __Marshaller_mruv_plots_UpdatePlotRequest,
        __Marshaller_mruv_plots_UpdatePlotResponse);

    static readonly grpc::Method<global::Mruv.Plots.DeletePlotRequest, global::Mruv.Plots.DeletePlotResponse> __Method_DeletePlot = new grpc::Method<global::Mruv.Plots.DeletePlotRequest, global::Mruv.Plots.DeletePlotResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePlot",
        __Marshaller_mruv_plots_DeletePlotRequest,
        __Marshaller_mruv_plots_DeletePlotResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mruv.Plots.PlotsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MruVPlotsService</summary>
    [grpc::BindServiceMethod(typeof(MruVPlotsService), "BindService")]
    public abstract partial class MruVPlotsServiceBase
    {
      /// <summary>
      /// Create a plot.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Plots.CreatePlotResponse> CreatePlot(global::Mruv.Plots.CreatePlotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a plot.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Plots.GetPlotResponse> GetPlot(global::Mruv.Plots.GetPlotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a plot.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Plots.UpdatePlotResponse> UpdatePlot(global::Mruv.Plots.UpdatePlotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a plot.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Plots.DeletePlotResponse> DeletePlot(global::Mruv.Plots.DeletePlotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MruVPlotsService</summary>
    public partial class MruVPlotsServiceClient : grpc::ClientBase<MruVPlotsServiceClient>
    {
      /// <summary>Creates a new client for MruVPlotsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MruVPlotsServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MruVPlotsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MruVPlotsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MruVPlotsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MruVPlotsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a plot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Plots.CreatePlotResponse CreatePlot(global::Mruv.Plots.CreatePlotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePlot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a plot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Plots.CreatePlotResponse CreatePlot(global::Mruv.Plots.CreatePlotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreatePlot, null, options, request);
      }
      /// <summary>
      /// Create a plot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Plots.CreatePlotResponse> CreatePlotAsync(global::Mruv.Plots.CreatePlotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePlotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a plot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Plots.CreatePlotResponse> CreatePlotAsync(global::Mruv.Plots.CreatePlotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreatePlot, null, options, request);
      }
      /// <summary>
      /// Get a plot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Plots.GetPlotResponse GetPlot(global::Mruv.Plots.GetPlotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPlot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a plot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Plots.GetPlotResponse GetPlot(global::Mruv.Plots.GetPlotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPlot, null, options, request);
      }
      /// <summary>
      /// Get a plot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Plots.GetPlotResponse> GetPlotAsync(global::Mruv.Plots.GetPlotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPlotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a plot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Plots.GetPlotResponse> GetPlotAsync(global::Mruv.Plots.GetPlotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPlot, null, options, request);
      }
      /// <summary>
      /// Update a plot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Plots.UpdatePlotResponse UpdatePlot(global::Mruv.Plots.UpdatePlotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePlot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a plot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Plots.UpdatePlotResponse UpdatePlot(global::Mruv.Plots.UpdatePlotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePlot, null, options, request);
      }
      /// <summary>
      /// Update a plot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Plots.UpdatePlotResponse> UpdatePlotAsync(global::Mruv.Plots.UpdatePlotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePlotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a plot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Plots.UpdatePlotResponse> UpdatePlotAsync(global::Mruv.Plots.UpdatePlotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePlot, null, options, request);
      }
      /// <summary>
      /// Delete a plot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Plots.DeletePlotResponse DeletePlot(global::Mruv.Plots.DeletePlotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePlot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a plot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Plots.DeletePlotResponse DeletePlot(global::Mruv.Plots.DeletePlotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePlot, null, options, request);
      }
      /// <summary>
      /// Delete a plot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Plots.DeletePlotResponse> DeletePlotAsync(global::Mruv.Plots.DeletePlotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePlotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a plot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Plots.DeletePlotResponse> DeletePlotAsync(global::Mruv.Plots.DeletePlotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePlot, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MruVPlotsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MruVPlotsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MruVPlotsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreatePlot, serviceImpl.CreatePlot)
          .AddMethod(__Method_GetPlot, serviceImpl.GetPlot)
          .AddMethod(__Method_UpdatePlot, serviceImpl.UpdatePlot)
          .AddMethod(__Method_DeletePlot, serviceImpl.DeletePlot).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MruVPlotsServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreatePlot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Plots.CreatePlotRequest, global::Mruv.Plots.CreatePlotResponse>(serviceImpl.CreatePlot));
      serviceBinder.AddMethod(__Method_GetPlot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Plots.GetPlotRequest, global::Mruv.Plots.GetPlotResponse>(serviceImpl.GetPlot));
      serviceBinder.AddMethod(__Method_UpdatePlot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Plots.UpdatePlotRequest, global::Mruv.Plots.UpdatePlotResponse>(serviceImpl.UpdatePlot));
      serviceBinder.AddMethod(__Method_DeletePlot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Plots.DeletePlotRequest, global::Mruv.Plots.DeletePlotResponse>(serviceImpl.DeletePlot));
    }

  }
}
#endregion
