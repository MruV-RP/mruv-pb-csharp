// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: accounts/accounts.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mruv {
  /// <summary>
  /// The MruV accounts service provides procedures for managing players accounts.
  /// This service is an additional/intermediary service between the ORY Kratos &amp; ORY Hydra service.
  /// </summary>
  public static partial class MruVAccountsService
  {
    static readonly string __ServiceName = "mruv.MruVAccountsService";

    static readonly grpc::Marshaller<global::Mruv.RegisterAccountRequest> __Marshaller_mruv_RegisterAccountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.RegisterAccountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.RegisterAccountResponse> __Marshaller_mruv_RegisterAccountResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.RegisterAccountResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.LogInRequest> __Marshaller_mruv_LogInRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.LogInRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.LogInResponse> __Marshaller_mruv_LogInResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.LogInResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.IsAccountExistsRequest> __Marshaller_mruv_IsAccountExistsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.IsAccountExistsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.IsAccountExistsResponse> __Marshaller_mruv_IsAccountExistsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.IsAccountExistsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.AccountID> __Marshaller_mruv_AccountID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.AccountID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Account> __Marshaller_mruv_Account = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Account.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetAccountCharactersResponse> __Marshaller_mruv_GetAccountCharactersResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetAccountCharactersResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Mruv.RegisterAccountRequest, global::Mruv.RegisterAccountResponse> __Method_RegisterAccount = new grpc::Method<global::Mruv.RegisterAccountRequest, global::Mruv.RegisterAccountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterAccount",
        __Marshaller_mruv_RegisterAccountRequest,
        __Marshaller_mruv_RegisterAccountResponse);

    static readonly grpc::Method<global::Mruv.LogInRequest, global::Mruv.LogInResponse> __Method_LogIn = new grpc::Method<global::Mruv.LogInRequest, global::Mruv.LogInResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LogIn",
        __Marshaller_mruv_LogInRequest,
        __Marshaller_mruv_LogInResponse);

    static readonly grpc::Method<global::Mruv.IsAccountExistsRequest, global::Mruv.IsAccountExistsResponse> __Method_IsAccountExists = new grpc::Method<global::Mruv.IsAccountExistsRequest, global::Mruv.IsAccountExistsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsAccountExists",
        __Marshaller_mruv_IsAccountExistsRequest,
        __Marshaller_mruv_IsAccountExistsResponse);

    static readonly grpc::Method<global::Mruv.AccountID, global::Mruv.Account> __Method_GetAccount = new grpc::Method<global::Mruv.AccountID, global::Mruv.Account>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccount",
        __Marshaller_mruv_AccountID,
        __Marshaller_mruv_Account);

    static readonly grpc::Method<global::Mruv.AccountID, global::Mruv.GetAccountCharactersResponse> __Method_GetAccountCharacters = new grpc::Method<global::Mruv.AccountID, global::Mruv.GetAccountCharactersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccountCharacters",
        __Marshaller_mruv_AccountID,
        __Marshaller_mruv_GetAccountCharactersResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mruv.AccountsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MruVAccountsService</summary>
    [grpc::BindServiceMethod(typeof(MruVAccountsService), "BindService")]
    public abstract partial class MruVAccountsServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Mruv.RegisterAccountResponse> RegisterAccount(global::Mruv.RegisterAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.LogInResponse> LogIn(global::Mruv.LogInRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Check, is account with specified login exists. If yes, it returns account id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.IsAccountExistsResponse> IsAccountExists(global::Mruv.IsAccountExistsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.Account> GetAccount(global::Mruv.AccountID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.GetAccountCharactersResponse> GetAccountCharacters(global::Mruv.AccountID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MruVAccountsService</summary>
    public partial class MruVAccountsServiceClient : grpc::ClientBase<MruVAccountsServiceClient>
    {
      /// <summary>Creates a new client for MruVAccountsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MruVAccountsServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MruVAccountsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MruVAccountsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MruVAccountsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MruVAccountsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Mruv.RegisterAccountResponse RegisterAccount(global::Mruv.RegisterAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.RegisterAccountResponse RegisterAccount(global::Mruv.RegisterAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.RegisterAccountResponse> RegisterAccountAsync(global::Mruv.RegisterAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.RegisterAccountResponse> RegisterAccountAsync(global::Mruv.RegisterAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterAccount, null, options, request);
      }
      public virtual global::Mruv.LogInResponse LogIn(global::Mruv.LogInRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LogIn(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.LogInResponse LogIn(global::Mruv.LogInRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LogIn, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.LogInResponse> LogInAsync(global::Mruv.LogInRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LogInAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.LogInResponse> LogInAsync(global::Mruv.LogInRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LogIn, null, options, request);
      }
      /// <summary>
      /// Check, is account with specified login exists. If yes, it returns account id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.IsAccountExistsResponse IsAccountExists(global::Mruv.IsAccountExistsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsAccountExists(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check, is account with specified login exists. If yes, it returns account id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.IsAccountExistsResponse IsAccountExists(global::Mruv.IsAccountExistsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsAccountExists, null, options, request);
      }
      /// <summary>
      /// Check, is account with specified login exists. If yes, it returns account id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.IsAccountExistsResponse> IsAccountExistsAsync(global::Mruv.IsAccountExistsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsAccountExistsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check, is account with specified login exists. If yes, it returns account id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.IsAccountExistsResponse> IsAccountExistsAsync(global::Mruv.IsAccountExistsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsAccountExists, null, options, request);
      }
      public virtual global::Mruv.Account GetAccount(global::Mruv.AccountID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.Account GetAccount(global::Mruv.AccountID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.Account> GetAccountAsync(global::Mruv.AccountID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.Account> GetAccountAsync(global::Mruv.AccountID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccount, null, options, request);
      }
      public virtual global::Mruv.GetAccountCharactersResponse GetAccountCharacters(global::Mruv.AccountID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountCharacters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.GetAccountCharactersResponse GetAccountCharacters(global::Mruv.AccountID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccountCharacters, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetAccountCharactersResponse> GetAccountCharactersAsync(global::Mruv.AccountID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountCharactersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetAccountCharactersResponse> GetAccountCharactersAsync(global::Mruv.AccountID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccountCharacters, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MruVAccountsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MruVAccountsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MruVAccountsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RegisterAccount, serviceImpl.RegisterAccount)
          .AddMethod(__Method_LogIn, serviceImpl.LogIn)
          .AddMethod(__Method_IsAccountExists, serviceImpl.IsAccountExists)
          .AddMethod(__Method_GetAccount, serviceImpl.GetAccount)
          .AddMethod(__Method_GetAccountCharacters, serviceImpl.GetAccountCharacters).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MruVAccountsServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_RegisterAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.RegisterAccountRequest, global::Mruv.RegisterAccountResponse>(serviceImpl.RegisterAccount));
      serviceBinder.AddMethod(__Method_LogIn, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.LogInRequest, global::Mruv.LogInResponse>(serviceImpl.LogIn));
      serviceBinder.AddMethod(__Method_IsAccountExists, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.IsAccountExistsRequest, global::Mruv.IsAccountExistsResponse>(serviceImpl.IsAccountExists));
      serviceBinder.AddMethod(__Method_GetAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.AccountID, global::Mruv.Account>(serviceImpl.GetAccount));
      serviceBinder.AddMethod(__Method_GetAccountCharacters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.AccountID, global::Mruv.GetAccountCharactersResponse>(serviceImpl.GetAccountCharacters));
    }

  }
}
#endregion
