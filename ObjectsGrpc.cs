// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: objects/objects.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mruv.Objects {
  /// <summary>
  ///The MruV objects service provides procedures for game objects.
  /// </summary>
  public static partial class MruVObjectsService
  {
    static readonly string __ServiceName = "mruv.objects.MruVObjectsService";

    static readonly grpc::Marshaller<global::Mruv.Objects.CreateObjectRequest> __Marshaller_mruv_objects_CreateObjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.CreateObjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.CreateObjectResponse> __Marshaller_mruv_objects_CreateObjectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.CreateObjectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.GetObjectRequest> __Marshaller_mruv_objects_GetObjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.GetObjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.GetObjectResponse> __Marshaller_mruv_objects_GetObjectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.GetObjectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.UpdateObjectRequest> __Marshaller_mruv_objects_UpdateObjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.UpdateObjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.UpdateObjectResponse> __Marshaller_mruv_objects_UpdateObjectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.UpdateObjectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.DeleteObjectRequest> __Marshaller_mruv_objects_DeleteObjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.DeleteObjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.DeleteObjectResponse> __Marshaller_mruv_objects_DeleteObjectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.DeleteObjectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.AddObjectMaterialRequest> __Marshaller_mruv_objects_AddObjectMaterialRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.AddObjectMaterialRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.AddObjectMaterialResponse> __Marshaller_mruv_objects_AddObjectMaterialResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.AddObjectMaterialResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.GetObjectMaterialsRequest> __Marshaller_mruv_objects_GetObjectMaterialsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.GetObjectMaterialsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.GetObjectMaterialsResponse> __Marshaller_mruv_objects_GetObjectMaterialsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.GetObjectMaterialsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.DeleteObjectMaterialRequest> __Marshaller_mruv_objects_DeleteObjectMaterialRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.DeleteObjectMaterialRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.DeleteObjectMaterialResponse> __Marshaller_mruv_objects_DeleteObjectMaterialResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.DeleteObjectMaterialResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.AddObjectMaterialTextRequest> __Marshaller_mruv_objects_AddObjectMaterialTextRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.AddObjectMaterialTextRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.AddObjectMaterialTextResponse> __Marshaller_mruv_objects_AddObjectMaterialTextResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.AddObjectMaterialTextResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.GetObjectMaterialTextsRequest> __Marshaller_mruv_objects_GetObjectMaterialTextsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.GetObjectMaterialTextsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.GetObjectMaterialTextsResponse> __Marshaller_mruv_objects_GetObjectMaterialTextsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.GetObjectMaterialTextsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.DeleteObjectMaterialTextRequest> __Marshaller_mruv_objects_DeleteObjectMaterialTextRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.DeleteObjectMaterialTextRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.DeleteObjectMaterialTextResponse> __Marshaller_mruv_objects_DeleteObjectMaterialTextResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.DeleteObjectMaterialTextResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.AddRemoveBuildingRequest> __Marshaller_mruv_objects_AddRemoveBuildingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.AddRemoveBuildingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.AddRemoveBuildingResponse> __Marshaller_mruv_objects_AddRemoveBuildingResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.AddRemoveBuildingResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.GetRemovedBuildingsRequest> __Marshaller_mruv_objects_GetRemovedBuildingsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.GetRemovedBuildingsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.GetRemovedBuildingsResponse> __Marshaller_mruv_objects_GetRemovedBuildingsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.GetRemovedBuildingsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.DeleteRemoveBuildingRequest> __Marshaller_mruv_objects_DeleteRemoveBuildingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.DeleteRemoveBuildingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.DeleteRemoveBuildingResponse> __Marshaller_mruv_objects_DeleteRemoveBuildingResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.DeleteRemoveBuildingResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.FetchAllRequest> __Marshaller_mruv_objects_FetchAllRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.FetchAllRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Objects.FetchAllResponse> __Marshaller_mruv_objects_FetchAllResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Objects.FetchAllResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Mruv.Objects.CreateObjectRequest, global::Mruv.Objects.CreateObjectResponse> __Method_CreateObject = new grpc::Method<global::Mruv.Objects.CreateObjectRequest, global::Mruv.Objects.CreateObjectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateObject",
        __Marshaller_mruv_objects_CreateObjectRequest,
        __Marshaller_mruv_objects_CreateObjectResponse);

    static readonly grpc::Method<global::Mruv.Objects.GetObjectRequest, global::Mruv.Objects.GetObjectResponse> __Method_GetObject = new grpc::Method<global::Mruv.Objects.GetObjectRequest, global::Mruv.Objects.GetObjectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetObject",
        __Marshaller_mruv_objects_GetObjectRequest,
        __Marshaller_mruv_objects_GetObjectResponse);

    static readonly grpc::Method<global::Mruv.Objects.UpdateObjectRequest, global::Mruv.Objects.UpdateObjectResponse> __Method_UpdateObject = new grpc::Method<global::Mruv.Objects.UpdateObjectRequest, global::Mruv.Objects.UpdateObjectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateObject",
        __Marshaller_mruv_objects_UpdateObjectRequest,
        __Marshaller_mruv_objects_UpdateObjectResponse);

    static readonly grpc::Method<global::Mruv.Objects.DeleteObjectRequest, global::Mruv.Objects.DeleteObjectResponse> __Method_DeleteObject = new grpc::Method<global::Mruv.Objects.DeleteObjectRequest, global::Mruv.Objects.DeleteObjectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteObject",
        __Marshaller_mruv_objects_DeleteObjectRequest,
        __Marshaller_mruv_objects_DeleteObjectResponse);

    static readonly grpc::Method<global::Mruv.Objects.AddObjectMaterialRequest, global::Mruv.Objects.AddObjectMaterialResponse> __Method_AddObjectMaterial = new grpc::Method<global::Mruv.Objects.AddObjectMaterialRequest, global::Mruv.Objects.AddObjectMaterialResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddObjectMaterial",
        __Marshaller_mruv_objects_AddObjectMaterialRequest,
        __Marshaller_mruv_objects_AddObjectMaterialResponse);

    static readonly grpc::Method<global::Mruv.Objects.GetObjectMaterialsRequest, global::Mruv.Objects.GetObjectMaterialsResponse> __Method_GetObjectMaterials = new grpc::Method<global::Mruv.Objects.GetObjectMaterialsRequest, global::Mruv.Objects.GetObjectMaterialsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetObjectMaterials",
        __Marshaller_mruv_objects_GetObjectMaterialsRequest,
        __Marshaller_mruv_objects_GetObjectMaterialsResponse);

    static readonly grpc::Method<global::Mruv.Objects.DeleteObjectMaterialRequest, global::Mruv.Objects.DeleteObjectMaterialResponse> __Method_DeleteObjectMaterial = new grpc::Method<global::Mruv.Objects.DeleteObjectMaterialRequest, global::Mruv.Objects.DeleteObjectMaterialResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteObjectMaterial",
        __Marshaller_mruv_objects_DeleteObjectMaterialRequest,
        __Marshaller_mruv_objects_DeleteObjectMaterialResponse);

    static readonly grpc::Method<global::Mruv.Objects.AddObjectMaterialTextRequest, global::Mruv.Objects.AddObjectMaterialTextResponse> __Method_AddObjectMaterialText = new grpc::Method<global::Mruv.Objects.AddObjectMaterialTextRequest, global::Mruv.Objects.AddObjectMaterialTextResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddObjectMaterialText",
        __Marshaller_mruv_objects_AddObjectMaterialTextRequest,
        __Marshaller_mruv_objects_AddObjectMaterialTextResponse);

    static readonly grpc::Method<global::Mruv.Objects.GetObjectMaterialTextsRequest, global::Mruv.Objects.GetObjectMaterialTextsResponse> __Method_GetObjectMaterialTexts = new grpc::Method<global::Mruv.Objects.GetObjectMaterialTextsRequest, global::Mruv.Objects.GetObjectMaterialTextsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetObjectMaterialTexts",
        __Marshaller_mruv_objects_GetObjectMaterialTextsRequest,
        __Marshaller_mruv_objects_GetObjectMaterialTextsResponse);

    static readonly grpc::Method<global::Mruv.Objects.DeleteObjectMaterialTextRequest, global::Mruv.Objects.DeleteObjectMaterialTextResponse> __Method_DeleteObjectMaterialText = new grpc::Method<global::Mruv.Objects.DeleteObjectMaterialTextRequest, global::Mruv.Objects.DeleteObjectMaterialTextResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteObjectMaterialText",
        __Marshaller_mruv_objects_DeleteObjectMaterialTextRequest,
        __Marshaller_mruv_objects_DeleteObjectMaterialTextResponse);

    static readonly grpc::Method<global::Mruv.Objects.AddRemoveBuildingRequest, global::Mruv.Objects.AddRemoveBuildingResponse> __Method_AddRemoveBuilding = new grpc::Method<global::Mruv.Objects.AddRemoveBuildingRequest, global::Mruv.Objects.AddRemoveBuildingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddRemoveBuilding",
        __Marshaller_mruv_objects_AddRemoveBuildingRequest,
        __Marshaller_mruv_objects_AddRemoveBuildingResponse);

    static readonly grpc::Method<global::Mruv.Objects.GetRemovedBuildingsRequest, global::Mruv.Objects.GetRemovedBuildingsResponse> __Method_GetRemovedBuildings = new grpc::Method<global::Mruv.Objects.GetRemovedBuildingsRequest, global::Mruv.Objects.GetRemovedBuildingsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRemovedBuildings",
        __Marshaller_mruv_objects_GetRemovedBuildingsRequest,
        __Marshaller_mruv_objects_GetRemovedBuildingsResponse);

    static readonly grpc::Method<global::Mruv.Objects.DeleteRemoveBuildingRequest, global::Mruv.Objects.DeleteRemoveBuildingResponse> __Method_DeleteRemoveBuilding = new grpc::Method<global::Mruv.Objects.DeleteRemoveBuildingRequest, global::Mruv.Objects.DeleteRemoveBuildingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRemoveBuilding",
        __Marshaller_mruv_objects_DeleteRemoveBuildingRequest,
        __Marshaller_mruv_objects_DeleteRemoveBuildingResponse);

    static readonly grpc::Method<global::Mruv.Objects.FetchAllRequest, global::Mruv.Objects.FetchAllResponse> __Method_FetchAll = new grpc::Method<global::Mruv.Objects.FetchAllRequest, global::Mruv.Objects.FetchAllResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "FetchAll",
        __Marshaller_mruv_objects_FetchAllRequest,
        __Marshaller_mruv_objects_FetchAllResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mruv.Objects.ObjectsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MruVObjectsService</summary>
    [grpc::BindServiceMethod(typeof(MruVObjectsService), "BindService")]
    public abstract partial class MruVObjectsServiceBase
    {
      /// <summary>
      /// Create an object.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.CreateObjectResponse> CreateObject(global::Mruv.Objects.CreateObjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get an object.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.GetObjectResponse> GetObject(global::Mruv.Objects.GetObjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update an object.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.UpdateObjectResponse> UpdateObject(global::Mruv.Objects.UpdateObjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete an object.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.DeleteObjectResponse> DeleteObject(global::Mruv.Objects.DeleteObjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a material to existing object.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.AddObjectMaterialResponse> AddObjectMaterial(global::Mruv.Objects.AddObjectMaterialRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get all object materials.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.GetObjectMaterialsResponse> GetObjectMaterials(global::Mruv.Objects.GetObjectMaterialsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a material assigned to an object.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.DeleteObjectMaterialResponse> DeleteObjectMaterial(global::Mruv.Objects.DeleteObjectMaterialRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a material text to existing object.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.AddObjectMaterialTextResponse> AddObjectMaterialText(global::Mruv.Objects.AddObjectMaterialTextRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get all object material texts.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.GetObjectMaterialTextsResponse> GetObjectMaterialTexts(global::Mruv.Objects.GetObjectMaterialTextsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a material text assigned to an object.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.DeleteObjectMaterialTextResponse> DeleteObjectMaterialText(global::Mruv.Objects.DeleteObjectMaterialTextRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes a object from GTA SA map.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.AddRemoveBuildingResponse> AddRemoveBuilding(global::Mruv.Objects.AddRemoveBuildingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get all removed objects.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.GetRemovedBuildingsResponse> GetRemovedBuildings(global::Mruv.Objects.GetRemovedBuildingsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete removed buildings.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Objects.DeleteRemoveBuildingResponse> DeleteRemoveBuilding(global::Mruv.Objects.DeleteRemoveBuildingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Fetch all existing objects.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task FetchAll(global::Mruv.Objects.FetchAllRequest request, grpc::IServerStreamWriter<global::Mruv.Objects.FetchAllResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MruVObjectsService</summary>
    public partial class MruVObjectsServiceClient : grpc::ClientBase<MruVObjectsServiceClient>
    {
      /// <summary>Creates a new client for MruVObjectsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MruVObjectsServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MruVObjectsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MruVObjectsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MruVObjectsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MruVObjectsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.CreateObjectResponse CreateObject(global::Mruv.Objects.CreateObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateObject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.CreateObjectResponse CreateObject(global::Mruv.Objects.CreateObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateObject, null, options, request);
      }
      /// <summary>
      /// Create an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.CreateObjectResponse> CreateObjectAsync(global::Mruv.Objects.CreateObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateObjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.CreateObjectResponse> CreateObjectAsync(global::Mruv.Objects.CreateObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateObject, null, options, request);
      }
      /// <summary>
      /// Get an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.GetObjectResponse GetObject(global::Mruv.Objects.GetObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetObject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.GetObjectResponse GetObject(global::Mruv.Objects.GetObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetObject, null, options, request);
      }
      /// <summary>
      /// Get an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.GetObjectResponse> GetObjectAsync(global::Mruv.Objects.GetObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetObjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.GetObjectResponse> GetObjectAsync(global::Mruv.Objects.GetObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetObject, null, options, request);
      }
      /// <summary>
      /// Update an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.UpdateObjectResponse UpdateObject(global::Mruv.Objects.UpdateObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateObject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.UpdateObjectResponse UpdateObject(global::Mruv.Objects.UpdateObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateObject, null, options, request);
      }
      /// <summary>
      /// Update an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.UpdateObjectResponse> UpdateObjectAsync(global::Mruv.Objects.UpdateObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateObjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.UpdateObjectResponse> UpdateObjectAsync(global::Mruv.Objects.UpdateObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateObject, null, options, request);
      }
      /// <summary>
      /// Delete an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.DeleteObjectResponse DeleteObject(global::Mruv.Objects.DeleteObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteObject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.DeleteObjectResponse DeleteObject(global::Mruv.Objects.DeleteObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteObject, null, options, request);
      }
      /// <summary>
      /// Delete an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.DeleteObjectResponse> DeleteObjectAsync(global::Mruv.Objects.DeleteObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteObjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.DeleteObjectResponse> DeleteObjectAsync(global::Mruv.Objects.DeleteObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteObject, null, options, request);
      }
      /// <summary>
      /// Add a material to existing object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.AddObjectMaterialResponse AddObjectMaterial(global::Mruv.Objects.AddObjectMaterialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddObjectMaterial(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a material to existing object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.AddObjectMaterialResponse AddObjectMaterial(global::Mruv.Objects.AddObjectMaterialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddObjectMaterial, null, options, request);
      }
      /// <summary>
      /// Add a material to existing object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.AddObjectMaterialResponse> AddObjectMaterialAsync(global::Mruv.Objects.AddObjectMaterialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddObjectMaterialAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a material to existing object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.AddObjectMaterialResponse> AddObjectMaterialAsync(global::Mruv.Objects.AddObjectMaterialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddObjectMaterial, null, options, request);
      }
      /// <summary>
      /// Get all object materials.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.GetObjectMaterialsResponse GetObjectMaterials(global::Mruv.Objects.GetObjectMaterialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetObjectMaterials(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all object materials.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.GetObjectMaterialsResponse GetObjectMaterials(global::Mruv.Objects.GetObjectMaterialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetObjectMaterials, null, options, request);
      }
      /// <summary>
      /// Get all object materials.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.GetObjectMaterialsResponse> GetObjectMaterialsAsync(global::Mruv.Objects.GetObjectMaterialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetObjectMaterialsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all object materials.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.GetObjectMaterialsResponse> GetObjectMaterialsAsync(global::Mruv.Objects.GetObjectMaterialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetObjectMaterials, null, options, request);
      }
      /// <summary>
      /// Delete a material assigned to an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.DeleteObjectMaterialResponse DeleteObjectMaterial(global::Mruv.Objects.DeleteObjectMaterialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteObjectMaterial(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a material assigned to an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.DeleteObjectMaterialResponse DeleteObjectMaterial(global::Mruv.Objects.DeleteObjectMaterialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteObjectMaterial, null, options, request);
      }
      /// <summary>
      /// Delete a material assigned to an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.DeleteObjectMaterialResponse> DeleteObjectMaterialAsync(global::Mruv.Objects.DeleteObjectMaterialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteObjectMaterialAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a material assigned to an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.DeleteObjectMaterialResponse> DeleteObjectMaterialAsync(global::Mruv.Objects.DeleteObjectMaterialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteObjectMaterial, null, options, request);
      }
      /// <summary>
      /// Add a material text to existing object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.AddObjectMaterialTextResponse AddObjectMaterialText(global::Mruv.Objects.AddObjectMaterialTextRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddObjectMaterialText(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a material text to existing object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.AddObjectMaterialTextResponse AddObjectMaterialText(global::Mruv.Objects.AddObjectMaterialTextRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddObjectMaterialText, null, options, request);
      }
      /// <summary>
      /// Add a material text to existing object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.AddObjectMaterialTextResponse> AddObjectMaterialTextAsync(global::Mruv.Objects.AddObjectMaterialTextRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddObjectMaterialTextAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a material text to existing object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.AddObjectMaterialTextResponse> AddObjectMaterialTextAsync(global::Mruv.Objects.AddObjectMaterialTextRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddObjectMaterialText, null, options, request);
      }
      /// <summary>
      /// Get all object material texts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.GetObjectMaterialTextsResponse GetObjectMaterialTexts(global::Mruv.Objects.GetObjectMaterialTextsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetObjectMaterialTexts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all object material texts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.GetObjectMaterialTextsResponse GetObjectMaterialTexts(global::Mruv.Objects.GetObjectMaterialTextsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetObjectMaterialTexts, null, options, request);
      }
      /// <summary>
      /// Get all object material texts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.GetObjectMaterialTextsResponse> GetObjectMaterialTextsAsync(global::Mruv.Objects.GetObjectMaterialTextsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetObjectMaterialTextsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all object material texts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.GetObjectMaterialTextsResponse> GetObjectMaterialTextsAsync(global::Mruv.Objects.GetObjectMaterialTextsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetObjectMaterialTexts, null, options, request);
      }
      /// <summary>
      /// Delete a material text assigned to an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.DeleteObjectMaterialTextResponse DeleteObjectMaterialText(global::Mruv.Objects.DeleteObjectMaterialTextRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteObjectMaterialText(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a material text assigned to an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.DeleteObjectMaterialTextResponse DeleteObjectMaterialText(global::Mruv.Objects.DeleteObjectMaterialTextRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteObjectMaterialText, null, options, request);
      }
      /// <summary>
      /// Delete a material text assigned to an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.DeleteObjectMaterialTextResponse> DeleteObjectMaterialTextAsync(global::Mruv.Objects.DeleteObjectMaterialTextRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteObjectMaterialTextAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a material text assigned to an object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.DeleteObjectMaterialTextResponse> DeleteObjectMaterialTextAsync(global::Mruv.Objects.DeleteObjectMaterialTextRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteObjectMaterialText, null, options, request);
      }
      /// <summary>
      /// Removes a object from GTA SA map.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.AddRemoveBuildingResponse AddRemoveBuilding(global::Mruv.Objects.AddRemoveBuildingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddRemoveBuilding(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes a object from GTA SA map.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.AddRemoveBuildingResponse AddRemoveBuilding(global::Mruv.Objects.AddRemoveBuildingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddRemoveBuilding, null, options, request);
      }
      /// <summary>
      /// Removes a object from GTA SA map.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.AddRemoveBuildingResponse> AddRemoveBuildingAsync(global::Mruv.Objects.AddRemoveBuildingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddRemoveBuildingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes a object from GTA SA map.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.AddRemoveBuildingResponse> AddRemoveBuildingAsync(global::Mruv.Objects.AddRemoveBuildingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddRemoveBuilding, null, options, request);
      }
      /// <summary>
      /// Get all removed objects.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.GetRemovedBuildingsResponse GetRemovedBuildings(global::Mruv.Objects.GetRemovedBuildingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRemovedBuildings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all removed objects.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.GetRemovedBuildingsResponse GetRemovedBuildings(global::Mruv.Objects.GetRemovedBuildingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRemovedBuildings, null, options, request);
      }
      /// <summary>
      /// Get all removed objects.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.GetRemovedBuildingsResponse> GetRemovedBuildingsAsync(global::Mruv.Objects.GetRemovedBuildingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRemovedBuildingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all removed objects.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.GetRemovedBuildingsResponse> GetRemovedBuildingsAsync(global::Mruv.Objects.GetRemovedBuildingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRemovedBuildings, null, options, request);
      }
      /// <summary>
      /// Delete removed buildings.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.DeleteRemoveBuildingResponse DeleteRemoveBuilding(global::Mruv.Objects.DeleteRemoveBuildingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRemoveBuilding(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete removed buildings.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Objects.DeleteRemoveBuildingResponse DeleteRemoveBuilding(global::Mruv.Objects.DeleteRemoveBuildingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRemoveBuilding, null, options, request);
      }
      /// <summary>
      /// Delete removed buildings.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.DeleteRemoveBuildingResponse> DeleteRemoveBuildingAsync(global::Mruv.Objects.DeleteRemoveBuildingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRemoveBuildingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete removed buildings.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Objects.DeleteRemoveBuildingResponse> DeleteRemoveBuildingAsync(global::Mruv.Objects.DeleteRemoveBuildingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRemoveBuilding, null, options, request);
      }
      /// <summary>
      /// Fetch all existing objects.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Objects.FetchAllResponse> FetchAll(global::Mruv.Objects.FetchAllRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchAll(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetch all existing objects.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Objects.FetchAllResponse> FetchAll(global::Mruv.Objects.FetchAllRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_FetchAll, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MruVObjectsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MruVObjectsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MruVObjectsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateObject, serviceImpl.CreateObject)
          .AddMethod(__Method_GetObject, serviceImpl.GetObject)
          .AddMethod(__Method_UpdateObject, serviceImpl.UpdateObject)
          .AddMethod(__Method_DeleteObject, serviceImpl.DeleteObject)
          .AddMethod(__Method_AddObjectMaterial, serviceImpl.AddObjectMaterial)
          .AddMethod(__Method_GetObjectMaterials, serviceImpl.GetObjectMaterials)
          .AddMethod(__Method_DeleteObjectMaterial, serviceImpl.DeleteObjectMaterial)
          .AddMethod(__Method_AddObjectMaterialText, serviceImpl.AddObjectMaterialText)
          .AddMethod(__Method_GetObjectMaterialTexts, serviceImpl.GetObjectMaterialTexts)
          .AddMethod(__Method_DeleteObjectMaterialText, serviceImpl.DeleteObjectMaterialText)
          .AddMethod(__Method_AddRemoveBuilding, serviceImpl.AddRemoveBuilding)
          .AddMethod(__Method_GetRemovedBuildings, serviceImpl.GetRemovedBuildings)
          .AddMethod(__Method_DeleteRemoveBuilding, serviceImpl.DeleteRemoveBuilding)
          .AddMethod(__Method_FetchAll, serviceImpl.FetchAll).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MruVObjectsServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateObject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.CreateObjectRequest, global::Mruv.Objects.CreateObjectResponse>(serviceImpl.CreateObject));
      serviceBinder.AddMethod(__Method_GetObject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.GetObjectRequest, global::Mruv.Objects.GetObjectResponse>(serviceImpl.GetObject));
      serviceBinder.AddMethod(__Method_UpdateObject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.UpdateObjectRequest, global::Mruv.Objects.UpdateObjectResponse>(serviceImpl.UpdateObject));
      serviceBinder.AddMethod(__Method_DeleteObject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.DeleteObjectRequest, global::Mruv.Objects.DeleteObjectResponse>(serviceImpl.DeleteObject));
      serviceBinder.AddMethod(__Method_AddObjectMaterial, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.AddObjectMaterialRequest, global::Mruv.Objects.AddObjectMaterialResponse>(serviceImpl.AddObjectMaterial));
      serviceBinder.AddMethod(__Method_GetObjectMaterials, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.GetObjectMaterialsRequest, global::Mruv.Objects.GetObjectMaterialsResponse>(serviceImpl.GetObjectMaterials));
      serviceBinder.AddMethod(__Method_DeleteObjectMaterial, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.DeleteObjectMaterialRequest, global::Mruv.Objects.DeleteObjectMaterialResponse>(serviceImpl.DeleteObjectMaterial));
      serviceBinder.AddMethod(__Method_AddObjectMaterialText, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.AddObjectMaterialTextRequest, global::Mruv.Objects.AddObjectMaterialTextResponse>(serviceImpl.AddObjectMaterialText));
      serviceBinder.AddMethod(__Method_GetObjectMaterialTexts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.GetObjectMaterialTextsRequest, global::Mruv.Objects.GetObjectMaterialTextsResponse>(serviceImpl.GetObjectMaterialTexts));
      serviceBinder.AddMethod(__Method_DeleteObjectMaterialText, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.DeleteObjectMaterialTextRequest, global::Mruv.Objects.DeleteObjectMaterialTextResponse>(serviceImpl.DeleteObjectMaterialText));
      serviceBinder.AddMethod(__Method_AddRemoveBuilding, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.AddRemoveBuildingRequest, global::Mruv.Objects.AddRemoveBuildingResponse>(serviceImpl.AddRemoveBuilding));
      serviceBinder.AddMethod(__Method_GetRemovedBuildings, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.GetRemovedBuildingsRequest, global::Mruv.Objects.GetRemovedBuildingsResponse>(serviceImpl.GetRemovedBuildings));
      serviceBinder.AddMethod(__Method_DeleteRemoveBuilding, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Objects.DeleteRemoveBuildingRequest, global::Mruv.Objects.DeleteRemoveBuildingResponse>(serviceImpl.DeleteRemoveBuilding));
      serviceBinder.AddMethod(__Method_FetchAll, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mruv.Objects.FetchAllRequest, global::Mruv.Objects.FetchAllResponse>(serviceImpl.FetchAll));
    }

  }
}
#endregion
