// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: punishments/punishments.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mruv.Economy {

  /// <summary>Holder for reflection information generated from punishments/punishments.proto</summary>
  public static partial class PunishmentsReflection {

    #region Descriptor
    /// <summary>File descriptor for punishments/punishments.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PunishmentsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1wdW5pc2htZW50cy9wdW5pc2htZW50cy5wcm90bxIMbXJ1di5lY29ub215",
            "Ghxnb29nbGUvYXBpL2Fubm90YXRpb25zLnByb3RvIr4BCgpCYW5NZXNzYWdl",
            "Eg4KBnBsYXllchgBIAEoDRIRCgljaGFyYWN0ZXIYAiABKA0SCgoCaXAYAyAB",
            "KAkSFwoPZXhwaXJhdGlvbl9kYXRlGAQgASgDEg4KBnJlYXNvbhgFIAEoCRIN",
            "CgVhZG1pbhgGIAEoDRIQCghiYW5fZGF0ZRgHIAEoAxIOCgZhY3RpdmUYCCAB",
            "KAgSEgoKdW5iYW5fZGF0ZRgJIAEoAxITCgt1bmJhbl9hZG1pbhgKIAEoDSK2",
            "AQoLV2Fybk1lc3NhZ2USDgoGcGxheWVyGAEgASgNEhEKCWNoYXJhY3RlchgC",
            "IAEoDRIXCg9leHBpcmF0aW9uX2RhdGUYAyABKAMSDgoGcmVhc29uGAQgASgJ",
            "Eg0KBWFkbWluGAUgASgNEhEKCXdhcm5fZGF0ZRgGIAEoAxIOCgZhY3RpdmUY",
            "ByABKAgSEwoLdW53YXJuX2RhdGUYCCABKAMSFAoMdW53YXJuX2FkbWluGAkg",
            "ASgNIqEBCgxCbG9ja01lc3NhZ2USDgoGcGxheWVyGAEgASgNEhEKCWNoYXJh",
            "Y3RlchgCIAEoDRIOCgZyZWFzb24YAyABKAkSDQoFYWRtaW4YBCABKA0SEgoK",
            "YmxvY2tfZGF0ZRgFIAEoAxIOCgZhY3RpdmUYBiABKAgSFAoMdW5ibG9ja19k",
            "YXRlGAcgASgDEhUKDXVuYmxvY2tfYWRtaW4YCCABKA0ieAoQQWRtaW5KYWls",
            "TWVzc2FnZRIOCgZwbGF5ZXIYASABKA0SEQoJY2hhcmFjdGVyGAIgASgNEg4K",
            "BnJlYXNvbhgDIAEoCRINCgVhZG1pbhgEIAEoDRIPCgdhal9kYXRlGAUgASgD",
            "EhEKCWphaWxfdGltZRgGIAEoDSIuCgxVbkJhbk1lc3NhZ2USDgoGcGxheWVy",
            "GAEgASgNEg4KBmJhbl9pZBgCIAEoDSIyCg5VbkJsb2NrTWVzc2FnZRIOCgZw",
            "bGF5ZXIYASABKA0SEAoIYmxvY2tfaWQYAiABKA0iMAoNVW5XYXJuTWVzc2Fn",
            "ZRIOCgZwbGF5ZXIYASABKA0SDwoHd2Fybl9pZBgCIAEoDSI3ChJVbkFkbWlu",
            "SmFpbE1lc3NhZ2USDgoGcGxheWVyGAEgASgNEhEKCWNoYXJhY3RlchgCIAEo",
            "DSJoCgpCYW5SZXF1ZXN0Eg4KBnBsYXllchgBIAEoDRIRCgljaGFyYWN0ZXIY",
            "AiABKA0SCgoCaXAYAyABKAkSDAoEdGltZRgEIAEoDRIOCgZyZWFzb24YBSAB",
            "KAkSDQoFYWRtaW4YBiABKA0iHQoLQmFuUmVzcG9uc2USDgoGYmFuX2lkGAEg",
            "ASgNIkAKDEJsb2NrUmVxdWVzdBIRCgljaGFyYWN0ZXIYASABKA0SDgoGcmVh",
            "c29uGAIgASgJEg0KBWFkbWluGAMgASgNIiEKDUJsb2NrUmVzcG9uc2USEAoI",
            "YmxvY2tfaWQYASABKA0iXQoLV2FyblJlcXVlc3QSDgoGcGxheWVyGAEgASgN",
            "EhEKCWNoYXJhY3RlchgCIAEoDRIMCgR0aW1lGAMgASgNEg4KBnJlYXNvbhgE",
            "IAEoCRINCgVhZG1pbhgFIAEoDSIfCgxXYXJuUmVzcG9uc2USDwoHd2Fybl9p",
            "ZBgBIAEoDSJSChBBZG1pbkphaWxSZXF1ZXN0EhEKCWNoYXJhY3RlchgBIAEo",
            "DRIMCgR0aW1lGAIgASgNEg4KBnJlYXNvbhgDIAEoCRINCgVhZG1pbhgEIAEo",
            "DSITChFBZG1pbkphaWxSZXNwb25zZSIpChZNdXRlR2xvYmFsQ2hhdHNSZXF1",
            "ZXN0Eg8KB2FjY291bnQYASABKA0iGQoXTXV0ZUdsb2JhbENoYXRzUmVzcG9u",
            "c2UiHgoMVW5CYW5SZXF1ZXN0Eg4KBmJhbl9pZBgCIAEoDSIPCg1VbkJhblJl",
            "c3BvbnNlIiAKDVVuV2FyblJlcXVlc3QSDwoHd2Fybl9pZBgCIAEoDSIQCg5V",
            "bldhcm5SZXNwb25zZSInChJVbkFkbWluSmFpbFJlcXVlc3QSEQoJY2hhcmFj",
            "dGVyGAEgASgNIhUKE1VuQWRtaW5KYWlsUmVzcG9uc2UiKwoYVW5NdXRlR2xv",
            "YmFsQ2hhdHNSZXF1ZXN0Eg8KB2FjY291bnQYASABKA0iGwoZVW5NdXRlR2xv",
            "YmFsQ2hhdHNSZXNwb25zZSIyChRHZXRQbGF5ZXJCYW5zUmVxdWVzdBIOCgZw",
            "bGF5ZXIYASABKA0SCgoCaXAYAiABKAkiPwoVR2V0UGxheWVyQmFuc1Jlc3Bv",
            "bnNlEiYKBGJhbnMYASADKAsyGC5tcnV2LmVjb25vbXkuQmFuTWVzc2FnZSIn",
            "ChVHZXRQbGF5ZXJXYXJuc1JlcXVlc3QSDgoGcGxheWVyGAEgASgNIkIKFkdl",
            "dFBsYXllcldhcm5zUmVzcG9uc2USKAoFd2FybnMYASADKAsyGS5tcnV2LmVj",
            "b25vbXkuV2Fybk1lc3NhZ2UiLgoZR2V0UGxheWVyQWRtaW5KYWlsUmVxdWVz",
            "dBIRCgljaGFyYWN0ZXIYASABKA0iXAoaR2V0UGxheWVyQWRtaW5KYWlsUmVz",
            "cG9uc2USEQoJamFpbF90aW1lGAEgASgNEg4KBnJlYXNvbhgCIAEoCRINCgVh",
            "ZG1pbhgDIAEoDRIMCgRkYXRlGAQgASgDIhsKDUdldEJhblJlcXVlc3QSCgoC",
            "aWQYASABKA0iHAoOR2V0V2FyblJlcXVlc3QSCgoCaWQYASABKA0iHQoPR2V0",
            "QmxvY2tSZXF1ZXN0EgoKAmlkGAEgASgNIjMKFUlzUGxheWVyQmFubmVkUmVx",
            "dWVzdBIOCgZwbGF5ZXIYASABKA0SCgoCaXAYAiABKAkiOAoWSXNQbGF5ZXJC",
            "YW5uZWRSZXNwb25zZRIOCgZiYW5uZWQYASABKAgSDgoGYmFuX2lkGAIgASgN",
            "Ii4KGUlzQ2hhcmFjdGVyQmxvY2tlZFJlcXVlc3QSEQoJY2hhcmFjdGVyGAEg",
            "ASgNIj8KGklzQ2hhcmFjdGVyQmxvY2tlZFJlc3BvbnNlEg8KB2Jsb2NrZWQY",
            "ASABKAgSEAoIYmxvY2tfaWQYAiABKA0iLQoYSXNDaGFyYWN0ZXJKYWlsZWRS",
            "ZXF1ZXN0EhEKCWNoYXJhY3RlchgBIAEoDSI+ChlJc0NoYXJhY3RlckphaWxl",
            "ZFJlc3BvbnNlEg4KBmphaWxlZBgBIAEoCBIRCglqYWlsX3RpbWUYAiABKA0i",
            "EgoQV2F0Y2hCYW5zUmVxdWVzdCIUChJXYXRjaEJsb2Nrc1JlcXVlc3QiEwoR",
            "V2F0Y2hXYXJuc1JlcXVlc3QiGAoWV2F0Y2hBZG1pbkphaWxzUmVxdWVzdCIU",
            "ChJXYXRjaFVuQmFuc1JlcXVlc3QiFgoUV2F0Y2hVbkJsb2Nrc1JlcXVlc3Qi",
            "FQoTV2F0Y2hVbldhcm5zUmVxdWVzdCIaChhXYXRjaFVuQWRtaW5KYWlsc1Jl",
            "cXVlc3QiHgocV2F0Y2hQbGF5ZXJBY3F1aXR0YWxzUmVxdWVzdCIfCh1XYXRj",
            "aFBsYXllckFjcXVpdHRhbHNSZXNwb25zZSIfCh1XYXRjaFBsYXllclB1bmlz",
            "aG1lbnRzUmVxdWVzdCJjCh5XYXRjaFBsYXllclB1bmlzaG1lbnRzUmVzcG9u",
            "c2USKgoEdHlwZRgBIAEoDjIcLm1ydXYuZWNvbm9teS5QdW5pc2htZW50VHlw",
            "ZRIVCg1wdW5pc2htZW50X2lkGAIgASgNIhkKF1dhdGNoUHVuaXNobWVudHNS",
            "ZXF1ZXN0IoABChhXYXRjaFB1bmlzaG1lbnRzUmVzcG9uc2USKgoEdHlwZRgB",
            "IAEoDjIcLm1ydXYuZWNvbm9teS5QdW5pc2htZW50VHlwZRIVCg1wdW5pc2ht",
            "ZW50X2lkGAIgASgNEg4KBnBsYXllchgDIAEoDRIRCgljaGFyYWN0ZXIYBCAB",
            "KA0qVgoOUHVuaXNobWVudFR5cGUSFgoSVU5LTk9XTl9QVU5JU0hNRU5UEAAS",
            "BwoDQkFOEAESCQoFQkxPQ0sQAhIICgRXQVJOEAMSDgoKQURNSU5fSkFJTBAE",
            "Kl0KDkFjcXVpdHRhbHNUeXBlEhQKEFVOS05PV05fQUNRVUlUQUwQABIJCgVV",
            "TkJBThABEgsKB1VOQkxPQ0sQAhIKCgZVTldBUk4QAxIRCg1VTl9BRE1JTl9K",
            "QUlMEAQy1hgKFk1ydVZQdW5pc2htZW50c1NlcnZpY2USYAoDQmFuEhgubXJ1",
            "di5lY29ub215LkJhblJlcXVlc3QaGS5tcnV2LmVjb25vbXkuQmFuUmVzcG9u",
            "c2UiJILT5JMCHiIcL3YxL3B1bmlzaG1lbnRzL2Jhbi97cGxheWVyfRJrCgVC",
            "bG9jaxIaLm1ydXYuZWNvbm9teS5CbG9ja1JlcXVlc3QaGy5tcnV2LmVjb25v",
            "bXkuQmxvY2tSZXNwb25zZSIpgtPkkwIjIiEvdjEvcHVuaXNobWVudHMvYmxv",
            "Y2sve2NoYXJhY3Rlcn0SZAoEV2FybhIZLm1ydXYuZWNvbm9teS5XYXJuUmVx",
            "dWVzdBoaLm1ydXYuZWNvbm9teS5XYXJuUmVzcG9uc2UiJYLT5JMCHyIdL3Yx",
            "L3B1bmlzaG1lbnRzL3dhcm4ve3BsYXllcn0SdAoJQWRtaW5KYWlsEh4ubXJ1",
            "di5lY29ub215LkFkbWluSmFpbFJlcXVlc3QaHy5tcnV2LmVjb25vbXkuQWRt",
            "aW5KYWlsUmVzcG9uc2UiJoLT5JMCICIeL3YxL3B1bmlzaG1lbnRzL2FqL3tj",
            "aGFyYWN0ZXJ9EoYBCg9NdXRlR2xvYmFsQ2hhdHMSJC5tcnV2LmVjb25vbXku",
            "TXV0ZUdsb2JhbENoYXRzUmVxdWVzdBolLm1ydXYuZWNvbm9teS5NdXRlR2xv",
            "YmFsQ2hhdHNSZXNwb25zZSImgtPkkwIgIh4vdjEvcHVuaXNobWVudHMvbXV0",
            "ZS97YWNjb3VudH0SZgoFVW5CYW4SGi5tcnV2LmVjb25vbXkuVW5CYW5SZXF1",
            "ZXN0GhsubXJ1di5lY29ub215LlVuQmFuUmVzcG9uc2UiJILT5JMCHiocL3Yx",
            "L3B1bmlzaG1lbnRzL2Jhbi97YmFuX2lkfRJrCgZVbldhcm4SGy5tcnV2LmVj",
            "b25vbXkuVW5XYXJuUmVxdWVzdBocLm1ydXYuZWNvbm9teS5Vbldhcm5SZXNw",
            "b25zZSImgtPkkwIgKh4vdjEvcHVuaXNobWVudHMvd2Fybi97d2Fybl9pZH0S",
            "egoLVW5BZG1pbkphaWwSIC5tcnV2LmVjb25vbXkuVW5BZG1pbkphaWxSZXF1",
            "ZXN0GiEubXJ1di5lY29ub215LlVuQWRtaW5KYWlsUmVzcG9uc2UiJoLT5JMC",
            "ICoeL3YxL3B1bmlzaG1lbnRzL2FqL3tjaGFyYWN0ZXJ9EowBChFVbk11dGVH",
            "bG9iYWxDaGF0cxImLm1ydXYuZWNvbm9teS5Vbk11dGVHbG9iYWxDaGF0c1Jl",
            "cXVlc3QaJy5tcnV2LmVjb25vbXkuVW5NdXRlR2xvYmFsQ2hhdHNSZXNwb25z",
            "ZSImgtPkkwIgKh4vdjEvcHVuaXNobWVudHMvbXV0ZS97YWNjb3VudH0SfwoN",
            "R2V0UGxheWVyQmFucxIiLm1ydXYuZWNvbm9teS5HZXRQbGF5ZXJCYW5zUmVx",
            "dWVzdBojLm1ydXYuZWNvbm9teS5HZXRQbGF5ZXJCYW5zUmVzcG9uc2UiJYLT",
            "5JMCHxIdL3YxL3B1bmlzaG1lbnRzL2JhbnMve3BsYXllcn0SgwEKDkdldFBs",
            "YXllcldhcm5zEiMubXJ1di5lY29ub215LkdldFBsYXllcldhcm5zUmVxdWVz",
            "dBokLm1ydXYuZWNvbm9teS5HZXRQbGF5ZXJXYXJuc1Jlc3BvbnNlIiaC0+ST",
            "AiASHi92MS9wdW5pc2htZW50cy93YXJucy97cGxheWVyfRKPAQoSR2V0UGxh",
            "eWVyQWRtaW5KYWlsEicubXJ1di5lY29ub215LkdldFBsYXllckFkbWluSmFp",
            "bFJlcXVlc3QaKC5tcnV2LmVjb25vbXkuR2V0UGxheWVyQWRtaW5KYWlsUmVz",
            "cG9uc2UiJoLT5JMCIBIeL3YxL3B1bmlzaG1lbnRzL2FqL3tjaGFyYWN0ZXJ9",
            "EmIKBkdldEJhbhIbLm1ydXYuZWNvbm9teS5HZXRCYW5SZXF1ZXN0GhgubXJ1",
            "di5lY29ub215LkJhbk1lc3NhZ2UiIYLT5JMCGxIZL3YxL3B1bmlzaG1lbnRz",
            "L2JhbnMve2lkfRJmCgdHZXRXYXJuEhwubXJ1di5lY29ub215LkdldFdhcm5S",
            "ZXF1ZXN0GhkubXJ1di5lY29ub215Lldhcm5NZXNzYWdlIiKC0+STAhwSGi92",
            "MS9wdW5pc2htZW50cy93YXJucy97aWR9EmoKCEdldEJsb2NrEh0ubXJ1di5l",
            "Y29ub215LkdldEJsb2NrUmVxdWVzdBoaLm1ydXYuZWNvbm9teS5CbG9ja01l",
            "c3NhZ2UiI4LT5JMCHRIbL3YxL3B1bmlzaG1lbnRzL2Jsb2Nrcy97aWR9EocB",
            "Cg5Jc1BsYXllckJhbm5lZBIjLm1ydXYuZWNvbm9teS5Jc1BsYXllckJhbm5l",
            "ZFJlcXVlc3QaJC5tcnV2LmVjb25vbXkuSXNQbGF5ZXJCYW5uZWRSZXNwb25z",
            "ZSIqgtPkkwIkEiIvdjEvcHVuaXNobWVudHMvYmFucy97cGxheWVyfS97aXB9",
            "EmkKEklzQ2hhcmFjdGVyQmxvY2tlZBInLm1ydXYuZWNvbm9teS5Jc0NoYXJh",
            "Y3RlckJsb2NrZWRSZXF1ZXN0GigubXJ1di5lY29ub215LklzQ2hhcmFjdGVy",
            "QmxvY2tlZFJlc3BvbnNlIgASZgoRSXNDaGFyYWN0ZXJKYWlsZWQSJi5tcnV2",
            "LmVjb25vbXkuSXNDaGFyYWN0ZXJKYWlsZWRSZXF1ZXN0GicubXJ1di5lY29u",
            "b215LklzQ2hhcmFjdGVySmFpbGVkUmVzcG9uc2UiABJJCglXYXRjaEJhbnMS",
            "Hi5tcnV2LmVjb25vbXkuV2F0Y2hCYW5zUmVxdWVzdBoYLm1ydXYuZWNvbm9t",
            "eS5CYW5NZXNzYWdlIgAwARJPCgtXYXRjaEJsb2NrcxIgLm1ydXYuZWNvbm9t",
            "eS5XYXRjaEJsb2Nrc1JlcXVlc3QaGi5tcnV2LmVjb25vbXkuQmxvY2tNZXNz",
            "YWdlIgAwARJMCgpXYXRjaFdhcm5zEh8ubXJ1di5lY29ub215LldhdGNoV2Fy",
            "bnNSZXF1ZXN0GhkubXJ1di5lY29ub215Lldhcm5NZXNzYWdlIgAwARJbCg9X",
            "YXRjaEFkbWluSmFpbHMSJC5tcnV2LmVjb25vbXkuV2F0Y2hBZG1pbkphaWxz",
            "UmVxdWVzdBoeLm1ydXYuZWNvbm9teS5BZG1pbkphaWxNZXNzYWdlIgAwARJP",
            "CgtXYXRjaFVuQmFucxIgLm1ydXYuZWNvbm9teS5XYXRjaFVuQmFuc1JlcXVl",
            "c3QaGi5tcnV2LmVjb25vbXkuVW5CYW5NZXNzYWdlIgAwARJVCg1XYXRjaFVu",
            "QmxvY2tzEiIubXJ1di5lY29ub215LldhdGNoVW5CbG9ja3NSZXF1ZXN0Ghwu",
            "bXJ1di5lY29ub215LlVuQmxvY2tNZXNzYWdlIgAwARJSCgxXYXRjaFVuV2Fy",
            "bnMSIS5tcnV2LmVjb25vbXkuV2F0Y2hVbldhcm5zUmVxdWVzdBobLm1ydXYu",
            "ZWNvbm9teS5Vbldhcm5NZXNzYWdlIgAwARJhChFXYXRjaFVuQWRtaW5KYWls",
            "cxImLm1ydXYuZWNvbm9teS5XYXRjaFVuQWRtaW5KYWlsc1JlcXVlc3QaIC5t",
            "cnV2LmVjb25vbXkuVW5BZG1pbkphaWxNZXNzYWdlIgAwARJ3ChZXYXRjaFBs",
            "YXllclB1bmlzaG1lbnRzEisubXJ1di5lY29ub215LldhdGNoUGxheWVyUHVu",
            "aXNobWVudHNSZXF1ZXN0GiwubXJ1di5lY29ub215LldhdGNoUGxheWVyUHVu",
            "aXNobWVudHNSZXNwb25zZSIAMAESdAoVV2F0Y2hQbGF5ZXJBY3F1aXR0YWxz",
            "EioubXJ1di5lY29ub215LldhdGNoUGxheWVyQWNxdWl0dGFsc1JlcXVlc3Qa",
            "Ky5tcnV2LmVjb25vbXkuV2F0Y2hQbGF5ZXJBY3F1aXR0YWxzUmVzcG9uc2Ui",
            "ADABEmUKEFdhdGNoUHVuaXNobWVudHMSJS5tcnV2LmVjb25vbXkuV2F0Y2hQ",
            "dW5pc2htZW50c1JlcXVlc3QaJi5tcnV2LmVjb25vbXkuV2F0Y2hQdW5pc2ht",
            "ZW50c1Jlc3BvbnNlIgAwAUIrWilnaXRodWIuY29tL01ydVYtUlAvbXJ1di1w",
            "Yi1nby9wdW5pc2htZW50c2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Mruv.Economy.PunishmentType), typeof(global::Mruv.Economy.AcquittalsType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.BanMessage), global::Mruv.Economy.BanMessage.Parser, new[]{ "Player", "Character", "Ip", "ExpirationDate", "Reason", "Admin", "BanDate", "Active", "UnbanDate", "UnbanAdmin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.WarnMessage), global::Mruv.Economy.WarnMessage.Parser, new[]{ "Player", "Character", "ExpirationDate", "Reason", "Admin", "WarnDate", "Active", "UnwarnDate", "UnwarnAdmin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.BlockMessage), global::Mruv.Economy.BlockMessage.Parser, new[]{ "Player", "Character", "Reason", "Admin", "BlockDate", "Active", "UnblockDate", "UnblockAdmin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.AdminJailMessage), global::Mruv.Economy.AdminJailMessage.Parser, new[]{ "Player", "Character", "Reason", "Admin", "AjDate", "JailTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.UnBanMessage), global::Mruv.Economy.UnBanMessage.Parser, new[]{ "Player", "BanId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.UnBlockMessage), global::Mruv.Economy.UnBlockMessage.Parser, new[]{ "Player", "BlockId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.UnWarnMessage), global::Mruv.Economy.UnWarnMessage.Parser, new[]{ "Player", "WarnId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.UnAdminJailMessage), global::Mruv.Economy.UnAdminJailMessage.Parser, new[]{ "Player", "Character" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.BanRequest), global::Mruv.Economy.BanRequest.Parser, new[]{ "Player", "Character", "Ip", "Time", "Reason", "Admin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.BanResponse), global::Mruv.Economy.BanResponse.Parser, new[]{ "BanId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.BlockRequest), global::Mruv.Economy.BlockRequest.Parser, new[]{ "Character", "Reason", "Admin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.BlockResponse), global::Mruv.Economy.BlockResponse.Parser, new[]{ "BlockId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.WarnRequest), global::Mruv.Economy.WarnRequest.Parser, new[]{ "Player", "Character", "Time", "Reason", "Admin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.WarnResponse), global::Mruv.Economy.WarnResponse.Parser, new[]{ "WarnId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.AdminJailRequest), global::Mruv.Economy.AdminJailRequest.Parser, new[]{ "Character", "Time", "Reason", "Admin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.AdminJailResponse), global::Mruv.Economy.AdminJailResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.MuteGlobalChatsRequest), global::Mruv.Economy.MuteGlobalChatsRequest.Parser, new[]{ "Account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.MuteGlobalChatsResponse), global::Mruv.Economy.MuteGlobalChatsResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.UnBanRequest), global::Mruv.Economy.UnBanRequest.Parser, new[]{ "BanId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.UnBanResponse), global::Mruv.Economy.UnBanResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.UnWarnRequest), global::Mruv.Economy.UnWarnRequest.Parser, new[]{ "WarnId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.UnWarnResponse), global::Mruv.Economy.UnWarnResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.UnAdminJailRequest), global::Mruv.Economy.UnAdminJailRequest.Parser, new[]{ "Character" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.UnAdminJailResponse), global::Mruv.Economy.UnAdminJailResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.UnMuteGlobalChatsRequest), global::Mruv.Economy.UnMuteGlobalChatsRequest.Parser, new[]{ "Account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.UnMuteGlobalChatsResponse), global::Mruv.Economy.UnMuteGlobalChatsResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.GetPlayerBansRequest), global::Mruv.Economy.GetPlayerBansRequest.Parser, new[]{ "Player", "Ip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.GetPlayerBansResponse), global::Mruv.Economy.GetPlayerBansResponse.Parser, new[]{ "Bans" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.GetPlayerWarnsRequest), global::Mruv.Economy.GetPlayerWarnsRequest.Parser, new[]{ "Player" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.GetPlayerWarnsResponse), global::Mruv.Economy.GetPlayerWarnsResponse.Parser, new[]{ "Warns" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.GetPlayerAdminJailRequest), global::Mruv.Economy.GetPlayerAdminJailRequest.Parser, new[]{ "Character" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.GetPlayerAdminJailResponse), global::Mruv.Economy.GetPlayerAdminJailResponse.Parser, new[]{ "JailTime", "Reason", "Admin", "Date" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.GetBanRequest), global::Mruv.Economy.GetBanRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.GetWarnRequest), global::Mruv.Economy.GetWarnRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.GetBlockRequest), global::Mruv.Economy.GetBlockRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.IsPlayerBannedRequest), global::Mruv.Economy.IsPlayerBannedRequest.Parser, new[]{ "Player", "Ip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.IsPlayerBannedResponse), global::Mruv.Economy.IsPlayerBannedResponse.Parser, new[]{ "Banned", "BanId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.IsCharacterBlockedRequest), global::Mruv.Economy.IsCharacterBlockedRequest.Parser, new[]{ "Character" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.IsCharacterBlockedResponse), global::Mruv.Economy.IsCharacterBlockedResponse.Parser, new[]{ "Blocked", "BlockId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.IsCharacterJailedRequest), global::Mruv.Economy.IsCharacterJailedRequest.Parser, new[]{ "Character" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.IsCharacterJailedResponse), global::Mruv.Economy.IsCharacterJailedResponse.Parser, new[]{ "Jailed", "JailTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.WatchBansRequest), global::Mruv.Economy.WatchBansRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.WatchBlocksRequest), global::Mruv.Economy.WatchBlocksRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.WatchWarnsRequest), global::Mruv.Economy.WatchWarnsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.WatchAdminJailsRequest), global::Mruv.Economy.WatchAdminJailsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.WatchUnBansRequest), global::Mruv.Economy.WatchUnBansRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.WatchUnBlocksRequest), global::Mruv.Economy.WatchUnBlocksRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.WatchUnWarnsRequest), global::Mruv.Economy.WatchUnWarnsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.WatchUnAdminJailsRequest), global::Mruv.Economy.WatchUnAdminJailsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.WatchPlayerAcquittalsRequest), global::Mruv.Economy.WatchPlayerAcquittalsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.WatchPlayerAcquittalsResponse), global::Mruv.Economy.WatchPlayerAcquittalsResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.WatchPlayerPunishmentsRequest), global::Mruv.Economy.WatchPlayerPunishmentsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.WatchPlayerPunishmentsResponse), global::Mruv.Economy.WatchPlayerPunishmentsResponse.Parser, new[]{ "Type", "PunishmentId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.WatchPunishmentsRequest), global::Mruv.Economy.WatchPunishmentsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mruv.Economy.WatchPunishmentsResponse), global::Mruv.Economy.WatchPunishmentsResponse.Parser, new[]{ "Type", "PunishmentId", "Player", "Character" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PunishmentType {
    [pbr::OriginalName("UNKNOWN_PUNISHMENT")] UnknownPunishment = 0,
    [pbr::OriginalName("BAN")] Ban = 1,
    [pbr::OriginalName("BLOCK")] Block = 2,
    [pbr::OriginalName("WARN")] Warn = 3,
    [pbr::OriginalName("ADMIN_JAIL")] AdminJail = 4,
  }

  public enum AcquittalsType {
    [pbr::OriginalName("UNKNOWN_ACQUITAL")] UnknownAcquital = 0,
    [pbr::OriginalName("UNBAN")] Unban = 1,
    [pbr::OriginalName("UNBLOCK")] Unblock = 2,
    [pbr::OriginalName("UNWARN")] Unwarn = 3,
    [pbr::OriginalName("UN_ADMIN_JAIL")] UnAdminJail = 4,
  }

  #endregion

  #region Messages
  public sealed partial class BanMessage : pb::IMessage<BanMessage> {
    private static readonly pb::MessageParser<BanMessage> _parser = new pb::MessageParser<BanMessage>(() => new BanMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BanMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BanMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BanMessage(BanMessage other) : this() {
      player_ = other.player_;
      character_ = other.character_;
      ip_ = other.ip_;
      expirationDate_ = other.expirationDate_;
      reason_ = other.reason_;
      admin_ = other.admin_;
      banDate_ = other.banDate_;
      active_ = other.active_;
      unbanDate_ = other.unbanDate_;
      unbanAdmin_ = other.unbanAdmin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BanMessage Clone() {
      return new BanMessage(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private uint player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 2;
    private uint character_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 3;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiration_date" field.</summary>
    public const int ExpirationDateFieldNumber = 4;
    private long expirationDate_;
    /// <summary>
    /// Expiration date in Unix time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpirationDate {
      get { return expirationDate_; }
      set {
        expirationDate_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 5;
    private string reason_ = "";
    /// <summary>
    /// A ban reason.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 6;
    private uint admin_;
    /// <summary>
    /// Admin that banned a player. 0 = system ban.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    /// <summary>Field number for the "ban_date" field.</summary>
    public const int BanDateFieldNumber = 7;
    private long banDate_;
    /// <summary>
    /// Date on which a ban was issued in Unix time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BanDate {
      get { return banDate_; }
      set {
        banDate_ = value;
      }
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 8;
    private bool active_;
    /// <summary>
    /// Ban status. True = active, false = deactivated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "unban_date" field.</summary>
    public const int UnbanDateFieldNumber = 9;
    private long unbanDate_;
    /// <summary>
    /// Date of unban in Unix time.
    /// This field is set only when ban was deactivated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnbanDate {
      get { return unbanDate_; }
      set {
        unbanDate_ = value;
      }
    }

    /// <summary>Field number for the "unban_admin" field.</summary>
    public const int UnbanAdminFieldNumber = 10;
    private uint unbanAdmin_;
    /// <summary>
    /// Admin that deactivated this ban.
    /// This field is set only when ban was deactivated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnbanAdmin {
      get { return unbanAdmin_; }
      set {
        unbanAdmin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BanMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BanMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player != other.Player) return false;
      if (Character != other.Character) return false;
      if (Ip != other.Ip) return false;
      if (ExpirationDate != other.ExpirationDate) return false;
      if (Reason != other.Reason) return false;
      if (Admin != other.Admin) return false;
      if (BanDate != other.BanDate) return false;
      if (Active != other.Active) return false;
      if (UnbanDate != other.UnbanDate) return false;
      if (UnbanAdmin != other.UnbanAdmin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player != 0) hash ^= Player.GetHashCode();
      if (Character != 0) hash ^= Character.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (ExpirationDate != 0L) hash ^= ExpirationDate.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (Admin != 0) hash ^= Admin.GetHashCode();
      if (BanDate != 0L) hash ^= BanDate.GetHashCode();
      if (Active != false) hash ^= Active.GetHashCode();
      if (UnbanDate != 0L) hash ^= UnbanDate.GetHashCode();
      if (UnbanAdmin != 0) hash ^= UnbanAdmin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Player);
      }
      if (Character != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Character);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ip);
      }
      if (ExpirationDate != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ExpirationDate);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Reason);
      }
      if (Admin != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Admin);
      }
      if (BanDate != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(BanDate);
      }
      if (Active != false) {
        output.WriteRawTag(64);
        output.WriteBool(Active);
      }
      if (UnbanDate != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(UnbanDate);
      }
      if (UnbanAdmin != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(UnbanAdmin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Player);
      }
      if (Character != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Character);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (ExpirationDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpirationDate);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (Admin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Admin);
      }
      if (BanDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BanDate);
      }
      if (Active != false) {
        size += 1 + 1;
      }
      if (UnbanDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnbanDate);
      }
      if (UnbanAdmin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnbanAdmin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BanMessage other) {
      if (other == null) {
        return;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.Character != 0) {
        Character = other.Character;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.ExpirationDate != 0L) {
        ExpirationDate = other.ExpirationDate;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      if (other.Admin != 0) {
        Admin = other.Admin;
      }
      if (other.BanDate != 0L) {
        BanDate = other.BanDate;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      if (other.UnbanDate != 0L) {
        UnbanDate = other.UnbanDate;
      }
      if (other.UnbanAdmin != 0) {
        UnbanAdmin = other.UnbanAdmin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player = input.ReadUInt32();
            break;
          }
          case 16: {
            Character = input.ReadUInt32();
            break;
          }
          case 26: {
            Ip = input.ReadString();
            break;
          }
          case 32: {
            ExpirationDate = input.ReadInt64();
            break;
          }
          case 42: {
            Reason = input.ReadString();
            break;
          }
          case 48: {
            Admin = input.ReadUInt32();
            break;
          }
          case 56: {
            BanDate = input.ReadInt64();
            break;
          }
          case 64: {
            Active = input.ReadBool();
            break;
          }
          case 72: {
            UnbanDate = input.ReadInt64();
            break;
          }
          case 80: {
            UnbanAdmin = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WarnMessage : pb::IMessage<WarnMessage> {
    private static readonly pb::MessageParser<WarnMessage> _parser = new pb::MessageParser<WarnMessage>(() => new WarnMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarnMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarnMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarnMessage(WarnMessage other) : this() {
      player_ = other.player_;
      character_ = other.character_;
      expirationDate_ = other.expirationDate_;
      reason_ = other.reason_;
      admin_ = other.admin_;
      warnDate_ = other.warnDate_;
      active_ = other.active_;
      unwarnDate_ = other.unwarnDate_;
      unwarnAdmin_ = other.unwarnAdmin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarnMessage Clone() {
      return new WarnMessage(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private uint player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 2;
    private uint character_;
    /// <summary>
    /// A character, that was given a warning.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    /// <summary>Field number for the "expiration_date" field.</summary>
    public const int ExpirationDateFieldNumber = 3;
    private long expirationDate_;
    /// <summary>
    /// Expiration date in Unix time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpirationDate {
      get { return expirationDate_; }
      set {
        expirationDate_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 4;
    private string reason_ = "";
    /// <summary>
    /// A warn reason.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 5;
    private uint admin_;
    /// <summary>
    /// Admin that warned a player. 0 = system warn.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    /// <summary>Field number for the "warn_date" field.</summary>
    public const int WarnDateFieldNumber = 6;
    private long warnDate_;
    /// <summary>
    /// Date on which a warn was issued in Unix time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WarnDate {
      get { return warnDate_; }
      set {
        warnDate_ = value;
      }
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 7;
    private bool active_;
    /// <summary>
    /// Warn status. True = active, false = deactivated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "unwarn_date" field.</summary>
    public const int UnwarnDateFieldNumber = 8;
    private long unwarnDate_;
    /// <summary>
    /// Date of unwarn in Unix time.
    /// This field is set only when warn was deactivated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnwarnDate {
      get { return unwarnDate_; }
      set {
        unwarnDate_ = value;
      }
    }

    /// <summary>Field number for the "unwarn_admin" field.</summary>
    public const int UnwarnAdminFieldNumber = 9;
    private uint unwarnAdmin_;
    /// <summary>
    /// Admin that deactivated a warn.
    /// This field is set only when warn was deactivated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnwarnAdmin {
      get { return unwarnAdmin_; }
      set {
        unwarnAdmin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarnMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarnMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player != other.Player) return false;
      if (Character != other.Character) return false;
      if (ExpirationDate != other.ExpirationDate) return false;
      if (Reason != other.Reason) return false;
      if (Admin != other.Admin) return false;
      if (WarnDate != other.WarnDate) return false;
      if (Active != other.Active) return false;
      if (UnwarnDate != other.UnwarnDate) return false;
      if (UnwarnAdmin != other.UnwarnAdmin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player != 0) hash ^= Player.GetHashCode();
      if (Character != 0) hash ^= Character.GetHashCode();
      if (ExpirationDate != 0L) hash ^= ExpirationDate.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (Admin != 0) hash ^= Admin.GetHashCode();
      if (WarnDate != 0L) hash ^= WarnDate.GetHashCode();
      if (Active != false) hash ^= Active.GetHashCode();
      if (UnwarnDate != 0L) hash ^= UnwarnDate.GetHashCode();
      if (UnwarnAdmin != 0) hash ^= UnwarnAdmin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Player);
      }
      if (Character != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Character);
      }
      if (ExpirationDate != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ExpirationDate);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Reason);
      }
      if (Admin != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Admin);
      }
      if (WarnDate != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(WarnDate);
      }
      if (Active != false) {
        output.WriteRawTag(56);
        output.WriteBool(Active);
      }
      if (UnwarnDate != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(UnwarnDate);
      }
      if (UnwarnAdmin != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(UnwarnAdmin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Player);
      }
      if (Character != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Character);
      }
      if (ExpirationDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpirationDate);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (Admin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Admin);
      }
      if (WarnDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WarnDate);
      }
      if (Active != false) {
        size += 1 + 1;
      }
      if (UnwarnDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnwarnDate);
      }
      if (UnwarnAdmin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnwarnAdmin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarnMessage other) {
      if (other == null) {
        return;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.Character != 0) {
        Character = other.Character;
      }
      if (other.ExpirationDate != 0L) {
        ExpirationDate = other.ExpirationDate;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      if (other.Admin != 0) {
        Admin = other.Admin;
      }
      if (other.WarnDate != 0L) {
        WarnDate = other.WarnDate;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      if (other.UnwarnDate != 0L) {
        UnwarnDate = other.UnwarnDate;
      }
      if (other.UnwarnAdmin != 0) {
        UnwarnAdmin = other.UnwarnAdmin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player = input.ReadUInt32();
            break;
          }
          case 16: {
            Character = input.ReadUInt32();
            break;
          }
          case 24: {
            ExpirationDate = input.ReadInt64();
            break;
          }
          case 34: {
            Reason = input.ReadString();
            break;
          }
          case 40: {
            Admin = input.ReadUInt32();
            break;
          }
          case 48: {
            WarnDate = input.ReadInt64();
            break;
          }
          case 56: {
            Active = input.ReadBool();
            break;
          }
          case 64: {
            UnwarnDate = input.ReadInt64();
            break;
          }
          case 72: {
            UnwarnAdmin = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockMessage : pb::IMessage<BlockMessage> {
    private static readonly pb::MessageParser<BlockMessage> _parser = new pb::MessageParser<BlockMessage>(() => new BlockMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockMessage(BlockMessage other) : this() {
      player_ = other.player_;
      character_ = other.character_;
      reason_ = other.reason_;
      admin_ = other.admin_;
      blockDate_ = other.blockDate_;
      active_ = other.active_;
      unblockDate_ = other.unblockDate_;
      unblockAdmin_ = other.unblockAdmin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockMessage Clone() {
      return new BlockMessage(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private uint player_;
    /// <summary>
    /// A player, that owns a blocked character.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 2;
    private uint character_;
    /// <summary>
    /// Blocked character.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 3;
    private string reason_ = "";
    /// <summary>
    /// A block reason.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 4;
    private uint admin_;
    /// <summary>
    /// Admin that blocked a player. 0 = system block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    /// <summary>Field number for the "block_date" field.</summary>
    public const int BlockDateFieldNumber = 5;
    private long blockDate_;
    /// <summary>
    /// Date on which a block was issued in Unix time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockDate {
      get { return blockDate_; }
      set {
        blockDate_ = value;
      }
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 6;
    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "unblock_date" field.</summary>
    public const int UnblockDateFieldNumber = 7;
    private long unblockDate_;
    /// <summary>
    /// Date of unblock in Unix time.
    /// This field is set only when a block was deactivated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnblockDate {
      get { return unblockDate_; }
      set {
        unblockDate_ = value;
      }
    }

    /// <summary>Field number for the "unblock_admin" field.</summary>
    public const int UnblockAdminFieldNumber = 8;
    private uint unblockAdmin_;
    /// <summary>
    /// An admin that unblocked a player.
    /// This field is set only when a block was deactivated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnblockAdmin {
      get { return unblockAdmin_; }
      set {
        unblockAdmin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player != other.Player) return false;
      if (Character != other.Character) return false;
      if (Reason != other.Reason) return false;
      if (Admin != other.Admin) return false;
      if (BlockDate != other.BlockDate) return false;
      if (Active != other.Active) return false;
      if (UnblockDate != other.UnblockDate) return false;
      if (UnblockAdmin != other.UnblockAdmin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player != 0) hash ^= Player.GetHashCode();
      if (Character != 0) hash ^= Character.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (Admin != 0) hash ^= Admin.GetHashCode();
      if (BlockDate != 0L) hash ^= BlockDate.GetHashCode();
      if (Active != false) hash ^= Active.GetHashCode();
      if (UnblockDate != 0L) hash ^= UnblockDate.GetHashCode();
      if (UnblockAdmin != 0) hash ^= UnblockAdmin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Player);
      }
      if (Character != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Character);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Reason);
      }
      if (Admin != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Admin);
      }
      if (BlockDate != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(BlockDate);
      }
      if (Active != false) {
        output.WriteRawTag(48);
        output.WriteBool(Active);
      }
      if (UnblockDate != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(UnblockDate);
      }
      if (UnblockAdmin != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(UnblockAdmin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Player);
      }
      if (Character != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Character);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (Admin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Admin);
      }
      if (BlockDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockDate);
      }
      if (Active != false) {
        size += 1 + 1;
      }
      if (UnblockDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnblockDate);
      }
      if (UnblockAdmin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnblockAdmin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockMessage other) {
      if (other == null) {
        return;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.Character != 0) {
        Character = other.Character;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      if (other.Admin != 0) {
        Admin = other.Admin;
      }
      if (other.BlockDate != 0L) {
        BlockDate = other.BlockDate;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      if (other.UnblockDate != 0L) {
        UnblockDate = other.UnblockDate;
      }
      if (other.UnblockAdmin != 0) {
        UnblockAdmin = other.UnblockAdmin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player = input.ReadUInt32();
            break;
          }
          case 16: {
            Character = input.ReadUInt32();
            break;
          }
          case 26: {
            Reason = input.ReadString();
            break;
          }
          case 32: {
            Admin = input.ReadUInt32();
            break;
          }
          case 40: {
            BlockDate = input.ReadInt64();
            break;
          }
          case 48: {
            Active = input.ReadBool();
            break;
          }
          case 56: {
            UnblockDate = input.ReadInt64();
            break;
          }
          case 64: {
            UnblockAdmin = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AdminJailMessage : pb::IMessage<AdminJailMessage> {
    private static readonly pb::MessageParser<AdminJailMessage> _parser = new pb::MessageParser<AdminJailMessage>(() => new AdminJailMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdminJailMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminJailMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminJailMessage(AdminJailMessage other) : this() {
      player_ = other.player_;
      character_ = other.character_;
      reason_ = other.reason_;
      admin_ = other.admin_;
      ajDate_ = other.ajDate_;
      jailTime_ = other.jailTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminJailMessage Clone() {
      return new AdminJailMessage(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private uint player_;
    /// <summary>
    /// A player, that owns a jailed character.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 2;
    private uint character_;
    /// <summary>
    /// Character that has been jailed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 3;
    private string reason_ = "";
    /// <summary>
    /// An admin jail reason.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 4;
    private uint admin_;
    /// <summary>
    /// Admin that jail a player. 0 = system jail.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    /// <summary>Field number for the "aj_date" field.</summary>
    public const int AjDateFieldNumber = 5;
    private long ajDate_;
    /// <summary>
    /// Date on which an admin jail was issued in Unix time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AjDate {
      get { return ajDate_; }
      set {
        ajDate_ = value;
      }
    }

    /// <summary>Field number for the "jail_time" field.</summary>
    public const int JailTimeFieldNumber = 6;
    private uint jailTime_;
    /// <summary>
    /// Time of admin jail in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JailTime {
      get { return jailTime_; }
      set {
        jailTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdminJailMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdminJailMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player != other.Player) return false;
      if (Character != other.Character) return false;
      if (Reason != other.Reason) return false;
      if (Admin != other.Admin) return false;
      if (AjDate != other.AjDate) return false;
      if (JailTime != other.JailTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player != 0) hash ^= Player.GetHashCode();
      if (Character != 0) hash ^= Character.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (Admin != 0) hash ^= Admin.GetHashCode();
      if (AjDate != 0L) hash ^= AjDate.GetHashCode();
      if (JailTime != 0) hash ^= JailTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Player);
      }
      if (Character != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Character);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Reason);
      }
      if (Admin != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Admin);
      }
      if (AjDate != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(AjDate);
      }
      if (JailTime != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(JailTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Player);
      }
      if (Character != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Character);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (Admin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Admin);
      }
      if (AjDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AjDate);
      }
      if (JailTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JailTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdminJailMessage other) {
      if (other == null) {
        return;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.Character != 0) {
        Character = other.Character;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      if (other.Admin != 0) {
        Admin = other.Admin;
      }
      if (other.AjDate != 0L) {
        AjDate = other.AjDate;
      }
      if (other.JailTime != 0) {
        JailTime = other.JailTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player = input.ReadUInt32();
            break;
          }
          case 16: {
            Character = input.ReadUInt32();
            break;
          }
          case 26: {
            Reason = input.ReadString();
            break;
          }
          case 32: {
            Admin = input.ReadUInt32();
            break;
          }
          case 40: {
            AjDate = input.ReadInt64();
            break;
          }
          case 48: {
            JailTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnBanMessage : pb::IMessage<UnBanMessage> {
    private static readonly pb::MessageParser<UnBanMessage> _parser = new pb::MessageParser<UnBanMessage>(() => new UnBanMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnBanMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnBanMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnBanMessage(UnBanMessage other) : this() {
      player_ = other.player_;
      banId_ = other.banId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnBanMessage Clone() {
      return new UnBanMessage(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private uint player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "ban_id" field.</summary>
    public const int BanIdFieldNumber = 2;
    private uint banId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BanId {
      get { return banId_; }
      set {
        banId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnBanMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnBanMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player != other.Player) return false;
      if (BanId != other.BanId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player != 0) hash ^= Player.GetHashCode();
      if (BanId != 0) hash ^= BanId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Player);
      }
      if (BanId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Player);
      }
      if (BanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BanId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnBanMessage other) {
      if (other == null) {
        return;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.BanId != 0) {
        BanId = other.BanId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player = input.ReadUInt32();
            break;
          }
          case 16: {
            BanId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnBlockMessage : pb::IMessage<UnBlockMessage> {
    private static readonly pb::MessageParser<UnBlockMessage> _parser = new pb::MessageParser<UnBlockMessage>(() => new UnBlockMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnBlockMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnBlockMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnBlockMessage(UnBlockMessage other) : this() {
      player_ = other.player_;
      blockId_ = other.blockId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnBlockMessage Clone() {
      return new UnBlockMessage(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private uint player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "block_id" field.</summary>
    public const int BlockIdFieldNumber = 2;
    private uint blockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BlockId {
      get { return blockId_; }
      set {
        blockId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnBlockMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnBlockMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player != other.Player) return false;
      if (BlockId != other.BlockId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player != 0) hash ^= Player.GetHashCode();
      if (BlockId != 0) hash ^= BlockId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Player);
      }
      if (BlockId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BlockId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Player);
      }
      if (BlockId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BlockId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnBlockMessage other) {
      if (other == null) {
        return;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.BlockId != 0) {
        BlockId = other.BlockId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player = input.ReadUInt32();
            break;
          }
          case 16: {
            BlockId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnWarnMessage : pb::IMessage<UnWarnMessage> {
    private static readonly pb::MessageParser<UnWarnMessage> _parser = new pb::MessageParser<UnWarnMessage>(() => new UnWarnMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnWarnMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnWarnMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnWarnMessage(UnWarnMessage other) : this() {
      player_ = other.player_;
      warnId_ = other.warnId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnWarnMessage Clone() {
      return new UnWarnMessage(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private uint player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "warn_id" field.</summary>
    public const int WarnIdFieldNumber = 2;
    private uint warnId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WarnId {
      get { return warnId_; }
      set {
        warnId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnWarnMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnWarnMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player != other.Player) return false;
      if (WarnId != other.WarnId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player != 0) hash ^= Player.GetHashCode();
      if (WarnId != 0) hash ^= WarnId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Player);
      }
      if (WarnId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(WarnId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Player);
      }
      if (WarnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WarnId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnWarnMessage other) {
      if (other == null) {
        return;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.WarnId != 0) {
        WarnId = other.WarnId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player = input.ReadUInt32();
            break;
          }
          case 16: {
            WarnId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnAdminJailMessage : pb::IMessage<UnAdminJailMessage> {
    private static readonly pb::MessageParser<UnAdminJailMessage> _parser = new pb::MessageParser<UnAdminJailMessage>(() => new UnAdminJailMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnAdminJailMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnAdminJailMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnAdminJailMessage(UnAdminJailMessage other) : this() {
      player_ = other.player_;
      character_ = other.character_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnAdminJailMessage Clone() {
      return new UnAdminJailMessage(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private uint player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 2;
    private uint character_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnAdminJailMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnAdminJailMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player != other.Player) return false;
      if (Character != other.Character) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player != 0) hash ^= Player.GetHashCode();
      if (Character != 0) hash ^= Character.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Player);
      }
      if (Character != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Character);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Player);
      }
      if (Character != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Character);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnAdminJailMessage other) {
      if (other == null) {
        return;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.Character != 0) {
        Character = other.Character;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player = input.ReadUInt32();
            break;
          }
          case 16: {
            Character = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `Ban`.
  /// </summary>
  public sealed partial class BanRequest : pb::IMessage<BanRequest> {
    private static readonly pb::MessageParser<BanRequest> _parser = new pb::MessageParser<BanRequest>(() => new BanRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BanRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BanRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BanRequest(BanRequest other) : this() {
      player_ = other.player_;
      character_ = other.character_;
      ip_ = other.ip_;
      time_ = other.time_;
      reason_ = other.reason_;
      admin_ = other.admin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BanRequest Clone() {
      return new BanRequest(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private uint player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 2;
    private uint character_;
    /// <summary>
    /// Player character that was accused.
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 3;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private uint time_;
    /// <summary>
    /// Ban expiration time in days. 0 = permanent ban.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 5;
    private string reason_ = "";
    /// <summary>
    /// Ban reason.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 6;
    private uint admin_;
    /// <summary>
    /// Admin that banned a player. 0 = system ban.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BanRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BanRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player != other.Player) return false;
      if (Character != other.Character) return false;
      if (Ip != other.Ip) return false;
      if (Time != other.Time) return false;
      if (Reason != other.Reason) return false;
      if (Admin != other.Admin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player != 0) hash ^= Player.GetHashCode();
      if (Character != 0) hash ^= Character.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (Admin != 0) hash ^= Admin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Player);
      }
      if (Character != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Character);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ip);
      }
      if (Time != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Time);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Reason);
      }
      if (Admin != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Admin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Player);
      }
      if (Character != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Character);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (Admin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Admin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BanRequest other) {
      if (other == null) {
        return;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.Character != 0) {
        Character = other.Character;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      if (other.Admin != 0) {
        Admin = other.Admin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player = input.ReadUInt32();
            break;
          }
          case 16: {
            Character = input.ReadUInt32();
            break;
          }
          case 26: {
            Ip = input.ReadString();
            break;
          }
          case 32: {
            Time = input.ReadUInt32();
            break;
          }
          case 42: {
            Reason = input.ReadString();
            break;
          }
          case 48: {
            Admin = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response message for rpc `Ban`.
  /// </summary>
  public sealed partial class BanResponse : pb::IMessage<BanResponse> {
    private static readonly pb::MessageParser<BanResponse> _parser = new pb::MessageParser<BanResponse>(() => new BanResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BanResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BanResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BanResponse(BanResponse other) : this() {
      banId_ = other.banId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BanResponse Clone() {
      return new BanResponse(this);
    }

    /// <summary>Field number for the "ban_id" field.</summary>
    public const int BanIdFieldNumber = 1;
    private uint banId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BanId {
      get { return banId_; }
      set {
        banId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BanResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BanResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BanId != other.BanId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BanId != 0) hash ^= BanId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BanId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BanId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BanResponse other) {
      if (other == null) {
        return;
      }
      if (other.BanId != 0) {
        BanId = other.BanId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BanId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `Block`.
  /// </summary>
  public sealed partial class BlockRequest : pb::IMessage<BlockRequest> {
    private static readonly pb::MessageParser<BlockRequest> _parser = new pb::MessageParser<BlockRequest>(() => new BlockRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockRequest(BlockRequest other) : this() {
      character_ = other.character_;
      reason_ = other.reason_;
      admin_ = other.admin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockRequest Clone() {
      return new BlockRequest(this);
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 1;
    private uint character_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private string reason_ = "";
    /// <summary>
    /// Block reason.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 3;
    private uint admin_;
    /// <summary>
    /// Admin that blocked a player. 0 = system ban.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Character != other.Character) return false;
      if (Reason != other.Reason) return false;
      if (Admin != other.Admin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Character != 0) hash ^= Character.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (Admin != 0) hash ^= Admin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Character != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Character);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
      if (Admin != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Admin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Character != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Character);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (Admin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Admin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockRequest other) {
      if (other == null) {
        return;
      }
      if (other.Character != 0) {
        Character = other.Character;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      if (other.Admin != 0) {
        Admin = other.Admin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Character = input.ReadUInt32();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
          case 24: {
            Admin = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response message for rpc `Block`.
  /// </summary>
  public sealed partial class BlockResponse : pb::IMessage<BlockResponse> {
    private static readonly pb::MessageParser<BlockResponse> _parser = new pb::MessageParser<BlockResponse>(() => new BlockResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockResponse(BlockResponse other) : this() {
      blockId_ = other.blockId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockResponse Clone() {
      return new BlockResponse(this);
    }

    /// <summary>Field number for the "block_id" field.</summary>
    public const int BlockIdFieldNumber = 1;
    private uint blockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BlockId {
      get { return blockId_; }
      set {
        blockId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockId != other.BlockId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockId != 0) hash ^= BlockId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BlockId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BlockId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockResponse other) {
      if (other == null) {
        return;
      }
      if (other.BlockId != 0) {
        BlockId = other.BlockId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BlockId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `Warn`.
  /// </summary>
  public sealed partial class WarnRequest : pb::IMessage<WarnRequest> {
    private static readonly pb::MessageParser<WarnRequest> _parser = new pb::MessageParser<WarnRequest>(() => new WarnRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarnRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarnRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarnRequest(WarnRequest other) : this() {
      player_ = other.player_;
      character_ = other.character_;
      time_ = other.time_;
      reason_ = other.reason_;
      admin_ = other.admin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarnRequest Clone() {
      return new WarnRequest(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private uint player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 2;
    private uint character_;
    /// <summary>
    /// Player character that was accused.
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private uint time_;
    /// <summary>
    /// Warn expiration time in days. 0 = permanent warn.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 4;
    private string reason_ = "";
    /// <summary>
    /// Warn reason.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 5;
    private uint admin_;
    /// <summary>
    /// Admin that warned player. 0 = system warn.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarnRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarnRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player != other.Player) return false;
      if (Character != other.Character) return false;
      if (Time != other.Time) return false;
      if (Reason != other.Reason) return false;
      if (Admin != other.Admin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player != 0) hash ^= Player.GetHashCode();
      if (Character != 0) hash ^= Character.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (Admin != 0) hash ^= Admin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Player);
      }
      if (Character != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Character);
      }
      if (Time != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Time);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Reason);
      }
      if (Admin != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Admin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Player);
      }
      if (Character != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Character);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (Admin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Admin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarnRequest other) {
      if (other == null) {
        return;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.Character != 0) {
        Character = other.Character;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      if (other.Admin != 0) {
        Admin = other.Admin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player = input.ReadUInt32();
            break;
          }
          case 16: {
            Character = input.ReadUInt32();
            break;
          }
          case 24: {
            Time = input.ReadUInt32();
            break;
          }
          case 34: {
            Reason = input.ReadString();
            break;
          }
          case 40: {
            Admin = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response message for rpc `Warn`.
  /// </summary>
  public sealed partial class WarnResponse : pb::IMessage<WarnResponse> {
    private static readonly pb::MessageParser<WarnResponse> _parser = new pb::MessageParser<WarnResponse>(() => new WarnResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarnResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarnResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarnResponse(WarnResponse other) : this() {
      warnId_ = other.warnId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarnResponse Clone() {
      return new WarnResponse(this);
    }

    /// <summary>Field number for the "warn_id" field.</summary>
    public const int WarnIdFieldNumber = 1;
    private uint warnId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WarnId {
      get { return warnId_; }
      set {
        warnId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarnResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarnResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WarnId != other.WarnId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WarnId != 0) hash ^= WarnId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WarnId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(WarnId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WarnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WarnId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarnResponse other) {
      if (other == null) {
        return;
      }
      if (other.WarnId != 0) {
        WarnId = other.WarnId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WarnId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `AdminJail`.
  /// </summary>
  public sealed partial class AdminJailRequest : pb::IMessage<AdminJailRequest> {
    private static readonly pb::MessageParser<AdminJailRequest> _parser = new pb::MessageParser<AdminJailRequest>(() => new AdminJailRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdminJailRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminJailRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminJailRequest(AdminJailRequest other) : this() {
      character_ = other.character_;
      time_ = other.time_;
      reason_ = other.reason_;
      admin_ = other.admin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminJailRequest Clone() {
      return new AdminJailRequest(this);
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 1;
    private uint character_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private uint time_;
    /// <summary>
    /// Admin jail time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 3;
    private string reason_ = "";
    /// <summary>
    /// Admin jail reason.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 4;
    private uint admin_;
    /// <summary>
    /// Admin that gave an admin jail to a player.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdminJailRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdminJailRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Character != other.Character) return false;
      if (Time != other.Time) return false;
      if (Reason != other.Reason) return false;
      if (Admin != other.Admin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Character != 0) hash ^= Character.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (Admin != 0) hash ^= Admin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Character != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Character);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Time);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Reason);
      }
      if (Admin != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Admin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Character != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Character);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (Admin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Admin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdminJailRequest other) {
      if (other == null) {
        return;
      }
      if (other.Character != 0) {
        Character = other.Character;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      if (other.Admin != 0) {
        Admin = other.Admin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Character = input.ReadUInt32();
            break;
          }
          case 16: {
            Time = input.ReadUInt32();
            break;
          }
          case 26: {
            Reason = input.ReadString();
            break;
          }
          case 32: {
            Admin = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response message for rpc `AdminJail`.
  /// </summary>
  public sealed partial class AdminJailResponse : pb::IMessage<AdminJailResponse> {
    private static readonly pb::MessageParser<AdminJailResponse> _parser = new pb::MessageParser<AdminJailResponse>(() => new AdminJailResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdminJailResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminJailResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminJailResponse(AdminJailResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminJailResponse Clone() {
      return new AdminJailResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdminJailResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdminJailResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdminJailResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `MuteGlobalChats`.
  /// </summary>
  public sealed partial class MuteGlobalChatsRequest : pb::IMessage<MuteGlobalChatsRequest> {
    private static readonly pb::MessageParser<MuteGlobalChatsRequest> _parser = new pb::MessageParser<MuteGlobalChatsRequest>(() => new MuteGlobalChatsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MuteGlobalChatsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MuteGlobalChatsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MuteGlobalChatsRequest(MuteGlobalChatsRequest other) : this() {
      account_ = other.account_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MuteGlobalChatsRequest Clone() {
      return new MuteGlobalChatsRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private uint account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MuteGlobalChatsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MuteGlobalChatsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account != 0) hash ^= Account.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Account);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Account);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MuteGlobalChatsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Account != 0) {
        Account = other.Account;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Account = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response message for rpc `MuteGlobalChats`.
  /// </summary>
  public sealed partial class MuteGlobalChatsResponse : pb::IMessage<MuteGlobalChatsResponse> {
    private static readonly pb::MessageParser<MuteGlobalChatsResponse> _parser = new pb::MessageParser<MuteGlobalChatsResponse>(() => new MuteGlobalChatsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MuteGlobalChatsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MuteGlobalChatsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MuteGlobalChatsResponse(MuteGlobalChatsResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MuteGlobalChatsResponse Clone() {
      return new MuteGlobalChatsResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MuteGlobalChatsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MuteGlobalChatsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MuteGlobalChatsResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `UnBan`.
  /// </summary>
  public sealed partial class UnBanRequest : pb::IMessage<UnBanRequest> {
    private static readonly pb::MessageParser<UnBanRequest> _parser = new pb::MessageParser<UnBanRequest>(() => new UnBanRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnBanRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnBanRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnBanRequest(UnBanRequest other) : this() {
      banId_ = other.banId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnBanRequest Clone() {
      return new UnBanRequest(this);
    }

    /// <summary>Field number for the "ban_id" field.</summary>
    public const int BanIdFieldNumber = 2;
    private uint banId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BanId {
      get { return banId_; }
      set {
        banId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnBanRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnBanRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BanId != other.BanId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BanId != 0) hash ^= BanId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BanId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BanId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnBanRequest other) {
      if (other == null) {
        return;
      }
      if (other.BanId != 0) {
        BanId = other.BanId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            BanId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response message for rpc `UnBan`.
  /// </summary>
  public sealed partial class UnBanResponse : pb::IMessage<UnBanResponse> {
    private static readonly pb::MessageParser<UnBanResponse> _parser = new pb::MessageParser<UnBanResponse>(() => new UnBanResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnBanResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnBanResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnBanResponse(UnBanResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnBanResponse Clone() {
      return new UnBanResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnBanResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnBanResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnBanResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `UnWarn`.
  /// </summary>
  public sealed partial class UnWarnRequest : pb::IMessage<UnWarnRequest> {
    private static readonly pb::MessageParser<UnWarnRequest> _parser = new pb::MessageParser<UnWarnRequest>(() => new UnWarnRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnWarnRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnWarnRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnWarnRequest(UnWarnRequest other) : this() {
      warnId_ = other.warnId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnWarnRequest Clone() {
      return new UnWarnRequest(this);
    }

    /// <summary>Field number for the "warn_id" field.</summary>
    public const int WarnIdFieldNumber = 2;
    private uint warnId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WarnId {
      get { return warnId_; }
      set {
        warnId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnWarnRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnWarnRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WarnId != other.WarnId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WarnId != 0) hash ^= WarnId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WarnId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(WarnId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WarnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WarnId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnWarnRequest other) {
      if (other == null) {
        return;
      }
      if (other.WarnId != 0) {
        WarnId = other.WarnId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            WarnId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response message for rpc `UnWarn`.
  /// </summary>
  public sealed partial class UnWarnResponse : pb::IMessage<UnWarnResponse> {
    private static readonly pb::MessageParser<UnWarnResponse> _parser = new pb::MessageParser<UnWarnResponse>(() => new UnWarnResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnWarnResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnWarnResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnWarnResponse(UnWarnResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnWarnResponse Clone() {
      return new UnWarnResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnWarnResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnWarnResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnWarnResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `UnAdminJail`.
  /// </summary>
  public sealed partial class UnAdminJailRequest : pb::IMessage<UnAdminJailRequest> {
    private static readonly pb::MessageParser<UnAdminJailRequest> _parser = new pb::MessageParser<UnAdminJailRequest>(() => new UnAdminJailRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnAdminJailRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnAdminJailRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnAdminJailRequest(UnAdminJailRequest other) : this() {
      character_ = other.character_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnAdminJailRequest Clone() {
      return new UnAdminJailRequest(this);
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 1;
    private uint character_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnAdminJailRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnAdminJailRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Character != other.Character) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Character != 0) hash ^= Character.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Character != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Character);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Character != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Character);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnAdminJailRequest other) {
      if (other == null) {
        return;
      }
      if (other.Character != 0) {
        Character = other.Character;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Character = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response message for rpc `UnAdminJail`.
  /// </summary>
  public sealed partial class UnAdminJailResponse : pb::IMessage<UnAdminJailResponse> {
    private static readonly pb::MessageParser<UnAdminJailResponse> _parser = new pb::MessageParser<UnAdminJailResponse>(() => new UnAdminJailResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnAdminJailResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnAdminJailResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnAdminJailResponse(UnAdminJailResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnAdminJailResponse Clone() {
      return new UnAdminJailResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnAdminJailResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnAdminJailResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnAdminJailResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `UnMuteGlobalChats`.
  /// </summary>
  public sealed partial class UnMuteGlobalChatsRequest : pb::IMessage<UnMuteGlobalChatsRequest> {
    private static readonly pb::MessageParser<UnMuteGlobalChatsRequest> _parser = new pb::MessageParser<UnMuteGlobalChatsRequest>(() => new UnMuteGlobalChatsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnMuteGlobalChatsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnMuteGlobalChatsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnMuteGlobalChatsRequest(UnMuteGlobalChatsRequest other) : this() {
      account_ = other.account_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnMuteGlobalChatsRequest Clone() {
      return new UnMuteGlobalChatsRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private uint account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnMuteGlobalChatsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnMuteGlobalChatsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account != 0) hash ^= Account.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Account);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Account);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnMuteGlobalChatsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Account != 0) {
        Account = other.Account;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Account = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response message for rpc `UnMuteGlobalChats`.
  /// </summary>
  public sealed partial class UnMuteGlobalChatsResponse : pb::IMessage<UnMuteGlobalChatsResponse> {
    private static readonly pb::MessageParser<UnMuteGlobalChatsResponse> _parser = new pb::MessageParser<UnMuteGlobalChatsResponse>(() => new UnMuteGlobalChatsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnMuteGlobalChatsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnMuteGlobalChatsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnMuteGlobalChatsResponse(UnMuteGlobalChatsResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnMuteGlobalChatsResponse Clone() {
      return new UnMuteGlobalChatsResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnMuteGlobalChatsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnMuteGlobalChatsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnMuteGlobalChatsResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `GetPlayerBans`.
  /// </summary>
  public sealed partial class GetPlayerBansRequest : pb::IMessage<GetPlayerBansRequest> {
    private static readonly pb::MessageParser<GetPlayerBansRequest> _parser = new pb::MessageParser<GetPlayerBansRequest>(() => new GetPlayerBansRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPlayerBansRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerBansRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerBansRequest(GetPlayerBansRequest other) : this() {
      player_ = other.player_;
      ip_ = other.ip_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerBansRequest Clone() {
      return new GetPlayerBansRequest(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private uint player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 2;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPlayerBansRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPlayerBansRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player != other.Player) return false;
      if (Ip != other.Ip) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player != 0) hash ^= Player.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Player);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Player);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPlayerBansRequest other) {
      if (other == null) {
        return;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player = input.ReadUInt32();
            break;
          }
          case 18: {
            Ip = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response message for rpc `GetPlayerBans`.
  /// </summary>
  public sealed partial class GetPlayerBansResponse : pb::IMessage<GetPlayerBansResponse> {
    private static readonly pb::MessageParser<GetPlayerBansResponse> _parser = new pb::MessageParser<GetPlayerBansResponse>(() => new GetPlayerBansResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPlayerBansResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerBansResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerBansResponse(GetPlayerBansResponse other) : this() {
      bans_ = other.bans_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerBansResponse Clone() {
      return new GetPlayerBansResponse(this);
    }

    /// <summary>Field number for the "bans" field.</summary>
    public const int BansFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Mruv.Economy.BanMessage> _repeated_bans_codec
        = pb::FieldCodec.ForMessage(10, global::Mruv.Economy.BanMessage.Parser);
    private readonly pbc::RepeatedField<global::Mruv.Economy.BanMessage> bans_ = new pbc::RepeatedField<global::Mruv.Economy.BanMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Mruv.Economy.BanMessage> Bans {
      get { return bans_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPlayerBansResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPlayerBansResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bans_.Equals(other.bans_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bans_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bans_.WriteTo(output, _repeated_bans_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bans_.CalculateSize(_repeated_bans_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPlayerBansResponse other) {
      if (other == null) {
        return;
      }
      bans_.Add(other.bans_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            bans_.AddEntriesFrom(input, _repeated_bans_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `GetPlayerWarns`.
  /// </summary>
  public sealed partial class GetPlayerWarnsRequest : pb::IMessage<GetPlayerWarnsRequest> {
    private static readonly pb::MessageParser<GetPlayerWarnsRequest> _parser = new pb::MessageParser<GetPlayerWarnsRequest>(() => new GetPlayerWarnsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPlayerWarnsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerWarnsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerWarnsRequest(GetPlayerWarnsRequest other) : this() {
      player_ = other.player_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerWarnsRequest Clone() {
      return new GetPlayerWarnsRequest(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private uint player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPlayerWarnsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPlayerWarnsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player != other.Player) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player != 0) hash ^= Player.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Player);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPlayerWarnsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response message for rpc `GetPlayerWarns`.
  /// </summary>
  public sealed partial class GetPlayerWarnsResponse : pb::IMessage<GetPlayerWarnsResponse> {
    private static readonly pb::MessageParser<GetPlayerWarnsResponse> _parser = new pb::MessageParser<GetPlayerWarnsResponse>(() => new GetPlayerWarnsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPlayerWarnsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerWarnsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerWarnsResponse(GetPlayerWarnsResponse other) : this() {
      warns_ = other.warns_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerWarnsResponse Clone() {
      return new GetPlayerWarnsResponse(this);
    }

    /// <summary>Field number for the "warns" field.</summary>
    public const int WarnsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Mruv.Economy.WarnMessage> _repeated_warns_codec
        = pb::FieldCodec.ForMessage(10, global::Mruv.Economy.WarnMessage.Parser);
    private readonly pbc::RepeatedField<global::Mruv.Economy.WarnMessage> warns_ = new pbc::RepeatedField<global::Mruv.Economy.WarnMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Mruv.Economy.WarnMessage> Warns {
      get { return warns_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPlayerWarnsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPlayerWarnsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!warns_.Equals(other.warns_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= warns_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      warns_.WriteTo(output, _repeated_warns_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += warns_.CalculateSize(_repeated_warns_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPlayerWarnsResponse other) {
      if (other == null) {
        return;
      }
      warns_.Add(other.warns_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            warns_.AddEntriesFrom(input, _repeated_warns_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `GetPlayerAdminJail`.
  /// </summary>
  public sealed partial class GetPlayerAdminJailRequest : pb::IMessage<GetPlayerAdminJailRequest> {
    private static readonly pb::MessageParser<GetPlayerAdminJailRequest> _parser = new pb::MessageParser<GetPlayerAdminJailRequest>(() => new GetPlayerAdminJailRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPlayerAdminJailRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerAdminJailRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerAdminJailRequest(GetPlayerAdminJailRequest other) : this() {
      character_ = other.character_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerAdminJailRequest Clone() {
      return new GetPlayerAdminJailRequest(this);
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 1;
    private uint character_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPlayerAdminJailRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPlayerAdminJailRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Character != other.Character) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Character != 0) hash ^= Character.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Character != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Character);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Character != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Character);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPlayerAdminJailRequest other) {
      if (other == null) {
        return;
      }
      if (other.Character != 0) {
        Character = other.Character;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Character = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response message for rpc `GetPlayerAdminJail`.
  /// </summary>
  public sealed partial class GetPlayerAdminJailResponse : pb::IMessage<GetPlayerAdminJailResponse> {
    private static readonly pb::MessageParser<GetPlayerAdminJailResponse> _parser = new pb::MessageParser<GetPlayerAdminJailResponse>(() => new GetPlayerAdminJailResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPlayerAdminJailResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerAdminJailResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerAdminJailResponse(GetPlayerAdminJailResponse other) : this() {
      jailTime_ = other.jailTime_;
      reason_ = other.reason_;
      admin_ = other.admin_;
      date_ = other.date_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerAdminJailResponse Clone() {
      return new GetPlayerAdminJailResponse(this);
    }

    /// <summary>Field number for the "jail_time" field.</summary>
    public const int JailTimeFieldNumber = 1;
    private uint jailTime_;
    /// <summary>
    /// Time of admin jail in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JailTime {
      get { return jailTime_; }
      set {
        jailTime_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private string reason_ = "";
    /// <summary>
    /// Admin jail reason.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 3;
    private uint admin_;
    /// <summary>
    /// An admin that put a player in the admin jail.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 4;
    private long date_;
    /// <summary>
    /// Date when the player was thrown into admin jail in Unix time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPlayerAdminJailResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPlayerAdminJailResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (JailTime != other.JailTime) return false;
      if (Reason != other.Reason) return false;
      if (Admin != other.Admin) return false;
      if (Date != other.Date) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (JailTime != 0) hash ^= JailTime.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (Admin != 0) hash ^= Admin.GetHashCode();
      if (Date != 0L) hash ^= Date.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (JailTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(JailTime);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
      if (Admin != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Admin);
      }
      if (Date != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Date);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JailTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JailTime);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (Admin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Admin);
      }
      if (Date != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Date);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPlayerAdminJailResponse other) {
      if (other == null) {
        return;
      }
      if (other.JailTime != 0) {
        JailTime = other.JailTime;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      if (other.Admin != 0) {
        Admin = other.Admin;
      }
      if (other.Date != 0L) {
        Date = other.Date;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            JailTime = input.ReadUInt32();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
          case 24: {
            Admin = input.ReadUInt32();
            break;
          }
          case 32: {
            Date = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `GetBan`.
  /// </summary>
  public sealed partial class GetBanRequest : pb::IMessage<GetBanRequest> {
    private static readonly pb::MessageParser<GetBanRequest> _parser = new pb::MessageParser<GetBanRequest>(() => new GetBanRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBanRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBanRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBanRequest(GetBanRequest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBanRequest Clone() {
      return new GetBanRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBanRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBanRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBanRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `GetWarn`.
  /// </summary>
  public sealed partial class GetWarnRequest : pb::IMessage<GetWarnRequest> {
    private static readonly pb::MessageParser<GetWarnRequest> _parser = new pb::MessageParser<GetWarnRequest>(() => new GetWarnRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetWarnRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWarnRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWarnRequest(GetWarnRequest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWarnRequest Clone() {
      return new GetWarnRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetWarnRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetWarnRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetWarnRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `GetBlock`.
  /// </summary>
  public sealed partial class GetBlockRequest : pb::IMessage<GetBlockRequest> {
    private static readonly pb::MessageParser<GetBlockRequest> _parser = new pb::MessageParser<GetBlockRequest>(() => new GetBlockRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBlockRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockRequest(GetBlockRequest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockRequest Clone() {
      return new GetBlockRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBlockRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBlockRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBlockRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `IsPlayerBanned`.
  /// </summary>
  public sealed partial class IsPlayerBannedRequest : pb::IMessage<IsPlayerBannedRequest> {
    private static readonly pb::MessageParser<IsPlayerBannedRequest> _parser = new pb::MessageParser<IsPlayerBannedRequest>(() => new IsPlayerBannedRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IsPlayerBannedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsPlayerBannedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsPlayerBannedRequest(IsPlayerBannedRequest other) : this() {
      player_ = other.player_;
      ip_ = other.ip_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsPlayerBannedRequest Clone() {
      return new IsPlayerBannedRequest(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private uint player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 2;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IsPlayerBannedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IsPlayerBannedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player != other.Player) return false;
      if (Ip != other.Ip) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player != 0) hash ^= Player.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Player);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Player);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IsPlayerBannedRequest other) {
      if (other == null) {
        return;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player = input.ReadUInt32();
            break;
          }
          case 18: {
            Ip = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response message for rpc `IsPlayerBanned`.
  /// </summary>
  public sealed partial class IsPlayerBannedResponse : pb::IMessage<IsPlayerBannedResponse> {
    private static readonly pb::MessageParser<IsPlayerBannedResponse> _parser = new pb::MessageParser<IsPlayerBannedResponse>(() => new IsPlayerBannedResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IsPlayerBannedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsPlayerBannedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsPlayerBannedResponse(IsPlayerBannedResponse other) : this() {
      banned_ = other.banned_;
      banId_ = other.banId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsPlayerBannedResponse Clone() {
      return new IsPlayerBannedResponse(this);
    }

    /// <summary>Field number for the "banned" field.</summary>
    public const int BannedFieldNumber = 1;
    private bool banned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Banned {
      get { return banned_; }
      set {
        banned_ = value;
      }
    }

    /// <summary>Field number for the "ban_id" field.</summary>
    public const int BanIdFieldNumber = 2;
    private uint banId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BanId {
      get { return banId_; }
      set {
        banId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IsPlayerBannedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IsPlayerBannedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Banned != other.Banned) return false;
      if (BanId != other.BanId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Banned != false) hash ^= Banned.GetHashCode();
      if (BanId != 0) hash ^= BanId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Banned != false) {
        output.WriteRawTag(8);
        output.WriteBool(Banned);
      }
      if (BanId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Banned != false) {
        size += 1 + 1;
      }
      if (BanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BanId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IsPlayerBannedResponse other) {
      if (other == null) {
        return;
      }
      if (other.Banned != false) {
        Banned = other.Banned;
      }
      if (other.BanId != 0) {
        BanId = other.BanId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Banned = input.ReadBool();
            break;
          }
          case 16: {
            BanId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `IsCharacterBlocked`.
  /// </summary>
  public sealed partial class IsCharacterBlockedRequest : pb::IMessage<IsCharacterBlockedRequest> {
    private static readonly pb::MessageParser<IsCharacterBlockedRequest> _parser = new pb::MessageParser<IsCharacterBlockedRequest>(() => new IsCharacterBlockedRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IsCharacterBlockedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsCharacterBlockedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsCharacterBlockedRequest(IsCharacterBlockedRequest other) : this() {
      character_ = other.character_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsCharacterBlockedRequest Clone() {
      return new IsCharacterBlockedRequest(this);
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 1;
    private uint character_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IsCharacterBlockedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IsCharacterBlockedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Character != other.Character) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Character != 0) hash ^= Character.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Character != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Character);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Character != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Character);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IsCharacterBlockedRequest other) {
      if (other == null) {
        return;
      }
      if (other.Character != 0) {
        Character = other.Character;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Character = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response message for rpc `IsCharacterBlocked`.
  /// </summary>
  public sealed partial class IsCharacterBlockedResponse : pb::IMessage<IsCharacterBlockedResponse> {
    private static readonly pb::MessageParser<IsCharacterBlockedResponse> _parser = new pb::MessageParser<IsCharacterBlockedResponse>(() => new IsCharacterBlockedResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IsCharacterBlockedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsCharacterBlockedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsCharacterBlockedResponse(IsCharacterBlockedResponse other) : this() {
      blocked_ = other.blocked_;
      blockId_ = other.blockId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsCharacterBlockedResponse Clone() {
      return new IsCharacterBlockedResponse(this);
    }

    /// <summary>Field number for the "blocked" field.</summary>
    public const int BlockedFieldNumber = 1;
    private bool blocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Blocked {
      get { return blocked_; }
      set {
        blocked_ = value;
      }
    }

    /// <summary>Field number for the "block_id" field.</summary>
    public const int BlockIdFieldNumber = 2;
    private uint blockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BlockId {
      get { return blockId_; }
      set {
        blockId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IsCharacterBlockedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IsCharacterBlockedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Blocked != other.Blocked) return false;
      if (BlockId != other.BlockId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Blocked != false) hash ^= Blocked.GetHashCode();
      if (BlockId != 0) hash ^= BlockId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Blocked != false) {
        output.WriteRawTag(8);
        output.WriteBool(Blocked);
      }
      if (BlockId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BlockId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Blocked != false) {
        size += 1 + 1;
      }
      if (BlockId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BlockId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IsCharacterBlockedResponse other) {
      if (other == null) {
        return;
      }
      if (other.Blocked != false) {
        Blocked = other.Blocked;
      }
      if (other.BlockId != 0) {
        BlockId = other.BlockId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Blocked = input.ReadBool();
            break;
          }
          case 16: {
            BlockId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `IsCharacterJailed`.
  /// </summary>
  public sealed partial class IsCharacterJailedRequest : pb::IMessage<IsCharacterJailedRequest> {
    private static readonly pb::MessageParser<IsCharacterJailedRequest> _parser = new pb::MessageParser<IsCharacterJailedRequest>(() => new IsCharacterJailedRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IsCharacterJailedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsCharacterJailedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsCharacterJailedRequest(IsCharacterJailedRequest other) : this() {
      character_ = other.character_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsCharacterJailedRequest Clone() {
      return new IsCharacterJailedRequest(this);
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 1;
    private uint character_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IsCharacterJailedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IsCharacterJailedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Character != other.Character) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Character != 0) hash ^= Character.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Character != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Character);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Character != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Character);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IsCharacterJailedRequest other) {
      if (other == null) {
        return;
      }
      if (other.Character != 0) {
        Character = other.Character;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Character = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response message for rpc `IsCharacterJailed`.
  /// </summary>
  public sealed partial class IsCharacterJailedResponse : pb::IMessage<IsCharacterJailedResponse> {
    private static readonly pb::MessageParser<IsCharacterJailedResponse> _parser = new pb::MessageParser<IsCharacterJailedResponse>(() => new IsCharacterJailedResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IsCharacterJailedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsCharacterJailedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsCharacterJailedResponse(IsCharacterJailedResponse other) : this() {
      jailed_ = other.jailed_;
      jailTime_ = other.jailTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsCharacterJailedResponse Clone() {
      return new IsCharacterJailedResponse(this);
    }

    /// <summary>Field number for the "jailed" field.</summary>
    public const int JailedFieldNumber = 1;
    private bool jailed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Jailed {
      get { return jailed_; }
      set {
        jailed_ = value;
      }
    }

    /// <summary>Field number for the "jail_time" field.</summary>
    public const int JailTimeFieldNumber = 2;
    private uint jailTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JailTime {
      get { return jailTime_; }
      set {
        jailTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IsCharacterJailedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IsCharacterJailedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Jailed != other.Jailed) return false;
      if (JailTime != other.JailTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Jailed != false) hash ^= Jailed.GetHashCode();
      if (JailTime != 0) hash ^= JailTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Jailed != false) {
        output.WriteRawTag(8);
        output.WriteBool(Jailed);
      }
      if (JailTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(JailTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Jailed != false) {
        size += 1 + 1;
      }
      if (JailTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JailTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IsCharacterJailedResponse other) {
      if (other == null) {
        return;
      }
      if (other.Jailed != false) {
        Jailed = other.Jailed;
      }
      if (other.JailTime != 0) {
        JailTime = other.JailTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Jailed = input.ReadBool();
            break;
          }
          case 16: {
            JailTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `WatchBans`.
  /// </summary>
  public sealed partial class WatchBansRequest : pb::IMessage<WatchBansRequest> {
    private static readonly pb::MessageParser<WatchBansRequest> _parser = new pb::MessageParser<WatchBansRequest>(() => new WatchBansRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchBansRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchBansRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchBansRequest(WatchBansRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchBansRequest Clone() {
      return new WatchBansRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchBansRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchBansRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchBansRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `WatchBlocks`.
  /// </summary>
  public sealed partial class WatchBlocksRequest : pb::IMessage<WatchBlocksRequest> {
    private static readonly pb::MessageParser<WatchBlocksRequest> _parser = new pb::MessageParser<WatchBlocksRequest>(() => new WatchBlocksRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchBlocksRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchBlocksRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchBlocksRequest(WatchBlocksRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchBlocksRequest Clone() {
      return new WatchBlocksRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchBlocksRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchBlocksRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchBlocksRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `WatchWarns`.
  /// </summary>
  public sealed partial class WatchWarnsRequest : pb::IMessage<WatchWarnsRequest> {
    private static readonly pb::MessageParser<WatchWarnsRequest> _parser = new pb::MessageParser<WatchWarnsRequest>(() => new WatchWarnsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchWarnsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchWarnsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchWarnsRequest(WatchWarnsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchWarnsRequest Clone() {
      return new WatchWarnsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchWarnsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchWarnsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchWarnsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `WatchAdminJails`.
  /// </summary>
  public sealed partial class WatchAdminJailsRequest : pb::IMessage<WatchAdminJailsRequest> {
    private static readonly pb::MessageParser<WatchAdminJailsRequest> _parser = new pb::MessageParser<WatchAdminJailsRequest>(() => new WatchAdminJailsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchAdminJailsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchAdminJailsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchAdminJailsRequest(WatchAdminJailsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchAdminJailsRequest Clone() {
      return new WatchAdminJailsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchAdminJailsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchAdminJailsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchAdminJailsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `WatchUnBans`.
  /// </summary>
  public sealed partial class WatchUnBansRequest : pb::IMessage<WatchUnBansRequest> {
    private static readonly pb::MessageParser<WatchUnBansRequest> _parser = new pb::MessageParser<WatchUnBansRequest>(() => new WatchUnBansRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchUnBansRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchUnBansRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchUnBansRequest(WatchUnBansRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchUnBansRequest Clone() {
      return new WatchUnBansRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchUnBansRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchUnBansRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchUnBansRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `WatchUnBlocks`.
  /// </summary>
  public sealed partial class WatchUnBlocksRequest : pb::IMessage<WatchUnBlocksRequest> {
    private static readonly pb::MessageParser<WatchUnBlocksRequest> _parser = new pb::MessageParser<WatchUnBlocksRequest>(() => new WatchUnBlocksRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchUnBlocksRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchUnBlocksRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchUnBlocksRequest(WatchUnBlocksRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchUnBlocksRequest Clone() {
      return new WatchUnBlocksRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchUnBlocksRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchUnBlocksRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchUnBlocksRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `WatchUnWarns`.
  /// </summary>
  public sealed partial class WatchUnWarnsRequest : pb::IMessage<WatchUnWarnsRequest> {
    private static readonly pb::MessageParser<WatchUnWarnsRequest> _parser = new pb::MessageParser<WatchUnWarnsRequest>(() => new WatchUnWarnsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchUnWarnsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchUnWarnsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchUnWarnsRequest(WatchUnWarnsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchUnWarnsRequest Clone() {
      return new WatchUnWarnsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchUnWarnsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchUnWarnsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchUnWarnsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `WatchUnAdminJails`.
  /// </summary>
  public sealed partial class WatchUnAdminJailsRequest : pb::IMessage<WatchUnAdminJailsRequest> {
    private static readonly pb::MessageParser<WatchUnAdminJailsRequest> _parser = new pb::MessageParser<WatchUnAdminJailsRequest>(() => new WatchUnAdminJailsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchUnAdminJailsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchUnAdminJailsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchUnAdminJailsRequest(WatchUnAdminJailsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchUnAdminJailsRequest Clone() {
      return new WatchUnAdminJailsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchUnAdminJailsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchUnAdminJailsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchUnAdminJailsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `WatchPlayerAcquittals`.
  /// </summary>
  public sealed partial class WatchPlayerAcquittalsRequest : pb::IMessage<WatchPlayerAcquittalsRequest> {
    private static readonly pb::MessageParser<WatchPlayerAcquittalsRequest> _parser = new pb::MessageParser<WatchPlayerAcquittalsRequest>(() => new WatchPlayerAcquittalsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchPlayerAcquittalsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchPlayerAcquittalsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchPlayerAcquittalsRequest(WatchPlayerAcquittalsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchPlayerAcquittalsRequest Clone() {
      return new WatchPlayerAcquittalsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchPlayerAcquittalsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchPlayerAcquittalsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchPlayerAcquittalsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Response message for rpc `WatchPlayerAcquittals`.
  /// </summary>
  public sealed partial class WatchPlayerAcquittalsResponse : pb::IMessage<WatchPlayerAcquittalsResponse> {
    private static readonly pb::MessageParser<WatchPlayerAcquittalsResponse> _parser = new pb::MessageParser<WatchPlayerAcquittalsResponse>(() => new WatchPlayerAcquittalsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchPlayerAcquittalsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchPlayerAcquittalsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchPlayerAcquittalsResponse(WatchPlayerAcquittalsResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchPlayerAcquittalsResponse Clone() {
      return new WatchPlayerAcquittalsResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchPlayerAcquittalsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchPlayerAcquittalsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchPlayerAcquittalsResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `WatchPlayerPunishments`.
  /// </summary>
  public sealed partial class WatchPlayerPunishmentsRequest : pb::IMessage<WatchPlayerPunishmentsRequest> {
    private static readonly pb::MessageParser<WatchPlayerPunishmentsRequest> _parser = new pb::MessageParser<WatchPlayerPunishmentsRequest>(() => new WatchPlayerPunishmentsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchPlayerPunishmentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchPlayerPunishmentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchPlayerPunishmentsRequest(WatchPlayerPunishmentsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchPlayerPunishmentsRequest Clone() {
      return new WatchPlayerPunishmentsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchPlayerPunishmentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchPlayerPunishmentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchPlayerPunishmentsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Response message for rpc `WatchPlayerPunishments`.
  /// </summary>
  public sealed partial class WatchPlayerPunishmentsResponse : pb::IMessage<WatchPlayerPunishmentsResponse> {
    private static readonly pb::MessageParser<WatchPlayerPunishmentsResponse> _parser = new pb::MessageParser<WatchPlayerPunishmentsResponse>(() => new WatchPlayerPunishmentsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchPlayerPunishmentsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchPlayerPunishmentsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchPlayerPunishmentsResponse(WatchPlayerPunishmentsResponse other) : this() {
      type_ = other.type_;
      punishmentId_ = other.punishmentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchPlayerPunishmentsResponse Clone() {
      return new WatchPlayerPunishmentsResponse(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Mruv.Economy.PunishmentType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Mruv.Economy.PunishmentType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "punishment_id" field.</summary>
    public const int PunishmentIdFieldNumber = 2;
    private uint punishmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PunishmentId {
      get { return punishmentId_; }
      set {
        punishmentId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchPlayerPunishmentsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchPlayerPunishmentsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (PunishmentId != other.PunishmentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (PunishmentId != 0) hash ^= PunishmentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (PunishmentId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PunishmentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (PunishmentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PunishmentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchPlayerPunishmentsResponse other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.PunishmentId != 0) {
        PunishmentId = other.PunishmentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Mruv.Economy.PunishmentType) input.ReadEnum();
            break;
          }
          case 16: {
            PunishmentId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for rpc `WatchPunishments`.
  /// </summary>
  public sealed partial class WatchPunishmentsRequest : pb::IMessage<WatchPunishmentsRequest> {
    private static readonly pb::MessageParser<WatchPunishmentsRequest> _parser = new pb::MessageParser<WatchPunishmentsRequest>(() => new WatchPunishmentsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchPunishmentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchPunishmentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchPunishmentsRequest(WatchPunishmentsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchPunishmentsRequest Clone() {
      return new WatchPunishmentsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchPunishmentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchPunishmentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchPunishmentsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Response message for rpc `WatchPunishments`.
  /// </summary>
  public sealed partial class WatchPunishmentsResponse : pb::IMessage<WatchPunishmentsResponse> {
    private static readonly pb::MessageParser<WatchPunishmentsResponse> _parser = new pb::MessageParser<WatchPunishmentsResponse>(() => new WatchPunishmentsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchPunishmentsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mruv.Economy.PunishmentsReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchPunishmentsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchPunishmentsResponse(WatchPunishmentsResponse other) : this() {
      type_ = other.type_;
      punishmentId_ = other.punishmentId_;
      player_ = other.player_;
      character_ = other.character_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchPunishmentsResponse Clone() {
      return new WatchPunishmentsResponse(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Mruv.Economy.PunishmentType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Mruv.Economy.PunishmentType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "punishment_id" field.</summary>
    public const int PunishmentIdFieldNumber = 2;
    private uint punishmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PunishmentId {
      get { return punishmentId_; }
      set {
        punishmentId_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 3;
    private uint player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 4;
    private uint character_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchPunishmentsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchPunishmentsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (PunishmentId != other.PunishmentId) return false;
      if (Player != other.Player) return false;
      if (Character != other.Character) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (PunishmentId != 0) hash ^= PunishmentId.GetHashCode();
      if (Player != 0) hash ^= Player.GetHashCode();
      if (Character != 0) hash ^= Character.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (PunishmentId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PunishmentId);
      }
      if (Player != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Player);
      }
      if (Character != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Character);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (PunishmentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PunishmentId);
      }
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Player);
      }
      if (Character != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Character);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchPunishmentsResponse other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.PunishmentId != 0) {
        PunishmentId = other.PunishmentId;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.Character != 0) {
        Character = other.Character;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Mruv.Economy.PunishmentType) input.ReadEnum();
            break;
          }
          case 16: {
            PunishmentId = input.ReadUInt32();
            break;
          }
          case 24: {
            Player = input.ReadUInt32();
            break;
          }
          case 32: {
            Character = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
