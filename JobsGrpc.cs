// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: jobs/jobs.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mruv.Jobs {
  /// <summary>
  /// The MruV jobs service provides procedures for managing jobs.
  /// </summary>
  public static partial class MruVJobsService
  {
    static readonly string __ServiceName = "mruv.jobs.MruVJobsService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Mruv.Jobs.CreateJobRequest> __Marshaller_mruv_jobs_CreateJobRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Jobs.CreateJobRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Jobs.CreateJobResponse> __Marshaller_mruv_jobs_CreateJobResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Jobs.CreateJobResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Jobs.GetJobRequest> __Marshaller_mruv_jobs_GetJobRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Jobs.GetJobRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Jobs.GetJobResponse> __Marshaller_mruv_jobs_GetJobResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Jobs.GetJobResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Jobs.UpdateJobRequest> __Marshaller_mruv_jobs_UpdateJobRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Jobs.UpdateJobRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Jobs.UpdateJobResponse> __Marshaller_mruv_jobs_UpdateJobResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Jobs.UpdateJobResponse.Parser));
    static readonly grpc::Marshaller<global::Mruv.Jobs.DeleteJobRequest> __Marshaller_mruv_jobs_DeleteJobRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Jobs.DeleteJobRequest.Parser));
    static readonly grpc::Marshaller<global::Mruv.Jobs.DeleteJobResponse> __Marshaller_mruv_jobs_DeleteJobResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mruv.Jobs.DeleteJobResponse.Parser));

    static readonly grpc::Method<global::Mruv.Jobs.CreateJobRequest, global::Mruv.Jobs.CreateJobResponse> __Method_CreateJob = new grpc::Method<global::Mruv.Jobs.CreateJobRequest, global::Mruv.Jobs.CreateJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateJob",
        __Marshaller_mruv_jobs_CreateJobRequest,
        __Marshaller_mruv_jobs_CreateJobResponse);

    static readonly grpc::Method<global::Mruv.Jobs.GetJobRequest, global::Mruv.Jobs.GetJobResponse> __Method_GetJob = new grpc::Method<global::Mruv.Jobs.GetJobRequest, global::Mruv.Jobs.GetJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetJob",
        __Marshaller_mruv_jobs_GetJobRequest,
        __Marshaller_mruv_jobs_GetJobResponse);

    static readonly grpc::Method<global::Mruv.Jobs.UpdateJobRequest, global::Mruv.Jobs.UpdateJobResponse> __Method_UpdateJob = new grpc::Method<global::Mruv.Jobs.UpdateJobRequest, global::Mruv.Jobs.UpdateJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateJob",
        __Marshaller_mruv_jobs_UpdateJobRequest,
        __Marshaller_mruv_jobs_UpdateJobResponse);

    static readonly grpc::Method<global::Mruv.Jobs.DeleteJobRequest, global::Mruv.Jobs.DeleteJobResponse> __Method_DeleteJob = new grpc::Method<global::Mruv.Jobs.DeleteJobRequest, global::Mruv.Jobs.DeleteJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteJob",
        __Marshaller_mruv_jobs_DeleteJobRequest,
        __Marshaller_mruv_jobs_DeleteJobResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mruv.Jobs.JobsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MruVJobsService</summary>
    [grpc::BindServiceMethod(typeof(MruVJobsService), "BindService")]
    public abstract partial class MruVJobsServiceBase
    {
      /// <summary>
      /// Create a job.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Jobs.CreateJobResponse> CreateJob(global::Mruv.Jobs.CreateJobRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a job.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Jobs.GetJobResponse> GetJob(global::Mruv.Jobs.GetJobRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a job.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Jobs.UpdateJobResponse> UpdateJob(global::Mruv.Jobs.UpdateJobRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a job.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Jobs.DeleteJobResponse> DeleteJob(global::Mruv.Jobs.DeleteJobRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MruVJobsService</summary>
    public partial class MruVJobsServiceClient : grpc::ClientBase<MruVJobsServiceClient>
    {
      /// <summary>Creates a new client for MruVJobsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MruVJobsServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MruVJobsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MruVJobsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MruVJobsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MruVJobsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a job.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Jobs.CreateJobResponse CreateJob(global::Mruv.Jobs.CreateJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateJob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a job.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Jobs.CreateJobResponse CreateJob(global::Mruv.Jobs.CreateJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateJob, null, options, request);
      }
      /// <summary>
      /// Create a job.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Jobs.CreateJobResponse> CreateJobAsync(global::Mruv.Jobs.CreateJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateJobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a job.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Jobs.CreateJobResponse> CreateJobAsync(global::Mruv.Jobs.CreateJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateJob, null, options, request);
      }
      /// <summary>
      /// Get a job.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Jobs.GetJobResponse GetJob(global::Mruv.Jobs.GetJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetJob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a job.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Jobs.GetJobResponse GetJob(global::Mruv.Jobs.GetJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetJob, null, options, request);
      }
      /// <summary>
      /// Get a job.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Jobs.GetJobResponse> GetJobAsync(global::Mruv.Jobs.GetJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetJobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a job.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Jobs.GetJobResponse> GetJobAsync(global::Mruv.Jobs.GetJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetJob, null, options, request);
      }
      /// <summary>
      /// Update a job.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Jobs.UpdateJobResponse UpdateJob(global::Mruv.Jobs.UpdateJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateJob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a job.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Jobs.UpdateJobResponse UpdateJob(global::Mruv.Jobs.UpdateJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateJob, null, options, request);
      }
      /// <summary>
      /// Update a job.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Jobs.UpdateJobResponse> UpdateJobAsync(global::Mruv.Jobs.UpdateJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateJobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a job.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Jobs.UpdateJobResponse> UpdateJobAsync(global::Mruv.Jobs.UpdateJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateJob, null, options, request);
      }
      /// <summary>
      /// Delete a job.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Jobs.DeleteJobResponse DeleteJob(global::Mruv.Jobs.DeleteJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteJob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a job.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Jobs.DeleteJobResponse DeleteJob(global::Mruv.Jobs.DeleteJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteJob, null, options, request);
      }
      /// <summary>
      /// Delete a job.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Jobs.DeleteJobResponse> DeleteJobAsync(global::Mruv.Jobs.DeleteJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteJobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a job.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Jobs.DeleteJobResponse> DeleteJobAsync(global::Mruv.Jobs.DeleteJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteJob, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MruVJobsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MruVJobsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MruVJobsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateJob, serviceImpl.CreateJob)
          .AddMethod(__Method_GetJob, serviceImpl.GetJob)
          .AddMethod(__Method_UpdateJob, serviceImpl.UpdateJob)
          .AddMethod(__Method_DeleteJob, serviceImpl.DeleteJob).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MruVJobsServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateJob, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Jobs.CreateJobRequest, global::Mruv.Jobs.CreateJobResponse>(serviceImpl.CreateJob));
      serviceBinder.AddMethod(__Method_GetJob, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Jobs.GetJobRequest, global::Mruv.Jobs.GetJobResponse>(serviceImpl.GetJob));
      serviceBinder.AddMethod(__Method_UpdateJob, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Jobs.UpdateJobRequest, global::Mruv.Jobs.UpdateJobResponse>(serviceImpl.UpdateJob));
      serviceBinder.AddMethod(__Method_DeleteJob, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Jobs.DeleteJobRequest, global::Mruv.Jobs.DeleteJobResponse>(serviceImpl.DeleteJob));
    }

  }
}
#endregion
