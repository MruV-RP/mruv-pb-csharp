// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: texturestudio/texturestudio.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace TextureStudio {
  /// <summary>
  /// Service to manage texture studio servers.
  /// </summary>
  public static partial class TextureStudioService
  {
    static readonly string __ServiceName = "texture_studio.TextureStudioService";

    static readonly grpc::Marshaller<global::TextureStudio.CreateServerRequest> __Marshaller_texture_studio_CreateServerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.CreateServerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TextureStudio.CreateServerResponse> __Marshaller_texture_studio_CreateServerResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.CreateServerResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TextureStudio.MyServerRequest> __Marshaller_texture_studio_MyServerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.MyServerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TextureStudio.MyServerResponse> __Marshaller_texture_studio_MyServerResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.MyServerResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TextureStudio.DeleteServerRequest> __Marshaller_texture_studio_DeleteServerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.DeleteServerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TextureStudio.DeleteServerResponse> __Marshaller_texture_studio_DeleteServerResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.DeleteServerResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TextureStudio.StartServerRequest> __Marshaller_texture_studio_StartServerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.StartServerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TextureStudio.StartServerResponse> __Marshaller_texture_studio_StartServerResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.StartServerResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TextureStudio.StopServerRequest> __Marshaller_texture_studio_StopServerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.StopServerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TextureStudio.StopServerResponse> __Marshaller_texture_studio_StopServerResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.StopServerResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TextureStudio.RestartServerRequest> __Marshaller_texture_studio_RestartServerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.RestartServerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TextureStudio.RestartServerResponse> __Marshaller_texture_studio_RestartServerResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.RestartServerResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TextureStudio.ServerStatusRequest> __Marshaller_texture_studio_ServerStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.ServerStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TextureStudio.ServerStatusResponse> __Marshaller_texture_studio_ServerStatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.ServerStatusResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TextureStudio.UploadProjectRequest> __Marshaller_texture_studio_UploadProjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.UploadProjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TextureStudio.UploadProjectResponse> __Marshaller_texture_studio_UploadProjectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.UploadProjectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TextureStudio.GetProjectRequest> __Marshaller_texture_studio_GetProjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.GetProjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TextureStudio.GetProjectResponse> __Marshaller_texture_studio_GetProjectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.GetProjectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TextureStudio.GetProjectsRequest> __Marshaller_texture_studio_GetProjectsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.GetProjectsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TextureStudio.GetProjectsResponse> __Marshaller_texture_studio_GetProjectsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.GetProjectsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TextureStudio.SubscribeToProjectsChangesRequest> __Marshaller_texture_studio_SubscribeToProjectsChangesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.SubscribeToProjectsChangesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TextureStudio.SubscribeToProjectsChangesResponse> __Marshaller_texture_studio_SubscribeToProjectsChangesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TextureStudio.SubscribeToProjectsChangesResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::TextureStudio.CreateServerRequest, global::TextureStudio.CreateServerResponse> __Method_CreateServer = new grpc::Method<global::TextureStudio.CreateServerRequest, global::TextureStudio.CreateServerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateServer",
        __Marshaller_texture_studio_CreateServerRequest,
        __Marshaller_texture_studio_CreateServerResponse);

    static readonly grpc::Method<global::TextureStudio.MyServerRequest, global::TextureStudio.MyServerResponse> __Method_MyServer = new grpc::Method<global::TextureStudio.MyServerRequest, global::TextureStudio.MyServerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MyServer",
        __Marshaller_texture_studio_MyServerRequest,
        __Marshaller_texture_studio_MyServerResponse);

    static readonly grpc::Method<global::TextureStudio.DeleteServerRequest, global::TextureStudio.DeleteServerResponse> __Method_DeleteServer = new grpc::Method<global::TextureStudio.DeleteServerRequest, global::TextureStudio.DeleteServerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteServer",
        __Marshaller_texture_studio_DeleteServerRequest,
        __Marshaller_texture_studio_DeleteServerResponse);

    static readonly grpc::Method<global::TextureStudio.StartServerRequest, global::TextureStudio.StartServerResponse> __Method_StartServer = new grpc::Method<global::TextureStudio.StartServerRequest, global::TextureStudio.StartServerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartServer",
        __Marshaller_texture_studio_StartServerRequest,
        __Marshaller_texture_studio_StartServerResponse);

    static readonly grpc::Method<global::TextureStudio.StopServerRequest, global::TextureStudio.StopServerResponse> __Method_StopServer = new grpc::Method<global::TextureStudio.StopServerRequest, global::TextureStudio.StopServerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StopServer",
        __Marshaller_texture_studio_StopServerRequest,
        __Marshaller_texture_studio_StopServerResponse);

    static readonly grpc::Method<global::TextureStudio.RestartServerRequest, global::TextureStudio.RestartServerResponse> __Method_RestartServer = new grpc::Method<global::TextureStudio.RestartServerRequest, global::TextureStudio.RestartServerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RestartServer",
        __Marshaller_texture_studio_RestartServerRequest,
        __Marshaller_texture_studio_RestartServerResponse);

    static readonly grpc::Method<global::TextureStudio.ServerStatusRequest, global::TextureStudio.ServerStatusResponse> __Method_ServerStatus = new grpc::Method<global::TextureStudio.ServerStatusRequest, global::TextureStudio.ServerStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ServerStatus",
        __Marshaller_texture_studio_ServerStatusRequest,
        __Marshaller_texture_studio_ServerStatusResponse);

    static readonly grpc::Method<global::TextureStudio.UploadProjectRequest, global::TextureStudio.UploadProjectResponse> __Method_UploadProject = new grpc::Method<global::TextureStudio.UploadProjectRequest, global::TextureStudio.UploadProjectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UploadProject",
        __Marshaller_texture_studio_UploadProjectRequest,
        __Marshaller_texture_studio_UploadProjectResponse);

    static readonly grpc::Method<global::TextureStudio.GetProjectRequest, global::TextureStudio.GetProjectResponse> __Method_GetProject = new grpc::Method<global::TextureStudio.GetProjectRequest, global::TextureStudio.GetProjectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProject",
        __Marshaller_texture_studio_GetProjectRequest,
        __Marshaller_texture_studio_GetProjectResponse);

    static readonly grpc::Method<global::TextureStudio.GetProjectsRequest, global::TextureStudio.GetProjectsResponse> __Method_GetProjects = new grpc::Method<global::TextureStudio.GetProjectsRequest, global::TextureStudio.GetProjectsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProjects",
        __Marshaller_texture_studio_GetProjectsRequest,
        __Marshaller_texture_studio_GetProjectsResponse);

    static readonly grpc::Method<global::TextureStudio.SubscribeToProjectsChangesRequest, global::TextureStudio.SubscribeToProjectsChangesResponse> __Method_SubscribeToProjectsChanges = new grpc::Method<global::TextureStudio.SubscribeToProjectsChangesRequest, global::TextureStudio.SubscribeToProjectsChangesResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeToProjectsChanges",
        __Marshaller_texture_studio_SubscribeToProjectsChangesRequest,
        __Marshaller_texture_studio_SubscribeToProjectsChangesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::TextureStudio.TexturestudioReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TextureStudioService</summary>
    [grpc::BindServiceMethod(typeof(TextureStudioService), "BindService")]
    public abstract partial class TextureStudioServiceBase
    {
      /// <summary>
      /// Create a new texture studio server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::TextureStudio.CreateServerResponse> CreateServer(global::TextureStudio.CreateServerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get texture studio server id for current user.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::TextureStudio.MyServerResponse> MyServer(global::TextureStudio.MyServerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a texture studio server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::TextureStudio.DeleteServerResponse> DeleteServer(global::TextureStudio.DeleteServerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Start a texture studio server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::TextureStudio.StartServerResponse> StartServer(global::TextureStudio.StartServerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Stop a texture studio server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::TextureStudio.StopServerResponse> StopServer(global::TextureStudio.StopServerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Restart a texture studio server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::TextureStudio.RestartServerResponse> RestartServer(global::TextureStudio.RestartServerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get texture studio server status.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::TextureStudio.ServerStatusResponse> ServerStatus(global::TextureStudio.ServerStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Upload project to texture studio.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::TextureStudio.UploadProjectResponse> UploadProject(global::TextureStudio.UploadProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get texture-studio objects project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::TextureStudio.GetProjectResponse> GetProject(global::TextureStudio.GetProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get all projects.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::TextureStudio.GetProjectsResponse> GetProjects(global::TextureStudio.GetProjectsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Listen for project changes - if texture studio project has been created or modified, this will trigger an event.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task SubscribeToProjectsChanges(global::TextureStudio.SubscribeToProjectsChangesRequest request, grpc::IServerStreamWriter<global::TextureStudio.SubscribeToProjectsChangesResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TextureStudioService</summary>
    public partial class TextureStudioServiceClient : grpc::ClientBase<TextureStudioServiceClient>
    {
      /// <summary>Creates a new client for TextureStudioService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TextureStudioServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TextureStudioService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TextureStudioServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TextureStudioServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TextureStudioServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a new texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.CreateServerResponse CreateServer(global::TextureStudio.CreateServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateServer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.CreateServerResponse CreateServer(global::TextureStudio.CreateServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateServer, null, options, request);
      }
      /// <summary>
      /// Create a new texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.CreateServerResponse> CreateServerAsync(global::TextureStudio.CreateServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateServerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.CreateServerResponse> CreateServerAsync(global::TextureStudio.CreateServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateServer, null, options, request);
      }
      /// <summary>
      /// Get texture studio server id for current user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.MyServerResponse MyServer(global::TextureStudio.MyServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MyServer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get texture studio server id for current user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.MyServerResponse MyServer(global::TextureStudio.MyServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MyServer, null, options, request);
      }
      /// <summary>
      /// Get texture studio server id for current user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.MyServerResponse> MyServerAsync(global::TextureStudio.MyServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MyServerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get texture studio server id for current user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.MyServerResponse> MyServerAsync(global::TextureStudio.MyServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MyServer, null, options, request);
      }
      /// <summary>
      /// Delete a texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.DeleteServerResponse DeleteServer(global::TextureStudio.DeleteServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteServer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.DeleteServerResponse DeleteServer(global::TextureStudio.DeleteServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteServer, null, options, request);
      }
      /// <summary>
      /// Delete a texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.DeleteServerResponse> DeleteServerAsync(global::TextureStudio.DeleteServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteServerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.DeleteServerResponse> DeleteServerAsync(global::TextureStudio.DeleteServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteServer, null, options, request);
      }
      /// <summary>
      /// Start a texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.StartServerResponse StartServer(global::TextureStudio.StartServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartServer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start a texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.StartServerResponse StartServer(global::TextureStudio.StartServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartServer, null, options, request);
      }
      /// <summary>
      /// Start a texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.StartServerResponse> StartServerAsync(global::TextureStudio.StartServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartServerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start a texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.StartServerResponse> StartServerAsync(global::TextureStudio.StartServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartServer, null, options, request);
      }
      /// <summary>
      /// Stop a texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.StopServerResponse StopServer(global::TextureStudio.StopServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopServer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stop a texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.StopServerResponse StopServer(global::TextureStudio.StopServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StopServer, null, options, request);
      }
      /// <summary>
      /// Stop a texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.StopServerResponse> StopServerAsync(global::TextureStudio.StopServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopServerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stop a texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.StopServerResponse> StopServerAsync(global::TextureStudio.StopServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StopServer, null, options, request);
      }
      /// <summary>
      /// Restart a texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.RestartServerResponse RestartServer(global::TextureStudio.RestartServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RestartServer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Restart a texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.RestartServerResponse RestartServer(global::TextureStudio.RestartServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RestartServer, null, options, request);
      }
      /// <summary>
      /// Restart a texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.RestartServerResponse> RestartServerAsync(global::TextureStudio.RestartServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RestartServerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Restart a texture studio server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.RestartServerResponse> RestartServerAsync(global::TextureStudio.RestartServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RestartServer, null, options, request);
      }
      /// <summary>
      /// Get texture studio server status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.ServerStatusResponse ServerStatus(global::TextureStudio.ServerStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get texture studio server status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.ServerStatusResponse ServerStatus(global::TextureStudio.ServerStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ServerStatus, null, options, request);
      }
      /// <summary>
      /// Get texture studio server status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.ServerStatusResponse> ServerStatusAsync(global::TextureStudio.ServerStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get texture studio server status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.ServerStatusResponse> ServerStatusAsync(global::TextureStudio.ServerStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ServerStatus, null, options, request);
      }
      /// <summary>
      /// Upload project to texture studio.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.UploadProjectResponse UploadProject(global::TextureStudio.UploadProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UploadProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Upload project to texture studio.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.UploadProjectResponse UploadProject(global::TextureStudio.UploadProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UploadProject, null, options, request);
      }
      /// <summary>
      /// Upload project to texture studio.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.UploadProjectResponse> UploadProjectAsync(global::TextureStudio.UploadProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UploadProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Upload project to texture studio.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.UploadProjectResponse> UploadProjectAsync(global::TextureStudio.UploadProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UploadProject, null, options, request);
      }
      /// <summary>
      /// Get texture-studio objects project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.GetProjectResponse GetProject(global::TextureStudio.GetProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get texture-studio objects project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.GetProjectResponse GetProject(global::TextureStudio.GetProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProject, null, options, request);
      }
      /// <summary>
      /// Get texture-studio objects project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.GetProjectResponse> GetProjectAsync(global::TextureStudio.GetProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get texture-studio objects project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.GetProjectResponse> GetProjectAsync(global::TextureStudio.GetProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProject, null, options, request);
      }
      /// <summary>
      /// Get all projects.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.GetProjectsResponse GetProjects(global::TextureStudio.GetProjectsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProjects(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all projects.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TextureStudio.GetProjectsResponse GetProjects(global::TextureStudio.GetProjectsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProjects, null, options, request);
      }
      /// <summary>
      /// Get all projects.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.GetProjectsResponse> GetProjectsAsync(global::TextureStudio.GetProjectsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProjectsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all projects.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TextureStudio.GetProjectsResponse> GetProjectsAsync(global::TextureStudio.GetProjectsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProjects, null, options, request);
      }
      /// <summary>
      /// Listen for project changes - if texture studio project has been created or modified, this will trigger an event.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::TextureStudio.SubscribeToProjectsChangesResponse> SubscribeToProjectsChanges(global::TextureStudio.SubscribeToProjectsChangesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeToProjectsChanges(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Listen for project changes - if texture studio project has been created or modified, this will trigger an event.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::TextureStudio.SubscribeToProjectsChangesResponse> SubscribeToProjectsChanges(global::TextureStudio.SubscribeToProjectsChangesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeToProjectsChanges, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TextureStudioServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TextureStudioServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TextureStudioServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateServer, serviceImpl.CreateServer)
          .AddMethod(__Method_MyServer, serviceImpl.MyServer)
          .AddMethod(__Method_DeleteServer, serviceImpl.DeleteServer)
          .AddMethod(__Method_StartServer, serviceImpl.StartServer)
          .AddMethod(__Method_StopServer, serviceImpl.StopServer)
          .AddMethod(__Method_RestartServer, serviceImpl.RestartServer)
          .AddMethod(__Method_ServerStatus, serviceImpl.ServerStatus)
          .AddMethod(__Method_UploadProject, serviceImpl.UploadProject)
          .AddMethod(__Method_GetProject, serviceImpl.GetProject)
          .AddMethod(__Method_GetProjects, serviceImpl.GetProjects)
          .AddMethod(__Method_SubscribeToProjectsChanges, serviceImpl.SubscribeToProjectsChanges).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TextureStudioServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateServer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TextureStudio.CreateServerRequest, global::TextureStudio.CreateServerResponse>(serviceImpl.CreateServer));
      serviceBinder.AddMethod(__Method_MyServer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TextureStudio.MyServerRequest, global::TextureStudio.MyServerResponse>(serviceImpl.MyServer));
      serviceBinder.AddMethod(__Method_DeleteServer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TextureStudio.DeleteServerRequest, global::TextureStudio.DeleteServerResponse>(serviceImpl.DeleteServer));
      serviceBinder.AddMethod(__Method_StartServer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TextureStudio.StartServerRequest, global::TextureStudio.StartServerResponse>(serviceImpl.StartServer));
      serviceBinder.AddMethod(__Method_StopServer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TextureStudio.StopServerRequest, global::TextureStudio.StopServerResponse>(serviceImpl.StopServer));
      serviceBinder.AddMethod(__Method_RestartServer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TextureStudio.RestartServerRequest, global::TextureStudio.RestartServerResponse>(serviceImpl.RestartServer));
      serviceBinder.AddMethod(__Method_ServerStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TextureStudio.ServerStatusRequest, global::TextureStudio.ServerStatusResponse>(serviceImpl.ServerStatus));
      serviceBinder.AddMethod(__Method_UploadProject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TextureStudio.UploadProjectRequest, global::TextureStudio.UploadProjectResponse>(serviceImpl.UploadProject));
      serviceBinder.AddMethod(__Method_GetProject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TextureStudio.GetProjectRequest, global::TextureStudio.GetProjectResponse>(serviceImpl.GetProject));
      serviceBinder.AddMethod(__Method_GetProjects, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TextureStudio.GetProjectsRequest, global::TextureStudio.GetProjectsResponse>(serviceImpl.GetProjects));
      serviceBinder.AddMethod(__Method_SubscribeToProjectsChanges, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::TextureStudio.SubscribeToProjectsChangesRequest, global::TextureStudio.SubscribeToProjectsChangesResponse>(serviceImpl.SubscribeToProjectsChanges));
    }

  }
}
#endregion
