// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: devtools/devtools.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mruv.Devtools {
  /// <summary>
  /// The MruV developer tools service for mruv-devtools package.
  /// </summary>
  public static partial class MruVDevToolsService
  {
    static readonly string __ServiceName = "mruv.devtools.MruVDevToolsService";

    static readonly grpc::Marshaller<global::Mruv.Devtools.GetPositionsRequest> __Marshaller_mruv_devtools_GetPositionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Devtools.GetPositionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Devtools.GetPositionsResponse> __Marshaller_mruv_devtools_GetPositionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Devtools.GetPositionsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Devtools.SavePositionRequest> __Marshaller_mruv_devtools_SavePositionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Devtools.SavePositionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Devtools.SavePositionResponse> __Marshaller_mruv_devtools_SavePositionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Devtools.SavePositionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Devtools.DeletePositionRequest> __Marshaller_mruv_devtools_DeletePositionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Devtools.DeletePositionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Devtools.DeletePositionResponse> __Marshaller_mruv_devtools_DeletePositionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Devtools.DeletePositionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Devtools.GetOutfitsRequest> __Marshaller_mruv_devtools_GetOutfitsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Devtools.GetOutfitsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Devtools.GetOutfitsResponse> __Marshaller_mruv_devtools_GetOutfitsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Devtools.GetOutfitsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Devtools.SaveOutfitRequest> __Marshaller_mruv_devtools_SaveOutfitRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Devtools.SaveOutfitRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Devtools.SaveOutfitResponse> __Marshaller_mruv_devtools_SaveOutfitResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Devtools.SaveOutfitResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Devtools.GetAnimationsRequest> __Marshaller_mruv_devtools_GetAnimationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Devtools.GetAnimationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Devtools.GetAnimationsResponse> __Marshaller_mruv_devtools_GetAnimationsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Devtools.GetAnimationsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Devtools.GetAnimationRequest> __Marshaller_mruv_devtools_GetAnimationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Devtools.GetAnimationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Devtools.GetAnimationResponse> __Marshaller_mruv_devtools_GetAnimationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Devtools.GetAnimationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Devtools.SaveAnimationRequest> __Marshaller_mruv_devtools_SaveAnimationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Devtools.SaveAnimationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Devtools.SaveAnimationResponse> __Marshaller_mruv_devtools_SaveAnimationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Devtools.SaveAnimationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.ServiceStatusRequest> __Marshaller_mruv_ServiceStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.ServiceStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.ServiceStatusResponse> __Marshaller_mruv_ServiceStatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.ServiceStatusResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.VersionRequest> __Marshaller_mruv_VersionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.VersionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.VersionResponse> __Marshaller_mruv_VersionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.VersionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Mruv.Devtools.GetPositionsRequest, global::Mruv.Devtools.GetPositionsResponse> __Method_GetPositions = new grpc::Method<global::Mruv.Devtools.GetPositionsRequest, global::Mruv.Devtools.GetPositionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPositions",
        __Marshaller_mruv_devtools_GetPositionsRequest,
        __Marshaller_mruv_devtools_GetPositionsResponse);

    static readonly grpc::Method<global::Mruv.Devtools.SavePositionRequest, global::Mruv.Devtools.SavePositionResponse> __Method_SavePosition = new grpc::Method<global::Mruv.Devtools.SavePositionRequest, global::Mruv.Devtools.SavePositionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SavePosition",
        __Marshaller_mruv_devtools_SavePositionRequest,
        __Marshaller_mruv_devtools_SavePositionResponse);

    static readonly grpc::Method<global::Mruv.Devtools.DeletePositionRequest, global::Mruv.Devtools.DeletePositionResponse> __Method_DeletePosition = new grpc::Method<global::Mruv.Devtools.DeletePositionRequest, global::Mruv.Devtools.DeletePositionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePosition",
        __Marshaller_mruv_devtools_DeletePositionRequest,
        __Marshaller_mruv_devtools_DeletePositionResponse);

    static readonly grpc::Method<global::Mruv.Devtools.GetOutfitsRequest, global::Mruv.Devtools.GetOutfitsResponse> __Method_GetOutfits = new grpc::Method<global::Mruv.Devtools.GetOutfitsRequest, global::Mruv.Devtools.GetOutfitsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOutfits",
        __Marshaller_mruv_devtools_GetOutfitsRequest,
        __Marshaller_mruv_devtools_GetOutfitsResponse);

    static readonly grpc::Method<global::Mruv.Devtools.SaveOutfitRequest, global::Mruv.Devtools.SaveOutfitResponse> __Method_SaveOutfit = new grpc::Method<global::Mruv.Devtools.SaveOutfitRequest, global::Mruv.Devtools.SaveOutfitResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SaveOutfit",
        __Marshaller_mruv_devtools_SaveOutfitRequest,
        __Marshaller_mruv_devtools_SaveOutfitResponse);

    static readonly grpc::Method<global::Mruv.Devtools.GetAnimationsRequest, global::Mruv.Devtools.GetAnimationsResponse> __Method_GetAnimations = new grpc::Method<global::Mruv.Devtools.GetAnimationsRequest, global::Mruv.Devtools.GetAnimationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAnimations",
        __Marshaller_mruv_devtools_GetAnimationsRequest,
        __Marshaller_mruv_devtools_GetAnimationsResponse);

    static readonly grpc::Method<global::Mruv.Devtools.GetAnimationRequest, global::Mruv.Devtools.GetAnimationResponse> __Method_GetAnimation = new grpc::Method<global::Mruv.Devtools.GetAnimationRequest, global::Mruv.Devtools.GetAnimationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAnimation",
        __Marshaller_mruv_devtools_GetAnimationRequest,
        __Marshaller_mruv_devtools_GetAnimationResponse);

    static readonly grpc::Method<global::Mruv.Devtools.SaveAnimationRequest, global::Mruv.Devtools.SaveAnimationResponse> __Method_SaveAnimation = new grpc::Method<global::Mruv.Devtools.SaveAnimationRequest, global::Mruv.Devtools.SaveAnimationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SaveAnimation",
        __Marshaller_mruv_devtools_SaveAnimationRequest,
        __Marshaller_mruv_devtools_SaveAnimationResponse);

    static readonly grpc::Method<global::Mruv.ServiceStatusRequest, global::Mruv.ServiceStatusResponse> __Method_GetServiceStatus = new grpc::Method<global::Mruv.ServiceStatusRequest, global::Mruv.ServiceStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServiceStatus",
        __Marshaller_mruv_ServiceStatusRequest,
        __Marshaller_mruv_ServiceStatusResponse);

    static readonly grpc::Method<global::Mruv.VersionRequest, global::Mruv.VersionResponse> __Method_GetServiceVersion = new grpc::Method<global::Mruv.VersionRequest, global::Mruv.VersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServiceVersion",
        __Marshaller_mruv_VersionRequest,
        __Marshaller_mruv_VersionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mruv.Devtools.DevtoolsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MruVDevToolsService</summary>
    [grpc::BindServiceMethod(typeof(MruVDevToolsService), "BindService")]
    public abstract partial class MruVDevToolsServiceBase
    {
      /// <summary>
      /// Get saved positions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Devtools.GetPositionsResponse> GetPositions(global::Mruv.Devtools.GetPositionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Save position.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Devtools.SavePositionResponse> SavePosition(global::Mruv.Devtools.SavePositionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete position.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Devtools.DeletePositionResponse> DeletePosition(global::Mruv.Devtools.DeletePositionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get saved outfit.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Devtools.GetOutfitsResponse> GetOutfits(global::Mruv.Devtools.GetOutfitsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Save outfit.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Devtools.SaveOutfitResponse> SaveOutfit(global::Mruv.Devtools.SaveOutfitRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get all saved animations.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Devtools.GetAnimationsResponse> GetAnimations(global::Mruv.Devtools.GetAnimationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get saved animation by name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Devtools.GetAnimationResponse> GetAnimation(global::Mruv.Devtools.GetAnimationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Save animation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Devtools.SaveAnimationResponse> SaveAnimation(global::Mruv.Devtools.SaveAnimationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Get service status.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.ServiceStatusResponse> GetServiceStatus(global::Mruv.ServiceStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Get service version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.VersionResponse> GetServiceVersion(global::Mruv.VersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MruVDevToolsService</summary>
    public partial class MruVDevToolsServiceClient : grpc::ClientBase<MruVDevToolsServiceClient>
    {
      /// <summary>Creates a new client for MruVDevToolsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MruVDevToolsServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MruVDevToolsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MruVDevToolsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MruVDevToolsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MruVDevToolsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Get saved positions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Devtools.GetPositionsResponse GetPositions(global::Mruv.Devtools.GetPositionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPositions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get saved positions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Devtools.GetPositionsResponse GetPositions(global::Mruv.Devtools.GetPositionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPositions, null, options, request);
      }
      /// <summary>
      /// Get saved positions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Devtools.GetPositionsResponse> GetPositionsAsync(global::Mruv.Devtools.GetPositionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPositionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get saved positions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Devtools.GetPositionsResponse> GetPositionsAsync(global::Mruv.Devtools.GetPositionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPositions, null, options, request);
      }
      /// <summary>
      /// Save position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Devtools.SavePositionResponse SavePosition(global::Mruv.Devtools.SavePositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SavePosition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Save position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Devtools.SavePositionResponse SavePosition(global::Mruv.Devtools.SavePositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SavePosition, null, options, request);
      }
      /// <summary>
      /// Save position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Devtools.SavePositionResponse> SavePositionAsync(global::Mruv.Devtools.SavePositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SavePositionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Save position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Devtools.SavePositionResponse> SavePositionAsync(global::Mruv.Devtools.SavePositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SavePosition, null, options, request);
      }
      /// <summary>
      /// Delete position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Devtools.DeletePositionResponse DeletePosition(global::Mruv.Devtools.DeletePositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePosition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Devtools.DeletePositionResponse DeletePosition(global::Mruv.Devtools.DeletePositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePosition, null, options, request);
      }
      /// <summary>
      /// Delete position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Devtools.DeletePositionResponse> DeletePositionAsync(global::Mruv.Devtools.DeletePositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePositionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Devtools.DeletePositionResponse> DeletePositionAsync(global::Mruv.Devtools.DeletePositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePosition, null, options, request);
      }
      /// <summary>
      /// Get saved outfit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Devtools.GetOutfitsResponse GetOutfits(global::Mruv.Devtools.GetOutfitsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOutfits(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get saved outfit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Devtools.GetOutfitsResponse GetOutfits(global::Mruv.Devtools.GetOutfitsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOutfits, null, options, request);
      }
      /// <summary>
      /// Get saved outfit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Devtools.GetOutfitsResponse> GetOutfitsAsync(global::Mruv.Devtools.GetOutfitsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOutfitsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get saved outfit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Devtools.GetOutfitsResponse> GetOutfitsAsync(global::Mruv.Devtools.GetOutfitsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOutfits, null, options, request);
      }
      /// <summary>
      /// Save outfit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Devtools.SaveOutfitResponse SaveOutfit(global::Mruv.Devtools.SaveOutfitRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SaveOutfit(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Save outfit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Devtools.SaveOutfitResponse SaveOutfit(global::Mruv.Devtools.SaveOutfitRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SaveOutfit, null, options, request);
      }
      /// <summary>
      /// Save outfit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Devtools.SaveOutfitResponse> SaveOutfitAsync(global::Mruv.Devtools.SaveOutfitRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SaveOutfitAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Save outfit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Devtools.SaveOutfitResponse> SaveOutfitAsync(global::Mruv.Devtools.SaveOutfitRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SaveOutfit, null, options, request);
      }
      /// <summary>
      /// Get all saved animations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Devtools.GetAnimationsResponse GetAnimations(global::Mruv.Devtools.GetAnimationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnimations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all saved animations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Devtools.GetAnimationsResponse GetAnimations(global::Mruv.Devtools.GetAnimationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAnimations, null, options, request);
      }
      /// <summary>
      /// Get all saved animations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Devtools.GetAnimationsResponse> GetAnimationsAsync(global::Mruv.Devtools.GetAnimationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnimationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all saved animations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Devtools.GetAnimationsResponse> GetAnimationsAsync(global::Mruv.Devtools.GetAnimationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAnimations, null, options, request);
      }
      /// <summary>
      /// Get saved animation by name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Devtools.GetAnimationResponse GetAnimation(global::Mruv.Devtools.GetAnimationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnimation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get saved animation by name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Devtools.GetAnimationResponse GetAnimation(global::Mruv.Devtools.GetAnimationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAnimation, null, options, request);
      }
      /// <summary>
      /// Get saved animation by name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Devtools.GetAnimationResponse> GetAnimationAsync(global::Mruv.Devtools.GetAnimationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnimationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get saved animation by name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Devtools.GetAnimationResponse> GetAnimationAsync(global::Mruv.Devtools.GetAnimationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAnimation, null, options, request);
      }
      /// <summary>
      /// Save animation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Devtools.SaveAnimationResponse SaveAnimation(global::Mruv.Devtools.SaveAnimationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SaveAnimation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Save animation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Devtools.SaveAnimationResponse SaveAnimation(global::Mruv.Devtools.SaveAnimationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SaveAnimation, null, options, request);
      }
      /// <summary>
      /// Save animation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Devtools.SaveAnimationResponse> SaveAnimationAsync(global::Mruv.Devtools.SaveAnimationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SaveAnimationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Save animation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Devtools.SaveAnimationResponse> SaveAnimationAsync(global::Mruv.Devtools.SaveAnimationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SaveAnimation, null, options, request);
      }
      /// <summary>
      ///Get service status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.ServiceStatusResponse GetServiceStatus(global::Mruv.ServiceStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Get service status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.ServiceStatusResponse GetServiceStatus(global::Mruv.ServiceStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServiceStatus, null, options, request);
      }
      /// <summary>
      ///Get service status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.ServiceStatusResponse> GetServiceStatusAsync(global::Mruv.ServiceStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Get service status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.ServiceStatusResponse> GetServiceStatusAsync(global::Mruv.ServiceStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServiceStatus, null, options, request);
      }
      /// <summary>
      ///Get service version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.VersionResponse GetServiceVersion(global::Mruv.VersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Get service version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.VersionResponse GetServiceVersion(global::Mruv.VersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServiceVersion, null, options, request);
      }
      /// <summary>
      ///Get service version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.VersionResponse> GetServiceVersionAsync(global::Mruv.VersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Get service version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.VersionResponse> GetServiceVersionAsync(global::Mruv.VersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServiceVersion, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MruVDevToolsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MruVDevToolsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MruVDevToolsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetPositions, serviceImpl.GetPositions)
          .AddMethod(__Method_SavePosition, serviceImpl.SavePosition)
          .AddMethod(__Method_DeletePosition, serviceImpl.DeletePosition)
          .AddMethod(__Method_GetOutfits, serviceImpl.GetOutfits)
          .AddMethod(__Method_SaveOutfit, serviceImpl.SaveOutfit)
          .AddMethod(__Method_GetAnimations, serviceImpl.GetAnimations)
          .AddMethod(__Method_GetAnimation, serviceImpl.GetAnimation)
          .AddMethod(__Method_SaveAnimation, serviceImpl.SaveAnimation)
          .AddMethod(__Method_GetServiceStatus, serviceImpl.GetServiceStatus)
          .AddMethod(__Method_GetServiceVersion, serviceImpl.GetServiceVersion).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MruVDevToolsServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetPositions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Devtools.GetPositionsRequest, global::Mruv.Devtools.GetPositionsResponse>(serviceImpl.GetPositions));
      serviceBinder.AddMethod(__Method_SavePosition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Devtools.SavePositionRequest, global::Mruv.Devtools.SavePositionResponse>(serviceImpl.SavePosition));
      serviceBinder.AddMethod(__Method_DeletePosition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Devtools.DeletePositionRequest, global::Mruv.Devtools.DeletePositionResponse>(serviceImpl.DeletePosition));
      serviceBinder.AddMethod(__Method_GetOutfits, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Devtools.GetOutfitsRequest, global::Mruv.Devtools.GetOutfitsResponse>(serviceImpl.GetOutfits));
      serviceBinder.AddMethod(__Method_SaveOutfit, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Devtools.SaveOutfitRequest, global::Mruv.Devtools.SaveOutfitResponse>(serviceImpl.SaveOutfit));
      serviceBinder.AddMethod(__Method_GetAnimations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Devtools.GetAnimationsRequest, global::Mruv.Devtools.GetAnimationsResponse>(serviceImpl.GetAnimations));
      serviceBinder.AddMethod(__Method_GetAnimation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Devtools.GetAnimationRequest, global::Mruv.Devtools.GetAnimationResponse>(serviceImpl.GetAnimation));
      serviceBinder.AddMethod(__Method_SaveAnimation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Devtools.SaveAnimationRequest, global::Mruv.Devtools.SaveAnimationResponse>(serviceImpl.SaveAnimation));
      serviceBinder.AddMethod(__Method_GetServiceStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.ServiceStatusRequest, global::Mruv.ServiceStatusResponse>(serviceImpl.GetServiceStatus));
      serviceBinder.AddMethod(__Method_GetServiceVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.VersionRequest, global::Mruv.VersionResponse>(serviceImpl.GetServiceVersion));
    }

  }
}
#endregion
