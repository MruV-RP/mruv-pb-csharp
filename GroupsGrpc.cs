// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: groups/groups.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mruv {
  public static partial class MruVGroupsService
  {
    static readonly string __ServiceName = "mruv.MruVGroupsService";

    static readonly grpc::Marshaller<global::Mruv.Group> __Marshaller_mruv_Group = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Group.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GroupID> __Marshaller_mruv_GroupID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GroupID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetGroupsRequest> __Marshaller_mruv_GetGroupsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetGroupsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetGroupsResponse> __Marshaller_mruv_GetGroupsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetGroupsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.AddGroupMemberRequest> __Marshaller_mruv_AddGroupMemberRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.AddGroupMemberRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.AddGroupMemberResponse> __Marshaller_mruv_AddGroupMemberResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.AddGroupMemberResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.RemoveGroupMemberRequest> __Marshaller_mruv_RemoveGroupMemberRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.RemoveGroupMemberRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.RemoveGroupMemberResponse> __Marshaller_mruv_RemoveGroupMemberResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.RemoveGroupMemberResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.ServiceStatusRequest> __Marshaller_mruv_ServiceStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.ServiceStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.ServiceStatusResponse> __Marshaller_mruv_ServiceStatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.ServiceStatusResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.VersionRequest> __Marshaller_mruv_VersionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.VersionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.VersionResponse> __Marshaller_mruv_VersionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.VersionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Mruv.Group, global::Mruv.GroupID> __Method_CreateGroup = new grpc::Method<global::Mruv.Group, global::Mruv.GroupID>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateGroup",
        __Marshaller_mruv_Group,
        __Marshaller_mruv_GroupID);

    static readonly grpc::Method<global::Mruv.GroupID, global::Mruv.Group> __Method_GetGroup = new grpc::Method<global::Mruv.GroupID, global::Mruv.Group>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGroup",
        __Marshaller_mruv_GroupID,
        __Marshaller_mruv_Group);

    static readonly grpc::Method<global::Mruv.GroupID, global::Mruv.GroupID> __Method_DeleteGroup = new grpc::Method<global::Mruv.GroupID, global::Mruv.GroupID>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteGroup",
        __Marshaller_mruv_GroupID,
        __Marshaller_mruv_GroupID);

    static readonly grpc::Method<global::Mruv.GetGroupsRequest, global::Mruv.GetGroupsResponse> __Method_GetGroups = new grpc::Method<global::Mruv.GetGroupsRequest, global::Mruv.GetGroupsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGroups",
        __Marshaller_mruv_GetGroupsRequest,
        __Marshaller_mruv_GetGroupsResponse);

    static readonly grpc::Method<global::Mruv.AddGroupMemberRequest, global::Mruv.AddGroupMemberResponse> __Method_AddGroupMember = new grpc::Method<global::Mruv.AddGroupMemberRequest, global::Mruv.AddGroupMemberResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddGroupMember",
        __Marshaller_mruv_AddGroupMemberRequest,
        __Marshaller_mruv_AddGroupMemberResponse);

    static readonly grpc::Method<global::Mruv.RemoveGroupMemberRequest, global::Mruv.RemoveGroupMemberResponse> __Method_RemoveGroupMember = new grpc::Method<global::Mruv.RemoveGroupMemberRequest, global::Mruv.RemoveGroupMemberResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveGroupMember",
        __Marshaller_mruv_RemoveGroupMemberRequest,
        __Marshaller_mruv_RemoveGroupMemberResponse);

    static readonly grpc::Method<global::Mruv.ServiceStatusRequest, global::Mruv.ServiceStatusResponse> __Method_GetServiceStatus = new grpc::Method<global::Mruv.ServiceStatusRequest, global::Mruv.ServiceStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServiceStatus",
        __Marshaller_mruv_ServiceStatusRequest,
        __Marshaller_mruv_ServiceStatusResponse);

    static readonly grpc::Method<global::Mruv.VersionRequest, global::Mruv.VersionResponse> __Method_GetServiceVersion = new grpc::Method<global::Mruv.VersionRequest, global::Mruv.VersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServiceVersion",
        __Marshaller_mruv_VersionRequest,
        __Marshaller_mruv_VersionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mruv.GroupsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MruVGroupsService</summary>
    [grpc::BindServiceMethod(typeof(MruVGroupsService), "BindService")]
    public abstract partial class MruVGroupsServiceBase
    {
      /// <summary>
      ///CRUD
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.GroupID> CreateGroup(global::Mruv.Group request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.Group> GetGroup(global::Mruv.GroupID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.GroupID> DeleteGroup(global::Mruv.GroupID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.GetGroupsResponse> GetGroups(global::Mruv.GetGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.AddGroupMemberResponse> AddGroupMember(global::Mruv.AddGroupMemberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.RemoveGroupMemberResponse> RemoveGroupMember(global::Mruv.RemoveGroupMemberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Service status
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.ServiceStatusResponse> GetServiceStatus(global::Mruv.ServiceStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.VersionResponse> GetServiceVersion(global::Mruv.VersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MruVGroupsService</summary>
    public partial class MruVGroupsServiceClient : grpc::ClientBase<MruVGroupsServiceClient>
    {
      /// <summary>Creates a new client for MruVGroupsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MruVGroupsServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MruVGroupsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MruVGroupsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MruVGroupsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MruVGroupsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///CRUD
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.GroupID CreateGroup(global::Mruv.Group request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///CRUD
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.GroupID CreateGroup(global::Mruv.Group request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateGroup, null, options, request);
      }
      /// <summary>
      ///CRUD
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.GroupID> CreateGroupAsync(global::Mruv.Group request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///CRUD
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.GroupID> CreateGroupAsync(global::Mruv.Group request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateGroup, null, options, request);
      }
      public virtual global::Mruv.Group GetGroup(global::Mruv.GroupID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.Group GetGroup(global::Mruv.GroupID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGroup, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.Group> GetGroupAsync(global::Mruv.GroupID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.Group> GetGroupAsync(global::Mruv.GroupID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGroup, null, options, request);
      }
      public virtual global::Mruv.GroupID DeleteGroup(global::Mruv.GroupID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.GroupID DeleteGroup(global::Mruv.GroupID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteGroup, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.GroupID> DeleteGroupAsync(global::Mruv.GroupID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.GroupID> DeleteGroupAsync(global::Mruv.GroupID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteGroup, null, options, request);
      }
      public virtual global::Mruv.GetGroupsResponse GetGroups(global::Mruv.GetGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGroups(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.GetGroupsResponse GetGroups(global::Mruv.GetGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGroups, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetGroupsResponse> GetGroupsAsync(global::Mruv.GetGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGroupsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetGroupsResponse> GetGroupsAsync(global::Mruv.GetGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGroups, null, options, request);
      }
      public virtual global::Mruv.AddGroupMemberResponse AddGroupMember(global::Mruv.AddGroupMemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGroupMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.AddGroupMemberResponse AddGroupMember(global::Mruv.AddGroupMemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddGroupMember, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.AddGroupMemberResponse> AddGroupMemberAsync(global::Mruv.AddGroupMemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGroupMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.AddGroupMemberResponse> AddGroupMemberAsync(global::Mruv.AddGroupMemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddGroupMember, null, options, request);
      }
      public virtual global::Mruv.RemoveGroupMemberResponse RemoveGroupMember(global::Mruv.RemoveGroupMemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveGroupMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.RemoveGroupMemberResponse RemoveGroupMember(global::Mruv.RemoveGroupMemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveGroupMember, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.RemoveGroupMemberResponse> RemoveGroupMemberAsync(global::Mruv.RemoveGroupMemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveGroupMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.RemoveGroupMemberResponse> RemoveGroupMemberAsync(global::Mruv.RemoveGroupMemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveGroupMember, null, options, request);
      }
      /// <summary>
      ///Service status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.ServiceStatusResponse GetServiceStatus(global::Mruv.ServiceStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Service status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.ServiceStatusResponse GetServiceStatus(global::Mruv.ServiceStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServiceStatus, null, options, request);
      }
      /// <summary>
      ///Service status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.ServiceStatusResponse> GetServiceStatusAsync(global::Mruv.ServiceStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Service status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.ServiceStatusResponse> GetServiceStatusAsync(global::Mruv.ServiceStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServiceStatus, null, options, request);
      }
      public virtual global::Mruv.VersionResponse GetServiceVersion(global::Mruv.VersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.VersionResponse GetServiceVersion(global::Mruv.VersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServiceVersion, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.VersionResponse> GetServiceVersionAsync(global::Mruv.VersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.VersionResponse> GetServiceVersionAsync(global::Mruv.VersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServiceVersion, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MruVGroupsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MruVGroupsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MruVGroupsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateGroup, serviceImpl.CreateGroup)
          .AddMethod(__Method_GetGroup, serviceImpl.GetGroup)
          .AddMethod(__Method_DeleteGroup, serviceImpl.DeleteGroup)
          .AddMethod(__Method_GetGroups, serviceImpl.GetGroups)
          .AddMethod(__Method_AddGroupMember, serviceImpl.AddGroupMember)
          .AddMethod(__Method_RemoveGroupMember, serviceImpl.RemoveGroupMember)
          .AddMethod(__Method_GetServiceStatus, serviceImpl.GetServiceStatus)
          .AddMethod(__Method_GetServiceVersion, serviceImpl.GetServiceVersion).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MruVGroupsServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Group, global::Mruv.GroupID>(serviceImpl.CreateGroup));
      serviceBinder.AddMethod(__Method_GetGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.GroupID, global::Mruv.Group>(serviceImpl.GetGroup));
      serviceBinder.AddMethod(__Method_DeleteGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.GroupID, global::Mruv.GroupID>(serviceImpl.DeleteGroup));
      serviceBinder.AddMethod(__Method_GetGroups, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.GetGroupsRequest, global::Mruv.GetGroupsResponse>(serviceImpl.GetGroups));
      serviceBinder.AddMethod(__Method_AddGroupMember, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.AddGroupMemberRequest, global::Mruv.AddGroupMemberResponse>(serviceImpl.AddGroupMember));
      serviceBinder.AddMethod(__Method_RemoveGroupMember, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.RemoveGroupMemberRequest, global::Mruv.RemoveGroupMemberResponse>(serviceImpl.RemoveGroupMember));
      serviceBinder.AddMethod(__Method_GetServiceStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.ServiceStatusRequest, global::Mruv.ServiceStatusResponse>(serviceImpl.GetServiceStatus));
      serviceBinder.AddMethod(__Method_GetServiceVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.VersionRequest, global::Mruv.VersionResponse>(serviceImpl.GetServiceVersion));
    }

  }
}
#endregion
