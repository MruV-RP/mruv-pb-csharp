// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: groups/groups.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mruv {
  /// <summary>
  /// The MruV groups service provides procedures for managing groups.
  /// </summary>
  public static partial class MruVGroupsService
  {
    static readonly string __ServiceName = "mruv.MruVGroupsService";

    static readonly grpc::Marshaller<global::Mruv.CreateGroupRequest> __Marshaller_mruv_CreateGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.CreateGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.CreateGroupResponse> __Marshaller_mruv_CreateGroupResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.CreateGroupResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetGroupRequest> __Marshaller_mruv_GetGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetGroupResponse> __Marshaller_mruv_GetGroupResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetGroupResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.UpdateGroupRequest> __Marshaller_mruv_UpdateGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.UpdateGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.UpdateGroupResponse> __Marshaller_mruv_UpdateGroupResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.UpdateGroupResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.DeleteGroupRequest> __Marshaller_mruv_DeleteGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.DeleteGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.DeleteGroupResponse> __Marshaller_mruv_DeleteGroupResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.DeleteGroupResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetGroupsRequest> __Marshaller_mruv_GetGroupsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetGroupsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetGroupsResponse> __Marshaller_mruv_GetGroupsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetGroupsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.AssignOwnerRequest> __Marshaller_mruv_AssignOwnerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.AssignOwnerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.AssignOwnerResponse> __Marshaller_mruv_AssignOwnerResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.AssignOwnerResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetOwnerRequest> __Marshaller_mruv_GetOwnerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetOwnerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetOwnerResponse> __Marshaller_mruv_GetOwnerResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetOwnerResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.AddMemberRequest> __Marshaller_mruv_AddMemberRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.AddMemberRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.AddMemberResponse> __Marshaller_mruv_AddMemberResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.AddMemberResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetMembersRequest> __Marshaller_mruv_GetMembersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetMembersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetMembersResponse> __Marshaller_mruv_GetMembersResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetMembersResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.RemoveMemberRequest> __Marshaller_mruv_RemoveMemberRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.RemoveMemberRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.RemoveMemberResponse> __Marshaller_mruv_RemoveMemberResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.RemoveMemberResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.AddPermissionRequest> __Marshaller_mruv_AddPermissionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.AddPermissionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.AddPermissionResponse> __Marshaller_mruv_AddPermissionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.AddPermissionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetPermissionsRequest> __Marshaller_mruv_GetPermissionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetPermissionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetPermissionsResponse> __Marshaller_mruv_GetPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetPermissionsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.RemovePermissionRequest> __Marshaller_mruv_RemovePermissionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.RemovePermissionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.RemovePermissionResponse> __Marshaller_mruv_RemovePermissionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.RemovePermissionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.AddSubgroupRequest> __Marshaller_mruv_AddSubgroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.AddSubgroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.AddSubgroupResponse> __Marshaller_mruv_AddSubgroupResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.AddSubgroupResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetSubgroupsRequest> __Marshaller_mruv_GetSubgroupsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetSubgroupsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.GetSubgroupsResponse> __Marshaller_mruv_GetSubgroupsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.GetSubgroupsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.RemoveSubgroupRequest> __Marshaller_mruv_RemoveSubgroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.RemoveSubgroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.RemoveSubgroupResponse> __Marshaller_mruv_RemoveSubgroupResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.RemoveSubgroupResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.IsPermittedRequest> __Marshaller_mruv_IsPermittedRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.IsPermittedRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.IsPermittedResponse> __Marshaller_mruv_IsPermittedResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.IsPermittedResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.ServiceStatusRequest> __Marshaller_mruv_ServiceStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.ServiceStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.ServiceStatusResponse> __Marshaller_mruv_ServiceStatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.ServiceStatusResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.VersionRequest> __Marshaller_mruv_VersionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.VersionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.VersionResponse> __Marshaller_mruv_VersionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.VersionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Mruv.CreateGroupRequest, global::Mruv.CreateGroupResponse> __Method_CreateGroup = new grpc::Method<global::Mruv.CreateGroupRequest, global::Mruv.CreateGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateGroup",
        __Marshaller_mruv_CreateGroupRequest,
        __Marshaller_mruv_CreateGroupResponse);

    static readonly grpc::Method<global::Mruv.GetGroupRequest, global::Mruv.GetGroupResponse> __Method_GetGroup = new grpc::Method<global::Mruv.GetGroupRequest, global::Mruv.GetGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGroup",
        __Marshaller_mruv_GetGroupRequest,
        __Marshaller_mruv_GetGroupResponse);

    static readonly grpc::Method<global::Mruv.UpdateGroupRequest, global::Mruv.UpdateGroupResponse> __Method_UpdateGroup = new grpc::Method<global::Mruv.UpdateGroupRequest, global::Mruv.UpdateGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateGroup",
        __Marshaller_mruv_UpdateGroupRequest,
        __Marshaller_mruv_UpdateGroupResponse);

    static readonly grpc::Method<global::Mruv.DeleteGroupRequest, global::Mruv.DeleteGroupResponse> __Method_DeleteGroup = new grpc::Method<global::Mruv.DeleteGroupRequest, global::Mruv.DeleteGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteGroup",
        __Marshaller_mruv_DeleteGroupRequest,
        __Marshaller_mruv_DeleteGroupResponse);

    static readonly grpc::Method<global::Mruv.GetGroupsRequest, global::Mruv.GetGroupsResponse> __Method_GetGroups = new grpc::Method<global::Mruv.GetGroupsRequest, global::Mruv.GetGroupsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGroups",
        __Marshaller_mruv_GetGroupsRequest,
        __Marshaller_mruv_GetGroupsResponse);

    static readonly grpc::Method<global::Mruv.AssignOwnerRequest, global::Mruv.AssignOwnerResponse> __Method_AssignOwner = new grpc::Method<global::Mruv.AssignOwnerRequest, global::Mruv.AssignOwnerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AssignOwner",
        __Marshaller_mruv_AssignOwnerRequest,
        __Marshaller_mruv_AssignOwnerResponse);

    static readonly grpc::Method<global::Mruv.GetOwnerRequest, global::Mruv.GetOwnerResponse> __Method_GetOwner = new grpc::Method<global::Mruv.GetOwnerRequest, global::Mruv.GetOwnerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOwner",
        __Marshaller_mruv_GetOwnerRequest,
        __Marshaller_mruv_GetOwnerResponse);

    static readonly grpc::Method<global::Mruv.AddMemberRequest, global::Mruv.AddMemberResponse> __Method_AddMember = new grpc::Method<global::Mruv.AddMemberRequest, global::Mruv.AddMemberResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddMember",
        __Marshaller_mruv_AddMemberRequest,
        __Marshaller_mruv_AddMemberResponse);

    static readonly grpc::Method<global::Mruv.GetMembersRequest, global::Mruv.GetMembersResponse> __Method_GetMembers = new grpc::Method<global::Mruv.GetMembersRequest, global::Mruv.GetMembersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMembers",
        __Marshaller_mruv_GetMembersRequest,
        __Marshaller_mruv_GetMembersResponse);

    static readonly grpc::Method<global::Mruv.RemoveMemberRequest, global::Mruv.RemoveMemberResponse> __Method_RemoveMember = new grpc::Method<global::Mruv.RemoveMemberRequest, global::Mruv.RemoveMemberResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveMember",
        __Marshaller_mruv_RemoveMemberRequest,
        __Marshaller_mruv_RemoveMemberResponse);

    static readonly grpc::Method<global::Mruv.AddPermissionRequest, global::Mruv.AddPermissionResponse> __Method_AddPermission = new grpc::Method<global::Mruv.AddPermissionRequest, global::Mruv.AddPermissionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddPermission",
        __Marshaller_mruv_AddPermissionRequest,
        __Marshaller_mruv_AddPermissionResponse);

    static readonly grpc::Method<global::Mruv.GetPermissionsRequest, global::Mruv.GetPermissionsResponse> __Method_GetPermissions = new grpc::Method<global::Mruv.GetPermissionsRequest, global::Mruv.GetPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPermissions",
        __Marshaller_mruv_GetPermissionsRequest,
        __Marshaller_mruv_GetPermissionsResponse);

    static readonly grpc::Method<global::Mruv.RemovePermissionRequest, global::Mruv.RemovePermissionResponse> __Method_RemovePermission = new grpc::Method<global::Mruv.RemovePermissionRequest, global::Mruv.RemovePermissionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemovePermission",
        __Marshaller_mruv_RemovePermissionRequest,
        __Marshaller_mruv_RemovePermissionResponse);

    static readonly grpc::Method<global::Mruv.AddSubgroupRequest, global::Mruv.AddSubgroupResponse> __Method_AddSubgroup = new grpc::Method<global::Mruv.AddSubgroupRequest, global::Mruv.AddSubgroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddSubgroup",
        __Marshaller_mruv_AddSubgroupRequest,
        __Marshaller_mruv_AddSubgroupResponse);

    static readonly grpc::Method<global::Mruv.GetSubgroupsRequest, global::Mruv.GetSubgroupsResponse> __Method_GetSubgroups = new grpc::Method<global::Mruv.GetSubgroupsRequest, global::Mruv.GetSubgroupsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSubgroups",
        __Marshaller_mruv_GetSubgroupsRequest,
        __Marshaller_mruv_GetSubgroupsResponse);

    static readonly grpc::Method<global::Mruv.RemoveSubgroupRequest, global::Mruv.RemoveSubgroupResponse> __Method_RemoveSubgroup = new grpc::Method<global::Mruv.RemoveSubgroupRequest, global::Mruv.RemoveSubgroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveSubgroup",
        __Marshaller_mruv_RemoveSubgroupRequest,
        __Marshaller_mruv_RemoveSubgroupResponse);

    static readonly grpc::Method<global::Mruv.IsPermittedRequest, global::Mruv.IsPermittedResponse> __Method_IsPermitted = new grpc::Method<global::Mruv.IsPermittedRequest, global::Mruv.IsPermittedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsPermitted",
        __Marshaller_mruv_IsPermittedRequest,
        __Marshaller_mruv_IsPermittedResponse);

    static readonly grpc::Method<global::Mruv.ServiceStatusRequest, global::Mruv.ServiceStatusResponse> __Method_GetServiceStatus = new grpc::Method<global::Mruv.ServiceStatusRequest, global::Mruv.ServiceStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServiceStatus",
        __Marshaller_mruv_ServiceStatusRequest,
        __Marshaller_mruv_ServiceStatusResponse);

    static readonly grpc::Method<global::Mruv.VersionRequest, global::Mruv.VersionResponse> __Method_GetServiceVersion = new grpc::Method<global::Mruv.VersionRequest, global::Mruv.VersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServiceVersion",
        __Marshaller_mruv_VersionRequest,
        __Marshaller_mruv_VersionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mruv.GroupsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MruVGroupsService</summary>
    [grpc::BindServiceMethod(typeof(MruVGroupsService), "BindService")]
    public abstract partial class MruVGroupsServiceBase
    {
      /// <summary>
      /// Create a group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.CreateGroupResponse> CreateGroup(global::Mruv.CreateGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a  group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.GetGroupResponse> GetGroup(global::Mruv.GetGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.UpdateGroupResponse> UpdateGroup(global::Mruv.UpdateGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.DeleteGroupResponse> DeleteGroup(global::Mruv.DeleteGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get all groups.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.GetGroupsResponse> GetGroups(global::Mruv.GetGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Assign an owner. Group can have only one owner. Owner can be a player, a group or an account.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.AssignOwnerResponse> AssignOwner(global::Mruv.AssignOwnerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get group owner.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.GetOwnerResponse> GetOwner(global::Mruv.GetOwnerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a group member.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.AddMemberResponse> AddMember(global::Mruv.AddMemberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a group member.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.GetMembersResponse> GetMembers(global::Mruv.GetMembersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Remove a group member.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.RemoveMemberResponse> RemoveMember(global::Mruv.RemoveMemberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a permission to a group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.AddPermissionResponse> AddPermission(global::Mruv.AddPermissionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get all group permissions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.GetPermissionsResponse> GetPermissions(global::Mruv.GetPermissionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Remove group permission.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.RemovePermissionResponse> RemovePermission(global::Mruv.RemovePermissionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a subgroup to a group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.AddSubgroupResponse> AddSubgroup(global::Mruv.AddSubgroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get all subgroups.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.GetSubgroupsResponse> GetSubgroups(global::Mruv.GetSubgroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Remove a subgroup from group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.RemoveSubgroupResponse> RemoveSubgroup(global::Mruv.RemoveSubgroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Check is member of a group is permitted to do specific action.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.IsPermittedResponse> IsPermitted(global::Mruv.IsPermittedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Service status
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.ServiceStatusResponse> GetServiceStatus(global::Mruv.ServiceStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mruv.VersionResponse> GetServiceVersion(global::Mruv.VersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MruVGroupsService</summary>
    public partial class MruVGroupsServiceClient : grpc::ClientBase<MruVGroupsServiceClient>
    {
      /// <summary>Creates a new client for MruVGroupsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MruVGroupsServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MruVGroupsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MruVGroupsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MruVGroupsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MruVGroupsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.CreateGroupResponse CreateGroup(global::Mruv.CreateGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.CreateGroupResponse CreateGroup(global::Mruv.CreateGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateGroup, null, options, request);
      }
      /// <summary>
      /// Create a group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.CreateGroupResponse> CreateGroupAsync(global::Mruv.CreateGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.CreateGroupResponse> CreateGroupAsync(global::Mruv.CreateGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateGroup, null, options, request);
      }
      /// <summary>
      /// Get a  group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.GetGroupResponse GetGroup(global::Mruv.GetGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a  group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.GetGroupResponse GetGroup(global::Mruv.GetGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGroup, null, options, request);
      }
      /// <summary>
      /// Get a  group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetGroupResponse> GetGroupAsync(global::Mruv.GetGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a  group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetGroupResponse> GetGroupAsync(global::Mruv.GetGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGroup, null, options, request);
      }
      /// <summary>
      /// Update a group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.UpdateGroupResponse UpdateGroup(global::Mruv.UpdateGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.UpdateGroupResponse UpdateGroup(global::Mruv.UpdateGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateGroup, null, options, request);
      }
      /// <summary>
      /// Update a group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.UpdateGroupResponse> UpdateGroupAsync(global::Mruv.UpdateGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.UpdateGroupResponse> UpdateGroupAsync(global::Mruv.UpdateGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateGroup, null, options, request);
      }
      /// <summary>
      /// Delete a group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.DeleteGroupResponse DeleteGroup(global::Mruv.DeleteGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.DeleteGroupResponse DeleteGroup(global::Mruv.DeleteGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteGroup, null, options, request);
      }
      /// <summary>
      /// Delete a group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.DeleteGroupResponse> DeleteGroupAsync(global::Mruv.DeleteGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.DeleteGroupResponse> DeleteGroupAsync(global::Mruv.DeleteGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteGroup, null, options, request);
      }
      /// <summary>
      /// Get all groups.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.GetGroupsResponse GetGroups(global::Mruv.GetGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGroups(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all groups.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.GetGroupsResponse GetGroups(global::Mruv.GetGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGroups, null, options, request);
      }
      /// <summary>
      /// Get all groups.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetGroupsResponse> GetGroupsAsync(global::Mruv.GetGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGroupsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all groups.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetGroupsResponse> GetGroupsAsync(global::Mruv.GetGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGroups, null, options, request);
      }
      /// <summary>
      /// Assign an owner. Group can have only one owner. Owner can be a player, a group or an account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.AssignOwnerResponse AssignOwner(global::Mruv.AssignOwnerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AssignOwner(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Assign an owner. Group can have only one owner. Owner can be a player, a group or an account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.AssignOwnerResponse AssignOwner(global::Mruv.AssignOwnerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AssignOwner, null, options, request);
      }
      /// <summary>
      /// Assign an owner. Group can have only one owner. Owner can be a player, a group or an account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.AssignOwnerResponse> AssignOwnerAsync(global::Mruv.AssignOwnerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AssignOwnerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Assign an owner. Group can have only one owner. Owner can be a player, a group or an account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.AssignOwnerResponse> AssignOwnerAsync(global::Mruv.AssignOwnerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AssignOwner, null, options, request);
      }
      /// <summary>
      /// Get group owner.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.GetOwnerResponse GetOwner(global::Mruv.GetOwnerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOwner(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get group owner.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.GetOwnerResponse GetOwner(global::Mruv.GetOwnerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOwner, null, options, request);
      }
      /// <summary>
      /// Get group owner.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetOwnerResponse> GetOwnerAsync(global::Mruv.GetOwnerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOwnerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get group owner.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetOwnerResponse> GetOwnerAsync(global::Mruv.GetOwnerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOwner, null, options, request);
      }
      /// <summary>
      /// Add a group member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.AddMemberResponse AddMember(global::Mruv.AddMemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a group member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.AddMemberResponse AddMember(global::Mruv.AddMemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddMember, null, options, request);
      }
      /// <summary>
      /// Add a group member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.AddMemberResponse> AddMemberAsync(global::Mruv.AddMemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a group member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.AddMemberResponse> AddMemberAsync(global::Mruv.AddMemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddMember, null, options, request);
      }
      /// <summary>
      /// Get a group member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.GetMembersResponse GetMembers(global::Mruv.GetMembersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMembers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a group member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.GetMembersResponse GetMembers(global::Mruv.GetMembersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMembers, null, options, request);
      }
      /// <summary>
      /// Get a group member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetMembersResponse> GetMembersAsync(global::Mruv.GetMembersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMembersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a group member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetMembersResponse> GetMembersAsync(global::Mruv.GetMembersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMembers, null, options, request);
      }
      /// <summary>
      /// Remove a group member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.RemoveMemberResponse RemoveMember(global::Mruv.RemoveMemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove a group member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.RemoveMemberResponse RemoveMember(global::Mruv.RemoveMemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveMember, null, options, request);
      }
      /// <summary>
      /// Remove a group member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.RemoveMemberResponse> RemoveMemberAsync(global::Mruv.RemoveMemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove a group member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.RemoveMemberResponse> RemoveMemberAsync(global::Mruv.RemoveMemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveMember, null, options, request);
      }
      /// <summary>
      /// Add a permission to a group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.AddPermissionResponse AddPermission(global::Mruv.AddPermissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddPermission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a permission to a group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.AddPermissionResponse AddPermission(global::Mruv.AddPermissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddPermission, null, options, request);
      }
      /// <summary>
      /// Add a permission to a group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.AddPermissionResponse> AddPermissionAsync(global::Mruv.AddPermissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddPermissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a permission to a group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.AddPermissionResponse> AddPermissionAsync(global::Mruv.AddPermissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddPermission, null, options, request);
      }
      /// <summary>
      /// Get all group permissions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.GetPermissionsResponse GetPermissions(global::Mruv.GetPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all group permissions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.GetPermissionsResponse GetPermissions(global::Mruv.GetPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPermissions, null, options, request);
      }
      /// <summary>
      /// Get all group permissions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetPermissionsResponse> GetPermissionsAsync(global::Mruv.GetPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all group permissions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetPermissionsResponse> GetPermissionsAsync(global::Mruv.GetPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPermissions, null, options, request);
      }
      /// <summary>
      /// Remove group permission.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.RemovePermissionResponse RemovePermission(global::Mruv.RemovePermissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemovePermission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove group permission.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.RemovePermissionResponse RemovePermission(global::Mruv.RemovePermissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemovePermission, null, options, request);
      }
      /// <summary>
      /// Remove group permission.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.RemovePermissionResponse> RemovePermissionAsync(global::Mruv.RemovePermissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemovePermissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove group permission.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.RemovePermissionResponse> RemovePermissionAsync(global::Mruv.RemovePermissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemovePermission, null, options, request);
      }
      /// <summary>
      /// Add a subgroup to a group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.AddSubgroupResponse AddSubgroup(global::Mruv.AddSubgroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSubgroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a subgroup to a group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.AddSubgroupResponse AddSubgroup(global::Mruv.AddSubgroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddSubgroup, null, options, request);
      }
      /// <summary>
      /// Add a subgroup to a group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.AddSubgroupResponse> AddSubgroupAsync(global::Mruv.AddSubgroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSubgroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a subgroup to a group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.AddSubgroupResponse> AddSubgroupAsync(global::Mruv.AddSubgroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddSubgroup, null, options, request);
      }
      /// <summary>
      /// Get all subgroups.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.GetSubgroupsResponse GetSubgroups(global::Mruv.GetSubgroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSubgroups(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all subgroups.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.GetSubgroupsResponse GetSubgroups(global::Mruv.GetSubgroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSubgroups, null, options, request);
      }
      /// <summary>
      /// Get all subgroups.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetSubgroupsResponse> GetSubgroupsAsync(global::Mruv.GetSubgroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSubgroupsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all subgroups.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.GetSubgroupsResponse> GetSubgroupsAsync(global::Mruv.GetSubgroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSubgroups, null, options, request);
      }
      /// <summary>
      /// Remove a subgroup from group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.RemoveSubgroupResponse RemoveSubgroup(global::Mruv.RemoveSubgroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveSubgroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove a subgroup from group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.RemoveSubgroupResponse RemoveSubgroup(global::Mruv.RemoveSubgroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveSubgroup, null, options, request);
      }
      /// <summary>
      /// Remove a subgroup from group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.RemoveSubgroupResponse> RemoveSubgroupAsync(global::Mruv.RemoveSubgroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveSubgroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove a subgroup from group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.RemoveSubgroupResponse> RemoveSubgroupAsync(global::Mruv.RemoveSubgroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveSubgroup, null, options, request);
      }
      /// <summary>
      /// Check is member of a group is permitted to do specific action.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.IsPermittedResponse IsPermitted(global::Mruv.IsPermittedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsPermitted(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check is member of a group is permitted to do specific action.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.IsPermittedResponse IsPermitted(global::Mruv.IsPermittedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsPermitted, null, options, request);
      }
      /// <summary>
      /// Check is member of a group is permitted to do specific action.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.IsPermittedResponse> IsPermittedAsync(global::Mruv.IsPermittedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsPermittedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check is member of a group is permitted to do specific action.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.IsPermittedResponse> IsPermittedAsync(global::Mruv.IsPermittedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsPermitted, null, options, request);
      }
      /// <summary>
      ///Service status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.ServiceStatusResponse GetServiceStatus(global::Mruv.ServiceStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Service status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.ServiceStatusResponse GetServiceStatus(global::Mruv.ServiceStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServiceStatus, null, options, request);
      }
      /// <summary>
      ///Service status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.ServiceStatusResponse> GetServiceStatusAsync(global::Mruv.ServiceStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Service status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.ServiceStatusResponse> GetServiceStatusAsync(global::Mruv.ServiceStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServiceStatus, null, options, request);
      }
      public virtual global::Mruv.VersionResponse GetServiceVersion(global::Mruv.VersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mruv.VersionResponse GetServiceVersion(global::Mruv.VersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServiceVersion, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.VersionResponse> GetServiceVersionAsync(global::Mruv.VersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mruv.VersionResponse> GetServiceVersionAsync(global::Mruv.VersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServiceVersion, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MruVGroupsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MruVGroupsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MruVGroupsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateGroup, serviceImpl.CreateGroup)
          .AddMethod(__Method_GetGroup, serviceImpl.GetGroup)
          .AddMethod(__Method_UpdateGroup, serviceImpl.UpdateGroup)
          .AddMethod(__Method_DeleteGroup, serviceImpl.DeleteGroup)
          .AddMethod(__Method_GetGroups, serviceImpl.GetGroups)
          .AddMethod(__Method_AssignOwner, serviceImpl.AssignOwner)
          .AddMethod(__Method_GetOwner, serviceImpl.GetOwner)
          .AddMethod(__Method_AddMember, serviceImpl.AddMember)
          .AddMethod(__Method_GetMembers, serviceImpl.GetMembers)
          .AddMethod(__Method_RemoveMember, serviceImpl.RemoveMember)
          .AddMethod(__Method_AddPermission, serviceImpl.AddPermission)
          .AddMethod(__Method_GetPermissions, serviceImpl.GetPermissions)
          .AddMethod(__Method_RemovePermission, serviceImpl.RemovePermission)
          .AddMethod(__Method_AddSubgroup, serviceImpl.AddSubgroup)
          .AddMethod(__Method_GetSubgroups, serviceImpl.GetSubgroups)
          .AddMethod(__Method_RemoveSubgroup, serviceImpl.RemoveSubgroup)
          .AddMethod(__Method_IsPermitted, serviceImpl.IsPermitted)
          .AddMethod(__Method_GetServiceStatus, serviceImpl.GetServiceStatus)
          .AddMethod(__Method_GetServiceVersion, serviceImpl.GetServiceVersion).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MruVGroupsServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.CreateGroupRequest, global::Mruv.CreateGroupResponse>(serviceImpl.CreateGroup));
      serviceBinder.AddMethod(__Method_GetGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.GetGroupRequest, global::Mruv.GetGroupResponse>(serviceImpl.GetGroup));
      serviceBinder.AddMethod(__Method_UpdateGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.UpdateGroupRequest, global::Mruv.UpdateGroupResponse>(serviceImpl.UpdateGroup));
      serviceBinder.AddMethod(__Method_DeleteGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.DeleteGroupRequest, global::Mruv.DeleteGroupResponse>(serviceImpl.DeleteGroup));
      serviceBinder.AddMethod(__Method_GetGroups, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.GetGroupsRequest, global::Mruv.GetGroupsResponse>(serviceImpl.GetGroups));
      serviceBinder.AddMethod(__Method_AssignOwner, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.AssignOwnerRequest, global::Mruv.AssignOwnerResponse>(serviceImpl.AssignOwner));
      serviceBinder.AddMethod(__Method_GetOwner, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.GetOwnerRequest, global::Mruv.GetOwnerResponse>(serviceImpl.GetOwner));
      serviceBinder.AddMethod(__Method_AddMember, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.AddMemberRequest, global::Mruv.AddMemberResponse>(serviceImpl.AddMember));
      serviceBinder.AddMethod(__Method_GetMembers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.GetMembersRequest, global::Mruv.GetMembersResponse>(serviceImpl.GetMembers));
      serviceBinder.AddMethod(__Method_RemoveMember, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.RemoveMemberRequest, global::Mruv.RemoveMemberResponse>(serviceImpl.RemoveMember));
      serviceBinder.AddMethod(__Method_AddPermission, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.AddPermissionRequest, global::Mruv.AddPermissionResponse>(serviceImpl.AddPermission));
      serviceBinder.AddMethod(__Method_GetPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.GetPermissionsRequest, global::Mruv.GetPermissionsResponse>(serviceImpl.GetPermissions));
      serviceBinder.AddMethod(__Method_RemovePermission, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.RemovePermissionRequest, global::Mruv.RemovePermissionResponse>(serviceImpl.RemovePermission));
      serviceBinder.AddMethod(__Method_AddSubgroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.AddSubgroupRequest, global::Mruv.AddSubgroupResponse>(serviceImpl.AddSubgroup));
      serviceBinder.AddMethod(__Method_GetSubgroups, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.GetSubgroupsRequest, global::Mruv.GetSubgroupsResponse>(serviceImpl.GetSubgroups));
      serviceBinder.AddMethod(__Method_RemoveSubgroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.RemoveSubgroupRequest, global::Mruv.RemoveSubgroupResponse>(serviceImpl.RemoveSubgroup));
      serviceBinder.AddMethod(__Method_IsPermitted, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.IsPermittedRequest, global::Mruv.IsPermittedResponse>(serviceImpl.IsPermitted));
      serviceBinder.AddMethod(__Method_GetServiceStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.ServiceStatusRequest, global::Mruv.ServiceStatusResponse>(serviceImpl.GetServiceStatus));
      serviceBinder.AddMethod(__Method_GetServiceVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.VersionRequest, global::Mruv.VersionResponse>(serviceImpl.GetServiceVersion));
    }

  }
}
#endregion
