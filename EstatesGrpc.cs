// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: estates/estates.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mruv.Estates {
  /// <summary>
  /// The MruV estate service provides procedures for managing buildings and other estates.
  /// </summary>
  public static partial class MruVEstateService
  {
    static readonly string __ServiceName = "mruv.estates.MruVEstateService";

    static readonly grpc::Marshaller<global::Mruv.Estates.CreateEstateRequest> __Marshaller_mruv_estates_CreateEstateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.CreateEstateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.CreateEstateResponse> __Marshaller_mruv_estates_CreateEstateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.CreateEstateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.GetEstateRequest> __Marshaller_mruv_estates_GetEstateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.GetEstateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.Estate> __Marshaller_mruv_estates_Estate = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.Estate.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.UpdateEstateRequest> __Marshaller_mruv_estates_UpdateEstateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.UpdateEstateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.UpdateEstateResponse> __Marshaller_mruv_estates_UpdateEstateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.UpdateEstateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.DeleteEstateRequest> __Marshaller_mruv_estates_DeleteEstateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.DeleteEstateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.DeleteEstateResponse> __Marshaller_mruv_estates_DeleteEstateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.DeleteEstateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.GetEstatesRequest> __Marshaller_mruv_estates_GetEstatesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.GetEstatesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.GetEstatesResponse> __Marshaller_mruv_estates_GetEstatesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.GetEstatesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.AddGateRequest> __Marshaller_mruv_estates_AddGateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.AddGateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.AddGateResponse> __Marshaller_mruv_estates_AddGateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.AddGateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.RemoveGateRequest> __Marshaller_mruv_estates_RemoveGateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.RemoveGateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.RemoveGateResponse> __Marshaller_mruv_estates_RemoveGateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.RemoveGateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.GetEstateGatesRequest> __Marshaller_mruv_estates_GetEstateGatesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.GetEstateGatesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.GetEstateGatesResponse> __Marshaller_mruv_estates_GetEstateGatesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.GetEstateGatesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.AddEntranceRequest> __Marshaller_mruv_estates_AddEntranceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.AddEntranceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.AddEntranceResponse> __Marshaller_mruv_estates_AddEntranceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.AddEntranceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.RemoveEntranceRequest> __Marshaller_mruv_estates_RemoveEntranceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.RemoveEntranceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.RemoveEntranceResponse> __Marshaller_mruv_estates_RemoveEntranceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.RemoveEntranceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.GetEstateEntrancesRequest> __Marshaller_mruv_estates_GetEstateEntrancesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.GetEstateEntrancesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.GetEstateEntrancesResponse> __Marshaller_mruv_estates_GetEstateEntrancesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.GetEstateEntrancesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.FetchAllEstatesRequest> __Marshaller_mruv_estates_FetchAllEstatesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.FetchAllEstatesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mruv.Estates.FetchAllEstatesResponse> __Marshaller_mruv_estates_FetchAllEstatesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mruv.Estates.FetchAllEstatesResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Mruv.Estates.CreateEstateRequest, global::Mruv.Estates.CreateEstateResponse> __Method_CreateEstate = new grpc::Method<global::Mruv.Estates.CreateEstateRequest, global::Mruv.Estates.CreateEstateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateEstate",
        __Marshaller_mruv_estates_CreateEstateRequest,
        __Marshaller_mruv_estates_CreateEstateResponse);

    static readonly grpc::Method<global::Mruv.Estates.GetEstateRequest, global::Mruv.Estates.Estate> __Method_GetEstate = new grpc::Method<global::Mruv.Estates.GetEstateRequest, global::Mruv.Estates.Estate>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEstate",
        __Marshaller_mruv_estates_GetEstateRequest,
        __Marshaller_mruv_estates_Estate);

    static readonly grpc::Method<global::Mruv.Estates.UpdateEstateRequest, global::Mruv.Estates.UpdateEstateResponse> __Method_UpdateEstate = new grpc::Method<global::Mruv.Estates.UpdateEstateRequest, global::Mruv.Estates.UpdateEstateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateEstate",
        __Marshaller_mruv_estates_UpdateEstateRequest,
        __Marshaller_mruv_estates_UpdateEstateResponse);

    static readonly grpc::Method<global::Mruv.Estates.DeleteEstateRequest, global::Mruv.Estates.DeleteEstateResponse> __Method_DeleteEstate = new grpc::Method<global::Mruv.Estates.DeleteEstateRequest, global::Mruv.Estates.DeleteEstateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteEstate",
        __Marshaller_mruv_estates_DeleteEstateRequest,
        __Marshaller_mruv_estates_DeleteEstateResponse);

    static readonly grpc::Method<global::Mruv.Estates.GetEstatesRequest, global::Mruv.Estates.GetEstatesResponse> __Method_GetEstates = new grpc::Method<global::Mruv.Estates.GetEstatesRequest, global::Mruv.Estates.GetEstatesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEstates",
        __Marshaller_mruv_estates_GetEstatesRequest,
        __Marshaller_mruv_estates_GetEstatesResponse);

    static readonly grpc::Method<global::Mruv.Estates.AddGateRequest, global::Mruv.Estates.AddGateResponse> __Method_AddGate = new grpc::Method<global::Mruv.Estates.AddGateRequest, global::Mruv.Estates.AddGateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddGate",
        __Marshaller_mruv_estates_AddGateRequest,
        __Marshaller_mruv_estates_AddGateResponse);

    static readonly grpc::Method<global::Mruv.Estates.RemoveGateRequest, global::Mruv.Estates.RemoveGateResponse> __Method_RemoveGate = new grpc::Method<global::Mruv.Estates.RemoveGateRequest, global::Mruv.Estates.RemoveGateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveGate",
        __Marshaller_mruv_estates_RemoveGateRequest,
        __Marshaller_mruv_estates_RemoveGateResponse);

    static readonly grpc::Method<global::Mruv.Estates.GetEstateGatesRequest, global::Mruv.Estates.GetEstateGatesResponse> __Method_GetEstateGates = new grpc::Method<global::Mruv.Estates.GetEstateGatesRequest, global::Mruv.Estates.GetEstateGatesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEstateGates",
        __Marshaller_mruv_estates_GetEstateGatesRequest,
        __Marshaller_mruv_estates_GetEstateGatesResponse);

    static readonly grpc::Method<global::Mruv.Estates.AddEntranceRequest, global::Mruv.Estates.AddEntranceResponse> __Method_AddEntrance = new grpc::Method<global::Mruv.Estates.AddEntranceRequest, global::Mruv.Estates.AddEntranceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddEntrance",
        __Marshaller_mruv_estates_AddEntranceRequest,
        __Marshaller_mruv_estates_AddEntranceResponse);

    static readonly grpc::Method<global::Mruv.Estates.RemoveEntranceRequest, global::Mruv.Estates.RemoveEntranceResponse> __Method_RemoveEntrance = new grpc::Method<global::Mruv.Estates.RemoveEntranceRequest, global::Mruv.Estates.RemoveEntranceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveEntrance",
        __Marshaller_mruv_estates_RemoveEntranceRequest,
        __Marshaller_mruv_estates_RemoveEntranceResponse);

    static readonly grpc::Method<global::Mruv.Estates.GetEstateEntrancesRequest, global::Mruv.Estates.GetEstateEntrancesResponse> __Method_GetEstateEntrances = new grpc::Method<global::Mruv.Estates.GetEstateEntrancesRequest, global::Mruv.Estates.GetEstateEntrancesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEstateEntrances",
        __Marshaller_mruv_estates_GetEstateEntrancesRequest,
        __Marshaller_mruv_estates_GetEstateEntrancesResponse);

    static readonly grpc::Method<global::Mruv.Estates.FetchAllEstatesRequest, global::Mruv.Estates.FetchAllEstatesResponse> __Method_FetchAll = new grpc::Method<global::Mruv.Estates.FetchAllEstatesRequest, global::Mruv.Estates.FetchAllEstatesResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "FetchAll",
        __Marshaller_mruv_estates_FetchAllEstatesRequest,
        __Marshaller_mruv_estates_FetchAllEstatesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mruv.Estates.EstatesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MruVEstateService</summary>
    [grpc::BindServiceMethod(typeof(MruVEstateService), "BindService")]
    public abstract partial class MruVEstateServiceBase
    {
      /// <summary>
      /// Create real estate.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Estates.CreateEstateResponse> CreateEstate(global::Mruv.Estates.CreateEstateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get real estate.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Estates.Estate> GetEstate(global::Mruv.Estates.GetEstateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update real estate.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Estates.UpdateEstateResponse> UpdateEstate(global::Mruv.Estates.UpdateEstateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete real estate.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Estates.DeleteEstateResponse> DeleteEstate(global::Mruv.Estates.DeleteEstateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get all created real estates.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Estates.GetEstatesResponse> GetEstates(global::Mruv.Estates.GetEstatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a gate to an estate.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Estates.AddGateResponse> AddGate(global::Mruv.Estates.AddGateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a gate from estate.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Estates.RemoveGateResponse> RemoveGate(global::Mruv.Estates.RemoveGateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get all estate gates.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Estates.GetEstateGatesResponse> GetEstateGates(global::Mruv.Estates.GetEstateGatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add an entrance to estate.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Estates.AddEntranceResponse> AddEntrance(global::Mruv.Estates.AddEntranceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Remove an entrance from estate.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Estates.RemoveEntranceResponse> RemoveEntrance(global::Mruv.Estates.RemoveEntranceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get all estate entrances.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mruv.Estates.GetEstateEntrancesResponse> GetEstateEntrances(global::Mruv.Estates.GetEstateEntrancesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get full estates data
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task FetchAll(global::Mruv.Estates.FetchAllEstatesRequest request, grpc::IServerStreamWriter<global::Mruv.Estates.FetchAllEstatesResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MruVEstateService</summary>
    public partial class MruVEstateServiceClient : grpc::ClientBase<MruVEstateServiceClient>
    {
      /// <summary>Creates a new client for MruVEstateService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MruVEstateServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MruVEstateService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MruVEstateServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MruVEstateServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MruVEstateServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create real estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.CreateEstateResponse CreateEstate(global::Mruv.Estates.CreateEstateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateEstate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create real estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.CreateEstateResponse CreateEstate(global::Mruv.Estates.CreateEstateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateEstate, null, options, request);
      }
      /// <summary>
      /// Create real estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.CreateEstateResponse> CreateEstateAsync(global::Mruv.Estates.CreateEstateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateEstateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create real estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.CreateEstateResponse> CreateEstateAsync(global::Mruv.Estates.CreateEstateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateEstate, null, options, request);
      }
      /// <summary>
      /// Get real estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.Estate GetEstate(global::Mruv.Estates.GetEstateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEstate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get real estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.Estate GetEstate(global::Mruv.Estates.GetEstateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEstate, null, options, request);
      }
      /// <summary>
      /// Get real estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.Estate> GetEstateAsync(global::Mruv.Estates.GetEstateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEstateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get real estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.Estate> GetEstateAsync(global::Mruv.Estates.GetEstateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEstate, null, options, request);
      }
      /// <summary>
      /// Update real estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.UpdateEstateResponse UpdateEstate(global::Mruv.Estates.UpdateEstateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateEstate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update real estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.UpdateEstateResponse UpdateEstate(global::Mruv.Estates.UpdateEstateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateEstate, null, options, request);
      }
      /// <summary>
      /// Update real estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.UpdateEstateResponse> UpdateEstateAsync(global::Mruv.Estates.UpdateEstateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateEstateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update real estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.UpdateEstateResponse> UpdateEstateAsync(global::Mruv.Estates.UpdateEstateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateEstate, null, options, request);
      }
      /// <summary>
      /// Delete real estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.DeleteEstateResponse DeleteEstate(global::Mruv.Estates.DeleteEstateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteEstate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete real estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.DeleteEstateResponse DeleteEstate(global::Mruv.Estates.DeleteEstateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteEstate, null, options, request);
      }
      /// <summary>
      /// Delete real estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.DeleteEstateResponse> DeleteEstateAsync(global::Mruv.Estates.DeleteEstateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteEstateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete real estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.DeleteEstateResponse> DeleteEstateAsync(global::Mruv.Estates.DeleteEstateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteEstate, null, options, request);
      }
      /// <summary>
      /// Get all created real estates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.GetEstatesResponse GetEstates(global::Mruv.Estates.GetEstatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEstates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all created real estates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.GetEstatesResponse GetEstates(global::Mruv.Estates.GetEstatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEstates, null, options, request);
      }
      /// <summary>
      /// Get all created real estates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.GetEstatesResponse> GetEstatesAsync(global::Mruv.Estates.GetEstatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEstatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all created real estates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.GetEstatesResponse> GetEstatesAsync(global::Mruv.Estates.GetEstatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEstates, null, options, request);
      }
      /// <summary>
      /// Add a gate to an estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.AddGateResponse AddGate(global::Mruv.Estates.AddGateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a gate to an estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.AddGateResponse AddGate(global::Mruv.Estates.AddGateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddGate, null, options, request);
      }
      /// <summary>
      /// Add a gate to an estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.AddGateResponse> AddGateAsync(global::Mruv.Estates.AddGateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a gate to an estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.AddGateResponse> AddGateAsync(global::Mruv.Estates.AddGateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddGate, null, options, request);
      }
      /// <summary>
      /// Delete a gate from estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.RemoveGateResponse RemoveGate(global::Mruv.Estates.RemoveGateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveGate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a gate from estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.RemoveGateResponse RemoveGate(global::Mruv.Estates.RemoveGateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveGate, null, options, request);
      }
      /// <summary>
      /// Delete a gate from estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.RemoveGateResponse> RemoveGateAsync(global::Mruv.Estates.RemoveGateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveGateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a gate from estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.RemoveGateResponse> RemoveGateAsync(global::Mruv.Estates.RemoveGateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveGate, null, options, request);
      }
      /// <summary>
      /// Get all estate gates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.GetEstateGatesResponse GetEstateGates(global::Mruv.Estates.GetEstateGatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEstateGates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all estate gates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.GetEstateGatesResponse GetEstateGates(global::Mruv.Estates.GetEstateGatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEstateGates, null, options, request);
      }
      /// <summary>
      /// Get all estate gates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.GetEstateGatesResponse> GetEstateGatesAsync(global::Mruv.Estates.GetEstateGatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEstateGatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all estate gates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.GetEstateGatesResponse> GetEstateGatesAsync(global::Mruv.Estates.GetEstateGatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEstateGates, null, options, request);
      }
      /// <summary>
      /// Add an entrance to estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.AddEntranceResponse AddEntrance(global::Mruv.Estates.AddEntranceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddEntrance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add an entrance to estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.AddEntranceResponse AddEntrance(global::Mruv.Estates.AddEntranceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddEntrance, null, options, request);
      }
      /// <summary>
      /// Add an entrance to estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.AddEntranceResponse> AddEntranceAsync(global::Mruv.Estates.AddEntranceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddEntranceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add an entrance to estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.AddEntranceResponse> AddEntranceAsync(global::Mruv.Estates.AddEntranceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddEntrance, null, options, request);
      }
      /// <summary>
      /// Remove an entrance from estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.RemoveEntranceResponse RemoveEntrance(global::Mruv.Estates.RemoveEntranceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveEntrance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove an entrance from estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.RemoveEntranceResponse RemoveEntrance(global::Mruv.Estates.RemoveEntranceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveEntrance, null, options, request);
      }
      /// <summary>
      /// Remove an entrance from estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.RemoveEntranceResponse> RemoveEntranceAsync(global::Mruv.Estates.RemoveEntranceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveEntranceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove an entrance from estate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.RemoveEntranceResponse> RemoveEntranceAsync(global::Mruv.Estates.RemoveEntranceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveEntrance, null, options, request);
      }
      /// <summary>
      /// Get all estate entrances.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.GetEstateEntrancesResponse GetEstateEntrances(global::Mruv.Estates.GetEstateEntrancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEstateEntrances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all estate entrances.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mruv.Estates.GetEstateEntrancesResponse GetEstateEntrances(global::Mruv.Estates.GetEstateEntrancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEstateEntrances, null, options, request);
      }
      /// <summary>
      /// Get all estate entrances.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.GetEstateEntrancesResponse> GetEstateEntrancesAsync(global::Mruv.Estates.GetEstateEntrancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEstateEntrancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all estate entrances.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mruv.Estates.GetEstateEntrancesResponse> GetEstateEntrancesAsync(global::Mruv.Estates.GetEstateEntrancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEstateEntrances, null, options, request);
      }
      /// <summary>
      /// Get full estates data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Estates.FetchAllEstatesResponse> FetchAll(global::Mruv.Estates.FetchAllEstatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchAll(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get full estates data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Mruv.Estates.FetchAllEstatesResponse> FetchAll(global::Mruv.Estates.FetchAllEstatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_FetchAll, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MruVEstateServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MruVEstateServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MruVEstateServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateEstate, serviceImpl.CreateEstate)
          .AddMethod(__Method_GetEstate, serviceImpl.GetEstate)
          .AddMethod(__Method_UpdateEstate, serviceImpl.UpdateEstate)
          .AddMethod(__Method_DeleteEstate, serviceImpl.DeleteEstate)
          .AddMethod(__Method_GetEstates, serviceImpl.GetEstates)
          .AddMethod(__Method_AddGate, serviceImpl.AddGate)
          .AddMethod(__Method_RemoveGate, serviceImpl.RemoveGate)
          .AddMethod(__Method_GetEstateGates, serviceImpl.GetEstateGates)
          .AddMethod(__Method_AddEntrance, serviceImpl.AddEntrance)
          .AddMethod(__Method_RemoveEntrance, serviceImpl.RemoveEntrance)
          .AddMethod(__Method_GetEstateEntrances, serviceImpl.GetEstateEntrances)
          .AddMethod(__Method_FetchAll, serviceImpl.FetchAll).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MruVEstateServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateEstate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Estates.CreateEstateRequest, global::Mruv.Estates.CreateEstateResponse>(serviceImpl.CreateEstate));
      serviceBinder.AddMethod(__Method_GetEstate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Estates.GetEstateRequest, global::Mruv.Estates.Estate>(serviceImpl.GetEstate));
      serviceBinder.AddMethod(__Method_UpdateEstate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Estates.UpdateEstateRequest, global::Mruv.Estates.UpdateEstateResponse>(serviceImpl.UpdateEstate));
      serviceBinder.AddMethod(__Method_DeleteEstate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Estates.DeleteEstateRequest, global::Mruv.Estates.DeleteEstateResponse>(serviceImpl.DeleteEstate));
      serviceBinder.AddMethod(__Method_GetEstates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Estates.GetEstatesRequest, global::Mruv.Estates.GetEstatesResponse>(serviceImpl.GetEstates));
      serviceBinder.AddMethod(__Method_AddGate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Estates.AddGateRequest, global::Mruv.Estates.AddGateResponse>(serviceImpl.AddGate));
      serviceBinder.AddMethod(__Method_RemoveGate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Estates.RemoveGateRequest, global::Mruv.Estates.RemoveGateResponse>(serviceImpl.RemoveGate));
      serviceBinder.AddMethod(__Method_GetEstateGates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Estates.GetEstateGatesRequest, global::Mruv.Estates.GetEstateGatesResponse>(serviceImpl.GetEstateGates));
      serviceBinder.AddMethod(__Method_AddEntrance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Estates.AddEntranceRequest, global::Mruv.Estates.AddEntranceResponse>(serviceImpl.AddEntrance));
      serviceBinder.AddMethod(__Method_RemoveEntrance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Estates.RemoveEntranceRequest, global::Mruv.Estates.RemoveEntranceResponse>(serviceImpl.RemoveEntrance));
      serviceBinder.AddMethod(__Method_GetEstateEntrances, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mruv.Estates.GetEstateEntrancesRequest, global::Mruv.Estates.GetEstateEntrancesResponse>(serviceImpl.GetEstateEntrances));
      serviceBinder.AddMethod(__Method_FetchAll, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mruv.Estates.FetchAllEstatesRequest, global::Mruv.Estates.FetchAllEstatesResponse>(serviceImpl.FetchAll));
    }

  }
}
#endregion
